{"version":3,"sources":["webpack:///13.51946602ec2b88461b81.js","webpack:///./components/channel_view.jsx","webpack:///./components/post_view/post_view_cache.jsx","webpack:///./components/post_view/post_view_controller.jsx"],"names":["webpackJsonp","1681","module","exports","__webpack_require__","_interopRequireWildcard","obj","__esModule","newObj","key","Object","prototype","hasOwnProperty","call","default","_interopRequireDefault","defineProperty","value","_getPrototypeOf","_getPrototypeOf2","_classCallCheck2","_classCallCheck3","_createClass2","_createClass3","_possibleConstructorReturn2","_possibleConstructorReturn3","_inherits2","_inherits3","_jquery","_jquery2","_react","_react2","_channel_header","_channel_header2","_file_upload_overlay","_file_upload_overlay2","_create_post","_create_post2","_post_view_cache","_post_view_cache2","_channel_store","_channel_store2","_utils","Utils","ChannelView","_React$Component","props","this","_this","__proto__","getStateFromStores","bind","isStateValid","updateState","state","channel","getByName","params","channelId","id","setState","addChangeListener","addClass","removeChangeListener","removeClass","nextProps","nextState","areObjectsEqual","createElement","className","overlayType","Component","defaultProps","propTypes","PropTypes","object","isRequired","2025","_assign","_assign2","_post_view_controller","_post_view_controller2","_user_store","_user_store2","_async_client","AsyncClient","MAXIMUM_CACHED_VIEWS","PostViewCache","onChannelChange","currentChannelId","getCurrentId","getCurrent","channels","getCurrentUser","viewChannel","currentChannel","length","shift","index","map","c","indexOf","splice","push","postViews","i","active","2026","_stringify","_stringify2","_post_list","_post_list2","_loading_screen","_loading_screen2","_preference_store","_preference_store2","_post_store","_post_store2","_team_store","_team_store2","_webrtc_store","_webrtc_store2","_constants","_constants2","Preferences","ScrollTypes","PostViewController","onPreferenceChange","onUserChange","onPostsChange","onTeamChange","onStatusChange","onPostsViewJumpRequest","onSetNewMessageIndicator","onPostListScroll","onActivate","onDeactivate","onBusy","profiles","getProfiles","lastViewed","Number","MAX_VALUE","lastViewedBottom","member","getMyMember","last_viewed_at","joinLeaveEnabled","getBool","CATEGORY_ADVANCED_SETTINGS","statuses","getStatuses","loading","getLatestPostFromPageTime","postList","filterPosts","currentUser","currentTeamId","isBusy","atTop","getVisibilityAtTop","ownNewMessage","scrollType","NEW_MESSAGE","displayNameType","get","CATEGORY_DISPLAY_SETTINGS","displayPostsInCenter","CHANNEL_DISPLAY_MODE","CHANNEL_DISPLAY_MODE_DEFAULT","CHANNEL_DISPLAY_MODE_CENTERED","compactDisplay","MESSAGE_DISPLAY","MESSAGE_DISPLAY_DEFAULT","MESSAGE_DISPLAY_COMPACT","previewsCollapsed","COLLAPSE_DISPLAY","useMilitaryTime","USE_MILITARY_TIME","flaggedPosts","getCategory","CATEGORY_FLAGGED_POST","category","previewSuffix","generateId","JSON","parse","newState","type","OPEN_CHANNEL","PRIVATE_CHANNEL","team_id","addStatusesChangeListener","addPostsViewJumpListener","addLastViewedListener","addBusyListener","removeStatusesChangeListener","removePostsViewJumpListener","removeLastViewedListener","removeBusyListener","postId","PostsViewJumpTypes","BOTTOM","lastPost","getLatestPost","create_at","Date","getTime","POST","scrollPostId","SIDEBAR_OPEN","atBottom","FREE","showMoreMessagesTop","content","position","postListScrolled","activeClass","bool"],"mappings":"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","file":"13.51946602ec2b88461b81.js","sourcesContent":["webpackJsonp([13],{\n\n/***/ 1681:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getPrototypeOf = __webpack_require__(6);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(2);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(5);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(3);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _jquery = __webpack_require__(0);\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _react = __webpack_require__(1);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _channel_header = __webpack_require__(1672);\n\nvar _channel_header2 = _interopRequireDefault(_channel_header);\n\nvar _file_upload_overlay = __webpack_require__(1674);\n\nvar _file_upload_overlay2 = _interopRequireDefault(_file_upload_overlay);\n\nvar _create_post = __webpack_require__(1673);\n\nvar _create_post2 = _interopRequireDefault(_create_post);\n\nvar _post_view_cache = __webpack_require__(2025);\n\nvar _post_view_cache2 = _interopRequireDefault(_post_view_cache);\n\nvar _channel_store = __webpack_require__(24);\n\nvar _channel_store2 = _interopRequireDefault(_channel_store);\n\nvar _utils = __webpack_require__(11);\n\nvar Utils = _interopRequireWildcard(_utils);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Copyright (c) 2015 Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nvar ChannelView = function (_React$Component) {\n    (0, _inherits3.default)(ChannelView, _React$Component);\n\n    function ChannelView(props) {\n        (0, _classCallCheck3.default)(this, ChannelView);\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (ChannelView.__proto__ || (0, _getPrototypeOf2.default)(ChannelView)).call(this, props));\n\n        _this.getStateFromStores = _this.getStateFromStores.bind(_this);\n        _this.isStateValid = _this.isStateValid.bind(_this);\n        _this.updateState = _this.updateState.bind(_this);\n\n        _this.state = _this.getStateFromStores(props);\n        return _this;\n    }\n\n    (0, _createClass3.default)(ChannelView, [{\n        key: 'getStateFromStores',\n        value: function getStateFromStores(props) {\n            var channel = _channel_store2.default.getByName(props.params.channel);\n            var channelId = channel ? channel.id : '';\n            return {\n                channelId: channelId\n            };\n        }\n    }, {\n        key: 'isStateValid',\n        value: function isStateValid() {\n            return this.state.channelId !== '';\n        }\n    }, {\n        key: 'updateState',\n        value: function updateState() {\n            this.setState(this.getStateFromStores(this.props));\n        }\n    }, {\n        key: 'componentDidMount',\n        value: function componentDidMount() {\n            _channel_store2.default.addChangeListener(this.updateState);\n\n            (0, _jquery2.default)('body').addClass('app__body');\n        }\n    }, {\n        key: 'componentWillUnmount',\n        value: function componentWillUnmount() {\n            _channel_store2.default.removeChangeListener(this.updateState);\n\n            (0, _jquery2.default)('body').removeClass('app__body');\n        }\n    }, {\n        key: 'componentWillReceiveProps',\n        value: function componentWillReceiveProps(nextProps) {\n            this.setState(this.getStateFromStores(nextProps));\n        }\n    }, {\n        key: 'shouldComponentUpdate',\n        value: function shouldComponentUpdate(nextProps, nextState) {\n            if (!Utils.areObjectsEqual(nextProps.params, this.props.params)) {\n                return true;\n            }\n\n            if (nextState.channelId !== this.state.channelId) {\n                return true;\n            }\n\n            return false;\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            return _react2.default.createElement(\n                'div',\n                {\n                    id: 'app-content',\n                    className: 'app__content'\n                },\n                _react2.default.createElement(_file_upload_overlay2.default, { overlayType: 'center' }),\n                _react2.default.createElement(_channel_header2.default, {\n                    channelId: this.state.channelId\n                }),\n                _react2.default.createElement(_post_view_cache2.default, null),\n                _react2.default.createElement(\n                    'div',\n                    {\n                        className: 'post-create__container',\n                        id: 'post-create'\n                    },\n                    _react2.default.createElement(_create_post2.default, null)\n                )\n            );\n        }\n    }]);\n    return ChannelView;\n}(_react2.default.Component);\n\nexports.default = ChannelView;\n\nChannelView.defaultProps = {};\n\nChannelView.propTypes = {\n    params: _react2.default.PropTypes.object.isRequired\n};\n\n/***/ }),\n\n/***/ 2025:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _assign = __webpack_require__(31);\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _getPrototypeOf = __webpack_require__(6);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(2);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(5);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(3);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _post_view_controller = __webpack_require__(2026);\n\nvar _post_view_controller2 = _interopRequireDefault(_post_view_controller);\n\nvar _channel_store = __webpack_require__(24);\n\nvar _channel_store2 = _interopRequireDefault(_channel_store);\n\nvar _user_store = __webpack_require__(15);\n\nvar _user_store2 = _interopRequireDefault(_user_store);\n\nvar _async_client = __webpack_require__(20);\n\nvar AsyncClient = _interopRequireWildcard(_async_client);\n\nvar _react = __webpack_require__(1);\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar MAXIMUM_CACHED_VIEWS = 5; // Copyright (c) 2016 Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information\n\nvar PostViewCache = function (_React$Component) {\n    (0, _inherits3.default)(PostViewCache, _React$Component);\n\n    function PostViewCache(props) {\n        (0, _classCallCheck3.default)(this, PostViewCache);\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (PostViewCache.__proto__ || (0, _getPrototypeOf2.default)(PostViewCache)).call(this, props));\n\n        _this.onChannelChange = _this.onChannelChange.bind(_this);\n\n        var currentChannelId = _channel_store2.default.getCurrentId();\n        var channel = _channel_store2.default.getCurrent();\n\n        _this.state = {\n            currentChannelId: currentChannelId,\n            channels: channel ? [channel] : []\n        };\n        return _this;\n    }\n\n    (0, _createClass3.default)(PostViewCache, [{\n        key: 'componentDidMount',\n        value: function componentDidMount() {\n            _channel_store2.default.addChangeListener(this.onChannelChange);\n        }\n    }, {\n        key: 'componentWillUnmount',\n        value: function componentWillUnmount() {\n            if (_user_store2.default.getCurrentUser()) {\n                AsyncClient.viewChannel('', this.state.currentChannelId || '');\n            }\n            _channel_store2.default.removeChangeListener(this.onChannelChange);\n        }\n    }, {\n        key: 'onChannelChange',\n        value: function onChannelChange() {\n            var channels = (0, _assign2.default)([], this.state.channels);\n            var currentChannel = _channel_store2.default.getCurrent();\n\n            if (!currentChannel) {\n                return;\n            }\n\n            // make sure current channel really changed\n            if (currentChannel.id === this.state.currentChannelId) {\n                return;\n            }\n\n            if (channels.length > MAXIMUM_CACHED_VIEWS) {\n                channels.shift();\n            }\n\n            var index = channels.map(function (c) {\n                return c.id;\n            }).indexOf(currentChannel.id);\n            if (index !== -1) {\n                channels.splice(index, 1);\n            }\n\n            channels.push(currentChannel);\n\n            this.setState({\n                currentChannelId: currentChannel.id,\n                channels: channels\n            });\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var channels = this.state.channels;\n            var currentChannelId = this.state.currentChannelId;\n\n            var postViews = [];\n            for (var i = 0; i < channels.length; i++) {\n                postViews.push(_react2.default.createElement(_post_view_controller2.default, {\n                    key: 'postviewcontroller_' + channels[i].id,\n                    channel: channels[i],\n                    active: channels[i].id === currentChannelId\n                }));\n            }\n\n            return _react2.default.createElement(\n                'div',\n                { id: 'post-list' },\n                postViews\n            );\n        }\n    }]);\n    return PostViewCache;\n}(_react2.default.Component);\n\nexports.default = PostViewCache;\n\n/***/ }),\n\n/***/ 2026:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _stringify = __webpack_require__(71);\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _assign = __webpack_require__(31);\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _getPrototypeOf = __webpack_require__(6);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(2);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(5);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(3);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _post_list = __webpack_require__(1677);\n\nvar _post_list2 = _interopRequireDefault(_post_list);\n\nvar _loading_screen = __webpack_require__(164);\n\nvar _loading_screen2 = _interopRequireDefault(_loading_screen);\n\nvar _preference_store = __webpack_require__(42);\n\nvar _preference_store2 = _interopRequireDefault(_preference_store);\n\nvar _user_store = __webpack_require__(15);\n\nvar _user_store2 = _interopRequireDefault(_user_store);\n\nvar _post_store = __webpack_require__(140);\n\nvar _post_store2 = _interopRequireDefault(_post_store);\n\nvar _channel_store = __webpack_require__(24);\n\nvar _channel_store2 = _interopRequireDefault(_channel_store);\n\nvar _team_store = __webpack_require__(23);\n\nvar _team_store2 = _interopRequireDefault(_team_store);\n\nvar _webrtc_store = __webpack_require__(334);\n\nvar _webrtc_store2 = _interopRequireDefault(_webrtc_store);\n\nvar _utils = __webpack_require__(11);\n\nvar Utils = _interopRequireWildcard(_utils);\n\nvar _constants = __webpack_require__(8);\n\nvar _constants2 = _interopRequireDefault(_constants);\n\nvar _react = __webpack_require__(1);\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Copyright (c) 2016 Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nvar Preferences = _constants2.default.Preferences;\nvar ScrollTypes = _constants2.default.ScrollTypes;\n\nvar PostViewController = function (_React$Component) {\n    (0, _inherits3.default)(PostViewController, _React$Component);\n\n    function PostViewController(props) {\n        (0, _classCallCheck3.default)(this, PostViewController);\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (PostViewController.__proto__ || (0, _getPrototypeOf2.default)(PostViewController)).call(this, props));\n\n        _this.onPreferenceChange = _this.onPreferenceChange.bind(_this);\n        _this.onUserChange = _this.onUserChange.bind(_this);\n        _this.onPostsChange = _this.onPostsChange.bind(_this);\n        _this.onTeamChange = _this.onTeamChange.bind(_this);\n        _this.onStatusChange = _this.onStatusChange.bind(_this);\n        _this.onPostsViewJumpRequest = _this.onPostsViewJumpRequest.bind(_this);\n        _this.onSetNewMessageIndicator = _this.onSetNewMessageIndicator.bind(_this);\n        _this.onPostListScroll = _this.onPostListScroll.bind(_this);\n        _this.onActivate = _this.onActivate.bind(_this);\n        _this.onDeactivate = _this.onDeactivate.bind(_this);\n        _this.onBusy = _this.onBusy.bind(_this);\n\n        var channel = props.channel;\n        var profiles = _user_store2.default.getProfiles();\n\n        var lastViewed = Number.MAX_VALUE;\n        var lastViewedBottom = Number.MAX_VALUE;\n        var member = _channel_store2.default.getMyMember(channel.id);\n        if (member != null) {\n            lastViewed = member.last_viewed_at;\n            lastViewedBottom = member.last_viewed_at;\n        }\n\n        var joinLeaveEnabled = _preference_store2.default.getBool(_constants2.default.Preferences.CATEGORY_ADVANCED_SETTINGS, 'join_leave', true);\n\n        var statuses = (0, _assign2.default)({}, _user_store2.default.getStatuses());\n\n        // If we haven't received a page time then we aren't done loading the posts yet\n        var loading = _post_store2.default.getLatestPostFromPageTime(channel.id) === 0;\n\n        _this.state = {\n            channel: channel,\n            postList: _post_store2.default.filterPosts(channel.id, joinLeaveEnabled),\n            currentUser: _user_store2.default.getCurrentUser(),\n            currentTeamId: _team_store2.default.getCurrentId(),\n            isBusy: _webrtc_store2.default.isBusy(),\n            profiles: profiles,\n            statuses: statuses,\n            atTop: _post_store2.default.getVisibilityAtTop(channel.id),\n            lastViewed: lastViewed,\n            lastViewedBottom: lastViewedBottom,\n            ownNewMessage: false,\n            loading: loading,\n            scrollType: ScrollTypes.NEW_MESSAGE,\n            displayNameType: _preference_store2.default.get(Preferences.CATEGORY_DISPLAY_SETTINGS, 'name_format', 'false'),\n            displayPostsInCenter: _preference_store2.default.get(Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.CHANNEL_DISPLAY_MODE, Preferences.CHANNEL_DISPLAY_MODE_DEFAULT) === Preferences.CHANNEL_DISPLAY_MODE_CENTERED,\n            compactDisplay: _preference_store2.default.get(Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.MESSAGE_DISPLAY, Preferences.MESSAGE_DISPLAY_DEFAULT) === Preferences.MESSAGE_DISPLAY_COMPACT,\n            previewsCollapsed: _preference_store2.default.get(Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.COLLAPSE_DISPLAY, 'false'),\n            useMilitaryTime: _preference_store2.default.getBool(_constants2.default.Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.USE_MILITARY_TIME, false),\n            flaggedPosts: _preference_store2.default.getCategory(_constants2.default.Preferences.CATEGORY_FLAGGED_POST)\n        };\n        return _this;\n    }\n\n    (0, _createClass3.default)(PostViewController, [{\n        key: 'componentDidMount',\n        value: function componentDidMount() {\n            if (this.props.active) {\n                this.onActivate();\n            }\n        }\n    }, {\n        key: 'componentWillUnmount',\n        value: function componentWillUnmount() {\n            if (this.props.active) {\n                this.onDeactivate();\n            }\n        }\n    }, {\n        key: 'onPreferenceChange',\n        value: function onPreferenceChange(category) {\n            // Bit of a hack to force render when this setting is updated\n            // regardless of change\n            var previewSuffix = '';\n            if (category === Preferences.CATEGORY_DISPLAY_SETTINGS) {\n                previewSuffix = '_' + Utils.generateId();\n            }\n\n            var joinLeaveEnabled = _preference_store2.default.getBool(_constants2.default.Preferences.CATEGORY_ADVANCED_SETTINGS, 'join_leave', true);\n\n            this.setState({\n                postList: _post_store2.default.filterPosts(this.state.channel.id, joinLeaveEnabled),\n                displayNameType: _preference_store2.default.get(Preferences.CATEGORY_DISPLAY_SETTINGS, 'name_format', 'false'),\n                displayPostsInCenter: _preference_store2.default.get(Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.CHANNEL_DISPLAY_MODE, Preferences.CHANNEL_DISPLAY_MODE_DEFAULT) === Preferences.CHANNEL_DISPLAY_MODE_CENTERED,\n                compactDisplay: _preference_store2.default.get(Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.MESSAGE_DISPLAY, Preferences.MESSAGE_DISPLAY_DEFAULT) === Preferences.MESSAGE_DISPLAY_COMPACT,\n                previewsCollapsed: _preference_store2.default.get(Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.COLLAPSE_DISPLAY, 'false') + previewSuffix,\n                useMilitaryTime: _preference_store2.default.getBool(_constants2.default.Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.USE_MILITARY_TIME, false),\n                flaggedPosts: _preference_store2.default.getCategory(_constants2.default.Preferences.CATEGORY_FLAGGED_POST)\n            });\n        }\n    }, {\n        key: 'onUserChange',\n        value: function onUserChange() {\n            this.setState({ currentUser: _user_store2.default.getCurrentUser(), profiles: JSON.parse((0, _stringify2.default)(_user_store2.default.getProfiles())) });\n        }\n    }, {\n        key: 'onPostsChange',\n        value: function onPostsChange() {\n            var joinLeaveEnabled = _preference_store2.default.getBool(_constants2.default.Preferences.CATEGORY_ADVANCED_SETTINGS, 'join_leave', true);\n            var loading = _post_store2.default.getLatestPostFromPageTime(this.state.channel.id) === 0;\n\n            var newState = {\n                postList: _post_store2.default.filterPosts(this.state.channel.id, joinLeaveEnabled),\n                atTop: _post_store2.default.getVisibilityAtTop(this.state.channel.id),\n                loading: loading\n            };\n\n            if (this.state.loading && !loading) {\n                newState.scrollType = ScrollTypes.NEW_MESSAGE;\n            }\n\n            this.setState(newState);\n        }\n    }, {\n        key: 'onStatusChange',\n        value: function onStatusChange() {\n            this.setState({ statuses: (0, _assign2.default)({}, _user_store2.default.getStatuses()) });\n        }\n    }, {\n        key: 'onTeamChange',\n        value: function onTeamChange() {\n            var currentTeamId = _team_store2.default.getCurrentId();\n            if ((this.state.channel.type === _constants2.default.OPEN_CHANNEL || this.state.channel.type === _constants2.default.PRIVATE_CHANNEL) && this.state.channel.team_id !== currentTeamId) {\n                this.setState({\n                    currentTeamId: currentTeamId,\n                    loading: true\n                });\n            }\n        }\n    }, {\n        key: 'onActivate',\n        value: function onActivate() {\n            _preference_store2.default.addChangeListener(this.onPreferenceChange);\n            _user_store2.default.addChangeListener(this.onUserChange);\n            _team_store2.default.addChangeListener(this.onTeamChange);\n            _user_store2.default.addStatusesChangeListener(this.onStatusChange);\n            _post_store2.default.addChangeListener(this.onPostsChange);\n            _post_store2.default.addPostsViewJumpListener(this.onPostsViewJumpRequest);\n            _channel_store2.default.addLastViewedListener(this.onSetNewMessageIndicator);\n            _webrtc_store2.default.addBusyListener(this.onBusy);\n        }\n    }, {\n        key: 'onDeactivate',\n        value: function onDeactivate() {\n            _preference_store2.default.removeChangeListener(this.onPreferenceChange);\n            _user_store2.default.removeChangeListener(this.onUserChange);\n            _team_store2.default.removeChangeListener(this.onTeamChange);\n            _user_store2.default.removeStatusesChangeListener(this.onStatusChange);\n            _post_store2.default.removeChangeListener(this.onPostsChange);\n            _post_store2.default.removePostsViewJumpListener(this.onPostsViewJumpRequest);\n            _channel_store2.default.removeLastViewedListener(this.onSetNewMessageIndicator);\n            _webrtc_store2.default.removeBusyListener(this.onBusy);\n        }\n    }, {\n        key: 'componentWillReceiveProps',\n        value: function componentWillReceiveProps(nextProps) {\n            if (this.props.active && !nextProps.active) {\n                this.onDeactivate();\n            } else if (!this.props.active && nextProps.active) {\n                this.onActivate();\n\n                var channel = nextProps.channel;\n\n                var lastViewed = Number.MAX_VALUE;\n                var member = _channel_store2.default.getMyMember(channel.id);\n                if (member != null) {\n                    lastViewed = member.last_viewed_at;\n                }\n\n                var profiles = _user_store2.default.getProfiles();\n\n                var joinLeaveEnabled = _preference_store2.default.getBool(_constants2.default.Preferences.CATEGORY_ADVANCED_SETTINGS, 'join_leave', true);\n\n                var statuses = (0, _assign2.default)({}, _user_store2.default.getStatuses());\n\n                this.setState({\n                    channel: channel,\n                    lastViewed: lastViewed,\n                    ownNewMessage: false,\n                    profiles: JSON.parse((0, _stringify2.default)(profiles)),\n                    statuses: statuses,\n                    postList: _post_store2.default.filterPosts(channel.id, joinLeaveEnabled),\n                    displayNameType: _preference_store2.default.get(Preferences.CATEGORY_DISPLAY_SETTINGS, 'name_format', 'false'),\n                    displayPostsInCenter: _preference_store2.default.get(Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.CHANNEL_DISPLAY_MODE, Preferences.CHANNEL_DISPLAY_MODE_DEFAULT) === Preferences.CHANNEL_DISPLAY_MODE_CENTERED,\n                    compactDisplay: _preference_store2.default.get(Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.MESSAGE_DISPLAY, Preferences.MESSAGE_DISPLAY_DEFAULT) === Preferences.MESSAGE_DISPLAY_COMPACT,\n                    previewsCollapsed: _preference_store2.default.get(Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.COLLAPSE_DISPLAY, 'false'),\n                    useMilitaryTime: _preference_store2.default.getBool(_constants2.default.Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.USE_MILITARY_TIME, false),\n                    scrollType: ScrollTypes.NEW_MESSAGE\n                });\n            }\n        }\n    }, {\n        key: 'onPostsViewJumpRequest',\n        value: function onPostsViewJumpRequest(type, postId) {\n            switch (type) {\n                case _constants2.default.PostsViewJumpTypes.BOTTOM:\n                    {\n                        var lastViewedBottom = void 0;\n                        var lastPost = _post_store2.default.getLatestPost(this.state.channel.id);\n\n                        if (lastPost && lastPost.create_at) {\n                            lastViewedBottom = lastPost.create_at;\n                        } else {\n                            lastViewedBottom = new Date().getTime();\n                        }\n\n                        this.setState({\n                            scrollType: ScrollTypes.BOTTOM,\n                            lastViewedBottom: lastViewedBottom\n                        });\n                        break;\n                    }\n                case _constants2.default.PostsViewJumpTypes.POST:\n                    this.setState({\n                        scrollType: ScrollTypes.POST,\n                        scrollPostId: postId\n                    });\n                    break;\n                case _constants2.default.PostsViewJumpTypes.SIDEBAR_OPEN:\n                    this.setState({ scrollType: ScrollTypes.SIDEBAR_OPEN });\n                    break;\n            }\n        }\n    }, {\n        key: 'onSetNewMessageIndicator',\n        value: function onSetNewMessageIndicator() {\n            var lastViewed = Number.MAX_VALUE;\n            var member = _channel_store2.default.getMyMember(this.props.channel.id);\n            if (member != null) {\n                lastViewed = member.last_viewed_at;\n            }\n            this.setState({ lastViewed: lastViewed });\n        }\n    }, {\n        key: 'onPostListScroll',\n        value: function onPostListScroll(atBottom) {\n            if (atBottom) {\n                var lastViewedBottom = void 0;\n                var lastPost = _post_store2.default.getLatestPost(this.state.channel.id);\n\n                if (lastPost && lastPost.create_at) {\n                    lastViewedBottom = lastPost.create_at;\n                } else {\n                    lastViewedBottom = new Date().getTime();\n                }\n\n                this.setState({ scrollType: ScrollTypes.BOTTOM, lastViewedBottom: lastViewedBottom });\n            } else {\n                this.setState({ scrollType: ScrollTypes.FREE });\n            }\n        }\n    }, {\n        key: 'onBusy',\n        value: function onBusy(isBusy) {\n            this.setState({ isBusy: isBusy });\n        }\n    }, {\n        key: 'shouldComponentUpdate',\n        value: function shouldComponentUpdate(nextProps, nextState) {\n            if (nextProps.active !== this.props.active) {\n                return true;\n            }\n\n            if (nextState.loading !== this.state.loading) {\n                return true;\n            }\n\n            if (nextState.atTop !== this.state.atTop) {\n                return true;\n            }\n\n            if (nextState.displayNameType !== this.state.displayNameType) {\n                return true;\n            }\n\n            if (nextState.displayPostsInCenter !== this.state.displayPostsInCenter) {\n                return true;\n            }\n\n            if (nextState.compactDisplay !== this.state.compactDisplay) {\n                return true;\n            }\n\n            if (nextState.previewsCollapsed !== this.state.previewsCollapsed) {\n                return true;\n            }\n\n            if (nextState.useMilitaryTime !== this.state.useMilitaryTime) {\n                return true;\n            }\n\n            if (!Utils.areObjectsEqual(nextState.flaggedPosts, this.state.flaggedPosts)) {\n                return true;\n            }\n\n            if (nextState.lastViewed !== this.state.lastViewed) {\n                return true;\n            }\n\n            if (nextState.ownNewMessage !== this.state.ownNewMessage) {\n                return true;\n            }\n\n            if (nextState.showMoreMessagesTop !== this.state.showMoreMessagesTop) {\n                return true;\n            }\n\n            if (nextState.scrollType !== this.state.scrollType) {\n                return true;\n            }\n\n            if (nextState.scrollPostId !== this.state.scrollPostId) {\n                return true;\n            }\n\n            if (nextProps.channel.id !== this.props.channel.id) {\n                return true;\n            }\n\n            if (!Utils.areObjectsEqual(nextState.currentUser, this.state.currentUser)) {\n                return true;\n            }\n\n            if (!Utils.areObjectsEqual(nextState.statuses, this.state.statuses)) {\n                return true;\n            }\n\n            if (!Utils.areObjectsEqual(nextState.postList, this.state.postList)) {\n                return true;\n            }\n\n            if (!Utils.areObjectsEqual(nextState.profiles, this.state.profiles)) {\n                return true;\n            }\n\n            if (nextState.isBusy !== this.state.isBusy) {\n                return true;\n            }\n\n            return false;\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var content = void 0;\n            if (this.state.postList == null || this.state.loading) {\n                content = _react2.default.createElement(_loading_screen2.default, {\n                    position: 'absolute',\n                    key: 'loading'\n                });\n            } else {\n                content = _react2.default.createElement(_post_list2.default, {\n                    postList: this.state.postList,\n                    profiles: this.state.profiles,\n                    channel: this.state.channel,\n                    currentUser: this.state.currentUser,\n                    showMoreMessagesTop: !this.state.atTop,\n                    scrollType: this.state.scrollType,\n                    scrollPostId: this.state.scrollPostId,\n                    postListScrolled: this.onPostListScroll,\n                    displayNameType: this.state.displayNameType,\n                    displayPostsInCenter: this.state.displayPostsInCenter,\n                    compactDisplay: this.state.compactDisplay,\n                    previewsCollapsed: this.state.previewsCollapsed,\n                    useMilitaryTime: this.state.useMilitaryTime,\n                    flaggedPosts: this.state.flaggedPosts,\n                    lastViewed: this.state.lastViewed,\n                    lastViewedBottom: this.state.lastViewedBottom,\n                    ownNewMessage: this.state.ownNewMessage,\n                    statuses: this.state.statuses,\n                    isBusy: this.state.isBusy\n                });\n            }\n\n            var activeClass = '';\n            if (!this.props.active) {\n                activeClass = 'inactive';\n            }\n\n            return _react2.default.createElement(\n                'div',\n                { className: activeClass },\n                content\n            );\n        }\n    }]);\n    return PostViewController;\n}(_react2.default.Component);\n\nexports.default = PostViewController;\n\n\nPostViewController.propTypes = {\n    channel: _react2.default.PropTypes.object,\n    active: _react2.default.PropTypes.bool\n};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// 13.51946602ec2b88461b81.js","// Copyright (c) 2015 Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nimport $ from 'jquery';\nimport React from 'react';\n\nimport ChannelHeader from 'components/channel_header.jsx';\nimport FileUploadOverlay from 'components/file_upload_overlay.jsx';\nimport CreatePost from 'components/create_post.jsx';\nimport PostViewCache from 'components/post_view/post_view_cache.jsx';\n\nimport ChannelStore from 'stores/channel_store.jsx';\n\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class ChannelView extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.getStateFromStores = this.getStateFromStores.bind(this);\n        this.isStateValid = this.isStateValid.bind(this);\n        this.updateState = this.updateState.bind(this);\n\n        this.state = this.getStateFromStores(props);\n    }\n    getStateFromStores(props) {\n        const channel = ChannelStore.getByName(props.params.channel);\n        const channelId = channel ? channel.id : '';\n        return {\n            channelId\n        };\n    }\n    isStateValid() {\n        return this.state.channelId !== '';\n    }\n    updateState() {\n        this.setState(this.getStateFromStores(this.props));\n    }\n    componentDidMount() {\n        ChannelStore.addChangeListener(this.updateState);\n\n        $('body').addClass('app__body');\n    }\n    componentWillUnmount() {\n        ChannelStore.removeChangeListener(this.updateState);\n\n        $('body').removeClass('app__body');\n    }\n    componentWillReceiveProps(nextProps) {\n        this.setState(this.getStateFromStores(nextProps));\n    }\n    shouldComponentUpdate(nextProps, nextState) {\n        if (!Utils.areObjectsEqual(nextProps.params, this.props.params)) {\n            return true;\n        }\n\n        if (nextState.channelId !== this.state.channelId) {\n            return true;\n        }\n\n        return false;\n    }\n    render() {\n        return (\n            <div\n                id='app-content'\n                className='app__content'\n            >\n                <FileUploadOverlay overlayType='center'/>\n                <ChannelHeader\n                    channelId={this.state.channelId}\n                />\n                <PostViewCache/>\n                <div\n                    className='post-create__container'\n                    id='post-create'\n                >\n                    <CreatePost/>\n                </div>\n            </div>\n        );\n    }\n}\nChannelView.defaultProps = {\n};\n\nChannelView.propTypes = {\n    params: React.PropTypes.object.isRequired\n};\n\n\n\n// WEBPACK FOOTER //\n// ./components/channel_view.jsx","// Copyright (c) 2016 Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information\n\nimport PostViewController from './post_view_controller.jsx';\n\nimport ChannelStore from 'stores/channel_store.jsx';\nimport UserStore from 'stores/user_store.jsx';\nimport * as AsyncClient from 'utils/async_client.jsx';\n\nimport React from 'react';\n\nconst MAXIMUM_CACHED_VIEWS = 5;\n\nexport default class PostViewCache extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.onChannelChange = this.onChannelChange.bind(this);\n\n        const currentChannelId = ChannelStore.getCurrentId();\n        const channel = ChannelStore.getCurrent();\n\n        this.state = {\n            currentChannelId,\n            channels: channel ? [channel] : []\n        };\n    }\n\n    componentDidMount() {\n        ChannelStore.addChangeListener(this.onChannelChange);\n    }\n\n    componentWillUnmount() {\n        if (UserStore.getCurrentUser()) {\n            AsyncClient.viewChannel('', this.state.currentChannelId || '');\n        }\n        ChannelStore.removeChangeListener(this.onChannelChange);\n    }\n\n    onChannelChange() {\n        const channels = Object.assign([], this.state.channels);\n        const currentChannel = ChannelStore.getCurrent();\n\n        if (!currentChannel) {\n            return;\n        }\n\n        // make sure current channel really changed\n        if (currentChannel.id === this.state.currentChannelId) {\n            return;\n        }\n\n        if (channels.length > MAXIMUM_CACHED_VIEWS) {\n            channels.shift();\n        }\n\n        const index = channels.map((c) => c.id).indexOf(currentChannel.id);\n        if (index !== -1) {\n            channels.splice(index, 1);\n        }\n\n        channels.push(currentChannel);\n\n        this.setState({\n            currentChannelId: currentChannel.id,\n            channels\n        });\n    }\n\n    render() {\n        const channels = this.state.channels;\n        const currentChannelId = this.state.currentChannelId;\n\n        const postViews = [];\n        for (let i = 0; i < channels.length; i++) {\n            postViews.push(\n                <PostViewController\n                    key={'postviewcontroller_' + channels[i].id}\n                    channel={channels[i]}\n                    active={channels[i].id === currentChannelId}\n                />\n            );\n        }\n\n        return (\n            <div id='post-list'>\n                {postViews}\n            </div>\n        );\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./components/post_view/post_view_cache.jsx","// Copyright (c) 2016 Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nimport PostList from './components/post_list.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nimport PreferenceStore from 'stores/preference_store.jsx';\nimport UserStore from 'stores/user_store.jsx';\nimport PostStore from 'stores/post_store.jsx';\nimport ChannelStore from 'stores/channel_store.jsx';\nimport TeamStore from 'stores/team_store.jsx';\nimport WebrtcStore from 'stores/webrtc_store.jsx';\n\nimport * as Utils from 'utils/utils.jsx';\n\nimport Constants from 'utils/constants.jsx';\nconst Preferences = Constants.Preferences;\nconst ScrollTypes = Constants.ScrollTypes;\n\nimport React from 'react';\n\nexport default class PostViewController extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.onPreferenceChange = this.onPreferenceChange.bind(this);\n        this.onUserChange = this.onUserChange.bind(this);\n        this.onPostsChange = this.onPostsChange.bind(this);\n        this.onTeamChange = this.onTeamChange.bind(this);\n        this.onStatusChange = this.onStatusChange.bind(this);\n        this.onPostsViewJumpRequest = this.onPostsViewJumpRequest.bind(this);\n        this.onSetNewMessageIndicator = this.onSetNewMessageIndicator.bind(this);\n        this.onPostListScroll = this.onPostListScroll.bind(this);\n        this.onActivate = this.onActivate.bind(this);\n        this.onDeactivate = this.onDeactivate.bind(this);\n        this.onBusy = this.onBusy.bind(this);\n\n        const channel = props.channel;\n        const profiles = UserStore.getProfiles();\n\n        let lastViewed = Number.MAX_VALUE;\n        let lastViewedBottom = Number.MAX_VALUE;\n        const member = ChannelStore.getMyMember(channel.id);\n        if (member != null) {\n            lastViewed = member.last_viewed_at;\n            lastViewedBottom = member.last_viewed_at;\n        }\n\n        const joinLeaveEnabled = PreferenceStore.getBool(Constants.Preferences.CATEGORY_ADVANCED_SETTINGS, 'join_leave', true);\n\n        const statuses = Object.assign({}, UserStore.getStatuses());\n\n        // If we haven't received a page time then we aren't done loading the posts yet\n        const loading = PostStore.getLatestPostFromPageTime(channel.id) === 0;\n\n        this.state = {\n            channel,\n            postList: PostStore.filterPosts(channel.id, joinLeaveEnabled),\n            currentUser: UserStore.getCurrentUser(),\n            currentTeamId: TeamStore.getCurrentId(),\n            isBusy: WebrtcStore.isBusy(),\n            profiles,\n            statuses,\n            atTop: PostStore.getVisibilityAtTop(channel.id),\n            lastViewed,\n            lastViewedBottom,\n            ownNewMessage: false,\n            loading,\n            scrollType: ScrollTypes.NEW_MESSAGE,\n            displayNameType: PreferenceStore.get(Preferences.CATEGORY_DISPLAY_SETTINGS, 'name_format', 'false'),\n            displayPostsInCenter: PreferenceStore.get(Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.CHANNEL_DISPLAY_MODE, Preferences.CHANNEL_DISPLAY_MODE_DEFAULT) === Preferences.CHANNEL_DISPLAY_MODE_CENTERED,\n            compactDisplay: PreferenceStore.get(Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.MESSAGE_DISPLAY, Preferences.MESSAGE_DISPLAY_DEFAULT) === Preferences.MESSAGE_DISPLAY_COMPACT,\n            previewsCollapsed: PreferenceStore.get(Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.COLLAPSE_DISPLAY, 'false'),\n            useMilitaryTime: PreferenceStore.getBool(Constants.Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.USE_MILITARY_TIME, false),\n            flaggedPosts: PreferenceStore.getCategory(Constants.Preferences.CATEGORY_FLAGGED_POST)\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.active) {\n            this.onActivate();\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.props.active) {\n            this.onDeactivate();\n        }\n    }\n\n    onPreferenceChange(category) {\n        // Bit of a hack to force render when this setting is updated\n        // regardless of change\n        let previewSuffix = '';\n        if (category === Preferences.CATEGORY_DISPLAY_SETTINGS) {\n            previewSuffix = '_' + Utils.generateId();\n        }\n\n        const joinLeaveEnabled = PreferenceStore.getBool(Constants.Preferences.CATEGORY_ADVANCED_SETTINGS, 'join_leave', true);\n\n        this.setState({\n            postList: PostStore.filterPosts(this.state.channel.id, joinLeaveEnabled),\n            displayNameType: PreferenceStore.get(Preferences.CATEGORY_DISPLAY_SETTINGS, 'name_format', 'false'),\n            displayPostsInCenter: PreferenceStore.get(Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.CHANNEL_DISPLAY_MODE, Preferences.CHANNEL_DISPLAY_MODE_DEFAULT) === Preferences.CHANNEL_DISPLAY_MODE_CENTERED,\n            compactDisplay: PreferenceStore.get(Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.MESSAGE_DISPLAY, Preferences.MESSAGE_DISPLAY_DEFAULT) === Preferences.MESSAGE_DISPLAY_COMPACT,\n            previewsCollapsed: PreferenceStore.get(Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.COLLAPSE_DISPLAY, 'false') + previewSuffix,\n            useMilitaryTime: PreferenceStore.getBool(Constants.Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.USE_MILITARY_TIME, false),\n            flaggedPosts: PreferenceStore.getCategory(Constants.Preferences.CATEGORY_FLAGGED_POST)\n        });\n    }\n\n    onUserChange() {\n        this.setState({currentUser: UserStore.getCurrentUser(), profiles: JSON.parse(JSON.stringify(UserStore.getProfiles()))});\n    }\n\n    onPostsChange() {\n        const joinLeaveEnabled = PreferenceStore.getBool(Constants.Preferences.CATEGORY_ADVANCED_SETTINGS, 'join_leave', true);\n        const loading = PostStore.getLatestPostFromPageTime(this.state.channel.id) === 0;\n\n        const newState = {\n            postList: PostStore.filterPosts(this.state.channel.id, joinLeaveEnabled),\n            atTop: PostStore.getVisibilityAtTop(this.state.channel.id),\n            loading\n        };\n\n        if (this.state.loading && !loading) {\n            newState.scrollType = ScrollTypes.NEW_MESSAGE;\n        }\n\n        this.setState(newState);\n    }\n\n    onStatusChange() {\n        this.setState({statuses: Object.assign({}, UserStore.getStatuses())});\n    }\n\n    onTeamChange() {\n        const currentTeamId = TeamStore.getCurrentId();\n        if ((this.state.channel.type === Constants.OPEN_CHANNEL || this.state.channel.type === Constants.PRIVATE_CHANNEL) && this.state.channel.team_id !== currentTeamId) {\n            this.setState({\n                currentTeamId,\n                loading: true\n            });\n        }\n    }\n\n    onActivate() {\n        PreferenceStore.addChangeListener(this.onPreferenceChange);\n        UserStore.addChangeListener(this.onUserChange);\n        TeamStore.addChangeListener(this.onTeamChange);\n        UserStore.addStatusesChangeListener(this.onStatusChange);\n        PostStore.addChangeListener(this.onPostsChange);\n        PostStore.addPostsViewJumpListener(this.onPostsViewJumpRequest);\n        ChannelStore.addLastViewedListener(this.onSetNewMessageIndicator);\n        WebrtcStore.addBusyListener(this.onBusy);\n    }\n\n    onDeactivate() {\n        PreferenceStore.removeChangeListener(this.onPreferenceChange);\n        UserStore.removeChangeListener(this.onUserChange);\n        TeamStore.removeChangeListener(this.onTeamChange);\n        UserStore.removeStatusesChangeListener(this.onStatusChange);\n        PostStore.removeChangeListener(this.onPostsChange);\n        PostStore.removePostsViewJumpListener(this.onPostsViewJumpRequest);\n        ChannelStore.removeLastViewedListener(this.onSetNewMessageIndicator);\n        WebrtcStore.removeBusyListener(this.onBusy);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.props.active && !nextProps.active) {\n            this.onDeactivate();\n        } else if (!this.props.active && nextProps.active) {\n            this.onActivate();\n\n            const channel = nextProps.channel;\n\n            let lastViewed = Number.MAX_VALUE;\n            const member = ChannelStore.getMyMember(channel.id);\n            if (member != null) {\n                lastViewed = member.last_viewed_at;\n            }\n\n            const profiles = UserStore.getProfiles();\n\n            const joinLeaveEnabled = PreferenceStore.getBool(Constants.Preferences.CATEGORY_ADVANCED_SETTINGS, 'join_leave', true);\n\n            const statuses = Object.assign({}, UserStore.getStatuses());\n\n            this.setState({\n                channel,\n                lastViewed,\n                ownNewMessage: false,\n                profiles: JSON.parse(JSON.stringify(profiles)),\n                statuses,\n                postList: PostStore.filterPosts(channel.id, joinLeaveEnabled),\n                displayNameType: PreferenceStore.get(Preferences.CATEGORY_DISPLAY_SETTINGS, 'name_format', 'false'),\n                displayPostsInCenter: PreferenceStore.get(Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.CHANNEL_DISPLAY_MODE, Preferences.CHANNEL_DISPLAY_MODE_DEFAULT) === Preferences.CHANNEL_DISPLAY_MODE_CENTERED,\n                compactDisplay: PreferenceStore.get(Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.MESSAGE_DISPLAY, Preferences.MESSAGE_DISPLAY_DEFAULT) === Preferences.MESSAGE_DISPLAY_COMPACT,\n                previewsCollapsed: PreferenceStore.get(Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.COLLAPSE_DISPLAY, 'false'),\n                useMilitaryTime: PreferenceStore.getBool(Constants.Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.USE_MILITARY_TIME, false),\n                scrollType: ScrollTypes.NEW_MESSAGE\n            });\n        }\n    }\n\n    onPostsViewJumpRequest(type, postId) {\n        switch (type) {\n        case Constants.PostsViewJumpTypes.BOTTOM: {\n            let lastViewedBottom;\n            const lastPost = PostStore.getLatestPost(this.state.channel.id);\n\n            if (lastPost && lastPost.create_at) {\n                lastViewedBottom = lastPost.create_at;\n            } else {\n                lastViewedBottom = new Date().getTime();\n            }\n\n            this.setState({\n                scrollType: ScrollTypes.BOTTOM,\n                lastViewedBottom\n            });\n            break;\n        }\n        case Constants.PostsViewJumpTypes.POST:\n            this.setState({\n                scrollType: ScrollTypes.POST,\n                scrollPostId: postId\n            });\n            break;\n        case Constants.PostsViewJumpTypes.SIDEBAR_OPEN:\n            this.setState({scrollType: ScrollTypes.SIDEBAR_OPEN});\n            break;\n        }\n    }\n\n    onSetNewMessageIndicator() {\n        let lastViewed = Number.MAX_VALUE;\n        const member = ChannelStore.getMyMember(this.props.channel.id);\n        if (member != null) {\n            lastViewed = member.last_viewed_at;\n        }\n        this.setState({lastViewed});\n    }\n\n    onPostListScroll(atBottom) {\n        if (atBottom) {\n            let lastViewedBottom;\n            const lastPost = PostStore.getLatestPost(this.state.channel.id);\n\n            if (lastPost && lastPost.create_at) {\n                lastViewedBottom = lastPost.create_at;\n            } else {\n                lastViewedBottom = new Date().getTime();\n            }\n\n            this.setState({scrollType: ScrollTypes.BOTTOM, lastViewedBottom});\n        } else {\n            this.setState({scrollType: ScrollTypes.FREE});\n        }\n    }\n\n    onBusy(isBusy) {\n        this.setState({isBusy});\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (nextProps.active !== this.props.active) {\n            return true;\n        }\n\n        if (nextState.loading !== this.state.loading) {\n            return true;\n        }\n\n        if (nextState.atTop !== this.state.atTop) {\n            return true;\n        }\n\n        if (nextState.displayNameType !== this.state.displayNameType) {\n            return true;\n        }\n\n        if (nextState.displayPostsInCenter !== this.state.displayPostsInCenter) {\n            return true;\n        }\n\n        if (nextState.compactDisplay !== this.state.compactDisplay) {\n            return true;\n        }\n\n        if (nextState.previewsCollapsed !== this.state.previewsCollapsed) {\n            return true;\n        }\n\n        if (nextState.useMilitaryTime !== this.state.useMilitaryTime) {\n            return true;\n        }\n\n        if (!Utils.areObjectsEqual(nextState.flaggedPosts, this.state.flaggedPosts)) {\n            return true;\n        }\n\n        if (nextState.lastViewed !== this.state.lastViewed) {\n            return true;\n        }\n\n        if (nextState.ownNewMessage !== this.state.ownNewMessage) {\n            return true;\n        }\n\n        if (nextState.showMoreMessagesTop !== this.state.showMoreMessagesTop) {\n            return true;\n        }\n\n        if (nextState.scrollType !== this.state.scrollType) {\n            return true;\n        }\n\n        if (nextState.scrollPostId !== this.state.scrollPostId) {\n            return true;\n        }\n\n        if (nextProps.channel.id !== this.props.channel.id) {\n            return true;\n        }\n\n        if (!Utils.areObjectsEqual(nextState.currentUser, this.state.currentUser)) {\n            return true;\n        }\n\n        if (!Utils.areObjectsEqual(nextState.statuses, this.state.statuses)) {\n            return true;\n        }\n\n        if (!Utils.areObjectsEqual(nextState.postList, this.state.postList)) {\n            return true;\n        }\n\n        if (!Utils.areObjectsEqual(nextState.profiles, this.state.profiles)) {\n            return true;\n        }\n\n        if (nextState.isBusy !== this.state.isBusy) {\n            return true;\n        }\n\n        return false;\n    }\n\n    render() {\n        let content;\n        if (this.state.postList == null || this.state.loading) {\n            content = (\n                <LoadingScreen\n                    position='absolute'\n                    key='loading'\n                />\n            );\n        } else {\n            content = (\n                <PostList\n                    postList={this.state.postList}\n                    profiles={this.state.profiles}\n                    channel={this.state.channel}\n                    currentUser={this.state.currentUser}\n                    showMoreMessagesTop={!this.state.atTop}\n                    scrollType={this.state.scrollType}\n                    scrollPostId={this.state.scrollPostId}\n                    postListScrolled={this.onPostListScroll}\n                    displayNameType={this.state.displayNameType}\n                    displayPostsInCenter={this.state.displayPostsInCenter}\n                    compactDisplay={this.state.compactDisplay}\n                    previewsCollapsed={this.state.previewsCollapsed}\n                    useMilitaryTime={this.state.useMilitaryTime}\n                    flaggedPosts={this.state.flaggedPosts}\n                    lastViewed={this.state.lastViewed}\n                    lastViewedBottom={this.state.lastViewedBottom}\n                    ownNewMessage={this.state.ownNewMessage}\n                    statuses={this.state.statuses}\n                    isBusy={this.state.isBusy}\n                />\n            );\n        }\n\n        let activeClass = '';\n        if (!this.props.active) {\n            activeClass = 'inactive';\n        }\n\n        return (\n            <div className={activeClass}>\n                {content}\n            </div>\n        );\n    }\n}\n\nPostViewController.propTypes = {\n    channel: React.PropTypes.object,\n    active: React.PropTypes.bool\n};\n\n\n\n// WEBPACK FOOTER //\n// ./components/post_view/post_view_controller.jsx"],"sourceRoot":""}