{"version":3,"sources":["webpack:///54.fe8e1d75c430343a5dbc.js","webpack:///./components/claim/components/oauth_to_email.jsx"],"names":["webpackJsonp","1686","module","exports","__webpack_require__","global","_interopRequireWildcard","obj","__esModule","newObj","key","Object","prototype","hasOwnProperty","call","default","_interopRequireDefault","defineProperty","value","_getPrototypeOf","_getPrototypeOf2","_classCallCheck2","_classCallCheck3","_createClass2","_createClass3","_possibleConstructorReturn2","_possibleConstructorReturn3","_inherits2","_inherits3","_utils","Utils","_constants","_constants2","_react","_react2","_reactDom","_reactDom2","_reactIntl","_admin_actions","OAuthToEmail","_React$Component","props","this","_this","__proto__","submit","bind","state","e","_this2","preventDefault","password","findDOMNode","refs","error","localizeMessage","setState","passwordErr","isValidPassword","confirmPassword","passwordconfirm","oauthToEmail","email","err","message","createElement","className","formClass","uiType","currentType","SAML_SERVICE","toUpperCase","toTitleCase","FormattedMessage","id","defaultMessage","values","type","onSubmit","site","window","mm_config","SiteName","name","ref","placeholder","spellCheck","Component","defaultProps","propTypes","PropTypes","string"],"mappings":"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","file":"54.fe8e1d75c430343a5dbc.js","sourcesContent":["webpackJsonp([54],{\n\n/***/ 1686:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getPrototypeOf = __webpack_require__(6);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(2);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(5);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(3);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _utils = __webpack_require__(11);\n\nvar Utils = _interopRequireWildcard(_utils);\n\nvar _constants = __webpack_require__(8);\n\nvar _constants2 = _interopRequireDefault(_constants);\n\nvar _react = __webpack_require__(1);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = __webpack_require__(30);\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _reactIntl = __webpack_require__(13);\n\nvar _admin_actions = __webpack_require__(569);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Copyright (c) 2015 Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nvar OAuthToEmail = function (_React$Component) {\n    (0, _inherits3.default)(OAuthToEmail, _React$Component);\n\n    function OAuthToEmail(props) {\n        (0, _classCallCheck3.default)(this, OAuthToEmail);\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (OAuthToEmail.__proto__ || (0, _getPrototypeOf2.default)(OAuthToEmail)).call(this, props));\n\n        _this.submit = _this.submit.bind(_this);\n\n        _this.state = {};\n        return _this;\n    }\n\n    (0, _createClass3.default)(OAuthToEmail, [{\n        key: 'submit',\n        value: function submit(e) {\n            var _this2 = this;\n\n            e.preventDefault();\n            var state = {};\n\n            var password = _reactDom2.default.findDOMNode(this.refs.password).value;\n            if (!password) {\n                state.error = Utils.localizeMessage('claim.oauth_to_email.enterPwd', 'Please enter a password.');\n                this.setState(state);\n                return;\n            }\n\n            var passwordErr = Utils.isValidPassword(password);\n            if (passwordErr !== '') {\n                this.setState({\n                    error: passwordErr\n                });\n                return;\n            }\n\n            var confirmPassword = _reactDom2.default.findDOMNode(this.refs.passwordconfirm).value;\n            if (!confirmPassword || password !== confirmPassword) {\n                state.error = Utils.localizeMessage('claim.oauth_to_email.pwdNotMatch', 'Password do not match.');\n                this.setState(state);\n                return;\n            }\n\n            state.error = null;\n            this.setState(state);\n\n            (0, _admin_actions.oauthToEmail)(this.props.email, password, null, function (err) {\n                _this2.setState({ error: err.message });\n            });\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var error = null;\n            if (this.state.error) {\n                error = _react2.default.createElement(\n                    'div',\n                    { className: 'form-group has-error' },\n                    _react2.default.createElement(\n                        'label',\n                        { className: 'control-label' },\n                        this.state.error\n                    )\n                );\n            }\n\n            var formClass = 'form-group';\n            if (error) {\n                formClass += ' has-error';\n            }\n\n            var uiType = (this.props.currentType === _constants2.default.SAML_SERVICE ? _constants2.default.SAML_SERVICE.toUpperCase() : Utils.toTitleCase(this.props.currentType)) + ' SSO';\n\n            return _react2.default.createElement(\n                'div',\n                null,\n                _react2.default.createElement(\n                    'h3',\n                    null,\n                    _react2.default.createElement(_reactIntl.FormattedMessage, {\n                        id: 'claim.oauth_to_email.title',\n                        defaultMessage: 'Switch {type} Account to Email',\n                        values: {\n                            type: uiType\n                        }\n                    })\n                ),\n                _react2.default.createElement(\n                    'form',\n                    { onSubmit: this.submit },\n                    _react2.default.createElement(\n                        'p',\n                        null,\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'claim.oauth_to_email.description',\n                            defaultMessage: 'Upon changing your account type, you will only be able to login with your email and password.'\n                        })\n                    ),\n                    _react2.default.createElement(\n                        'p',\n                        null,\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'claim.oauth_to_email.enterNewPwd',\n                            defaultMessage: 'Enter a new password for your {site} email account',\n                            values: {\n                                site: global.window.mm_config.SiteName\n                            }\n                        })\n                    ),\n                    _react2.default.createElement(\n                        'div',\n                        { className: formClass },\n                        _react2.default.createElement('input', {\n                            type: 'password',\n                            className: 'form-control',\n                            name: 'password',\n                            ref: 'password',\n                            placeholder: Utils.localizeMessage('claim.oauth_to_email.newPwd', 'New Password'),\n                            spellCheck: 'false'\n                        })\n                    ),\n                    _react2.default.createElement(\n                        'div',\n                        { className: formClass },\n                        _react2.default.createElement('input', {\n                            type: 'password',\n                            className: 'form-control',\n                            name: 'passwordconfirm',\n                            ref: 'passwordconfirm',\n                            placeholder: Utils.localizeMessage('claim.oauth_to_email.confirm', 'Confirm Password'),\n                            spellCheck: 'false'\n                        })\n                    ),\n                    error,\n                    _react2.default.createElement(\n                        'button',\n                        {\n                            type: 'submit',\n                            className: 'btn btn-primary'\n                        },\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'claim.oauth_to_email.switchTo',\n                            defaultMessage: 'Switch {type} to email and password',\n                            values: {\n                                type: uiType\n                            }\n                        })\n                    )\n                )\n            );\n        }\n    }]);\n    return OAuthToEmail;\n}(_react2.default.Component);\n\nexports.default = OAuthToEmail;\n\n\nOAuthToEmail.defaultProps = {};\nOAuthToEmail.propTypes = {\n    currentType: _react2.default.PropTypes.string,\n    email: _react2.default.PropTypes.string\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// 54.fe8e1d75c430343a5dbc.js","// Copyright (c) 2015 Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nimport * as Utils from 'utils/utils.jsx';\nimport Constants from 'utils/constants.jsx';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport {oauthToEmail} from 'actions/admin_actions.jsx';\n\nexport default class OAuthToEmail extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.submit = this.submit.bind(this);\n\n        this.state = {};\n    }\n\n    submit(e) {\n        e.preventDefault();\n        const state = {};\n\n        const password = ReactDOM.findDOMNode(this.refs.password).value;\n        if (!password) {\n            state.error = Utils.localizeMessage('claim.oauth_to_email.enterPwd', 'Please enter a password.');\n            this.setState(state);\n            return;\n        }\n\n        const passwordErr = Utils.isValidPassword(password);\n        if (passwordErr !== '') {\n            this.setState({\n                error: passwordErr\n            });\n            return;\n        }\n\n        const confirmPassword = ReactDOM.findDOMNode(this.refs.passwordconfirm).value;\n        if (!confirmPassword || password !== confirmPassword) {\n            state.error = Utils.localizeMessage('claim.oauth_to_email.pwdNotMatch', 'Password do not match.');\n            this.setState(state);\n            return;\n        }\n\n        state.error = null;\n        this.setState(state);\n\n        oauthToEmail(\n            this.props.email,\n            password,\n            null,\n            (err) => {\n                this.setState({error: err.message});\n            }\n        );\n    }\n    render() {\n        var error = null;\n        if (this.state.error) {\n            error = <div className='form-group has-error'><label className='control-label'>{this.state.error}</label></div>;\n        }\n\n        var formClass = 'form-group';\n        if (error) {\n            formClass += ' has-error';\n        }\n\n        const uiType = `${(this.props.currentType === Constants.SAML_SERVICE ? Constants.SAML_SERVICE.toUpperCase() : Utils.toTitleCase(this.props.currentType))} SSO`;\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.oauth_to_email.title'\n                        defaultMessage='Switch {type} Account to Email'\n                        values={{\n                            type: uiType\n                        }}\n                    />\n                </h3>\n                <form onSubmit={this.submit}>\n                    <p>\n                        <FormattedMessage\n                            id='claim.oauth_to_email.description'\n                            defaultMessage='Upon changing your account type, you will only be able to login with your email and password.'\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.oauth_to_email.enterNewPwd'\n                            defaultMessage='Enter a new password for your {site} email account'\n                            values={{\n                                site: global.window.mm_config.SiteName\n                            }}\n                        />\n                    </p>\n                    <div className={formClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='password'\n                            ref='password'\n                            placeholder={Utils.localizeMessage('claim.oauth_to_email.newPwd', 'New Password')}\n                            spellCheck='false'\n                        />\n                    </div>\n                    <div className={formClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='passwordconfirm'\n                            ref='passwordconfirm'\n                            placeholder={Utils.localizeMessage('claim.oauth_to_email.confirm', 'Confirm Password')}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {error}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.oauth_to_email.switchTo'\n                            defaultMessage='Switch {type} to email and password'\n                            values={{\n                                type: uiType\n                            }}\n                        />\n                    </button>\n                </form>\n            </div>\n        );\n    }\n}\n\nOAuthToEmail.defaultProps = {\n};\nOAuthToEmail.propTypes = {\n    currentType: React.PropTypes.string,\n    email: React.PropTypes.string\n};\n\n\n\n// WEBPACK FOOTER //\n// ./components/claim/components/oauth_to_email.jsx"],"sourceRoot":""}