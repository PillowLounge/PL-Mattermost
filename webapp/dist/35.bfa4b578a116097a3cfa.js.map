{"version":3,"sources":["webpack:///35.bfa4b578a116097a3cfa.js","webpack:///./components/integrations/components/edit_command.jsx"],"names":["webpackJsonp","1708","module","exports","__webpack_require__","_interopRequireWildcard","obj","__esModule","newObj","key","Object","prototype","hasOwnProperty","call","default","_interopRequireDefault","defineProperty","value","_getPrototypeOf","_getPrototypeOf2","_classCallCheck2","_classCallCheck3","_possibleConstructorReturn2","_possibleConstructorReturn3","_createClass2","_createClass3","_inherits2","_inherits3","_react","_react2","_async_client","AsyncClient","_integration_store","_integration_store2","_team_store","_team_store2","_utils","Utils","_integration_actions","_backstage_header","_backstage_header2","_reactIntl","_form_error","_form_error2","_es","_spinner_button","_spinner_button2","_constants","_constants2","_confirm_modal","_confirm_modal2","REQUEST_POST","REQUEST_GET","EditCommand","_React$Component","props","this","_this","__proto__","handleIntegrationChange","bind","submitCommand","handleSubmit","handleUpdate","handleConfirmModal","confirmModalDismissed","updateDisplayName","updateDescription","updateTrigger","updateUrl","updateMethod","updateUsername","updateIconUrl","updateAutocomplete","updateAutocompleteHint","updateAutocompleteDescription","originalCommand","newCommand","teamId","getCurrentId","state","displayName","description","trigger","url","method","username","iconUrl","autocomplete","autocompleteHint","autocompleteDescription","saving","serverError","clientError","showConfirmModal","commands","getCommands","loading","hasReceivedCommands","get","team","PropTypes","object","location","addChangeListener","window","mm_config","EnableCommands","loadTeamCommands","removeChangeListener","setState","_this2","editCommand","newCmd","browserHistory","push","name","err","message","_this3","filter","command","id","query","display_name","icon_url","auto_complete","auto_complete_hint","auto_complete_desc","e","preventDefault","triggerWord","trim","toLowerCase","indexOf","substr","createElement","FormattedMessage","defaultMessage","length","MIN_TRIGGER_LENGTH","MAX_TRIGGER_LENGTH","values","min","max","target","checked","confirmButton","confirmTitle","confirmMessage","autocompleteFields","className","htmlFor","type","maxLength","onChange","placeholder","localizeMessage","Link","to","onSubmit","link","href","rel","errors","spinning","onClick","disabled","title","show","onConfirm","onCancel","Component"],"mappings":"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","file":"35.bfa4b578a116097a3cfa.js","sourcesContent":["webpackJsonp([35],{\n\n/***/ 1708:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getPrototypeOf = __webpack_require__(6);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(2);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _createClass2 = __webpack_require__(5);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _inherits2 = __webpack_require__(3);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = __webpack_require__(1);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _async_client = __webpack_require__(20);\n\nvar AsyncClient = _interopRequireWildcard(_async_client);\n\nvar _integration_store = __webpack_require__(1660);\n\nvar _integration_store2 = _interopRequireDefault(_integration_store);\n\nvar _team_store = __webpack_require__(23);\n\nvar _team_store2 = _interopRequireDefault(_team_store);\n\nvar _utils = __webpack_require__(11);\n\nvar Utils = _interopRequireWildcard(_utils);\n\nvar _integration_actions = __webpack_require__(1664);\n\nvar _backstage_header = __webpack_require__(336);\n\nvar _backstage_header2 = _interopRequireDefault(_backstage_header);\n\nvar _reactIntl = __webpack_require__(13);\n\nvar _form_error = __webpack_require__(332);\n\nvar _form_error2 = _interopRequireDefault(_form_error);\n\nvar _es = __webpack_require__(37);\n\nvar _spinner_button = __webpack_require__(243);\n\nvar _spinner_button2 = _interopRequireDefault(_spinner_button);\n\nvar _constants = __webpack_require__(8);\n\nvar _constants2 = _interopRequireDefault(_constants);\n\nvar _confirm_modal = __webpack_require__(242);\n\nvar _confirm_modal2 = _interopRequireDefault(_confirm_modal);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar REQUEST_POST = 'P'; // Copyright (c) 2016 Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nvar REQUEST_GET = 'G';\n\nvar EditCommand = function (_React$Component) {\n    (0, _inherits3.default)(EditCommand, _React$Component);\n    (0, _createClass3.default)(EditCommand, null, [{\n        key: 'propTypes',\n        get: function get() {\n            return {\n                team: _react2.default.PropTypes.object,\n                location: _react2.default.PropTypes.object\n            };\n        }\n    }]);\n\n    function EditCommand(props) {\n        (0, _classCallCheck3.default)(this, EditCommand);\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (EditCommand.__proto__ || (0, _getPrototypeOf2.default)(EditCommand)).call(this, props));\n\n        _this.handleIntegrationChange = _this.handleIntegrationChange.bind(_this);\n\n        _this.submitCommand = _this.submitCommand.bind(_this);\n        _this.handleSubmit = _this.handleSubmit.bind(_this);\n        _this.handleUpdate = _this.handleUpdate.bind(_this);\n        _this.handleConfirmModal = _this.handleConfirmModal.bind(_this);\n        _this.confirmModalDismissed = _this.confirmModalDismissed.bind(_this);\n\n        _this.updateDisplayName = _this.updateDisplayName.bind(_this);\n        _this.updateDescription = _this.updateDescription.bind(_this);\n        _this.updateTrigger = _this.updateTrigger.bind(_this);\n        _this.updateUrl = _this.updateUrl.bind(_this);\n        _this.updateMethod = _this.updateMethod.bind(_this);\n        _this.updateUsername = _this.updateUsername.bind(_this);\n        _this.updateIconUrl = _this.updateIconUrl.bind(_this);\n        _this.updateAutocomplete = _this.updateAutocomplete.bind(_this);\n        _this.updateAutocompleteHint = _this.updateAutocompleteHint.bind(_this);\n        _this.updateAutocompleteDescription = _this.updateAutocompleteDescription.bind(_this);\n\n        _this.originalCommand = null;\n        _this.newCommand = null;\n\n        var teamId = _team_store2.default.getCurrentId();\n\n        _this.state = {\n            displayName: '',\n            description: '',\n            trigger: '',\n            url: '',\n            method: REQUEST_POST,\n            username: '',\n            iconUrl: '',\n            autocomplete: false,\n            autocompleteHint: '',\n            autocompleteDescription: '',\n            saving: false,\n            serverError: '',\n            clientError: null,\n            showConfirmModal: false,\n            commands: _integration_store2.default.getCommands(teamId),\n            loading: !_integration_store2.default.hasReceivedCommands(teamId)\n        };\n        return _this;\n    }\n\n    (0, _createClass3.default)(EditCommand, [{\n        key: 'componentDidMount',\n        value: function componentDidMount() {\n            _integration_store2.default.addChangeListener(this.handleIntegrationChange);\n\n            if (window.mm_config.EnableCommands === 'true') {\n                (0, _integration_actions.loadTeamCommands)();\n            }\n        }\n    }, {\n        key: 'componentWillUnmount',\n        value: function componentWillUnmount() {\n            _integration_store2.default.removeChangeListener(this.handleIntegrationChange);\n        }\n    }, {\n        key: 'handleConfirmModal',\n        value: function handleConfirmModal() {\n            this.setState({ showConfirmModal: true });\n        }\n    }, {\n        key: 'confirmModalDismissed',\n        value: function confirmModalDismissed() {\n            this.setState({ showConfirmModal: false });\n        }\n    }, {\n        key: 'submitCommand',\n        value: function submitCommand() {\n            var _this2 = this;\n\n            AsyncClient.editCommand(this.newCmd, _es.browserHistory.push('/' + this.props.team.name + '/integrations/commands'), function (err) {\n                _this2.setState({\n                    saving: false,\n                    serverError: err.message\n                });\n            });\n        }\n    }, {\n        key: 'handleUpdate',\n        value: function handleUpdate() {\n            this.setState({\n                saving: true,\n                serverError: '',\n                clientError: ''\n            });\n\n            this.submitCommand();\n        }\n    }, {\n        key: 'handleIntegrationChange',\n        value: function handleIntegrationChange() {\n            var _this3 = this;\n\n            var teamId = _team_store2.default.getCurrentId();\n\n            this.setState({\n                commands: _integration_store2.default.getCommands(teamId),\n                loading: !_integration_store2.default.hasReceivedCommands(teamId)\n            });\n\n            if (!this.state.loading) {\n                this.originalCommand = this.state.commands.filter(function (command) {\n                    return command.id === _this3.props.location.query.id;\n                })[0];\n\n                this.setState({\n                    displayName: this.originalCommand.display_name,\n                    description: this.originalCommand.description,\n                    trigger: this.originalCommand.trigger,\n                    url: this.originalCommand.url,\n                    method: this.originalCommand.method,\n                    username: this.originalCommand.username,\n                    iconUrl: this.originalCommand.icon_url,\n                    autocomplete: this.originalCommand.auto_complete,\n                    autocompleteHint: this.originalCommand.auto_complete_hint,\n                    autocompleteDescription: this.originalCommand.auto_complete_desc\n                });\n            }\n        }\n    }, {\n        key: 'handleSubmit',\n        value: function handleSubmit(e) {\n            e.preventDefault();\n\n            if (this.state.saving) {\n                return;\n            }\n\n            this.setState({\n                saving: true,\n                serverError: '',\n                clientError: ''\n            });\n\n            var triggerWord = this.state.trigger.trim().toLowerCase();\n            if (triggerWord.indexOf('/') === 0) {\n                triggerWord = triggerWord.substr(1);\n            }\n\n            var command = {\n                display_name: this.state.displayName,\n                description: this.state.description,\n                trigger: triggerWord,\n                url: this.state.url.trim(),\n                method: this.state.method,\n                username: this.state.username,\n                icon_url: this.state.iconUrl,\n                auto_complete: this.state.autocomplete\n            };\n\n            if (this.originalCommand.id) {\n                command.id = this.originalCommand.id;\n            }\n\n            if (command.auto_complete) {\n                command.auto_complete_desc = this.state.autocompleteDescription;\n                command.auto_complete_hint = this.state.autocompleteHint;\n            }\n\n            if (!command.trigger) {\n                this.setState({\n                    saving: false,\n                    clientError: _react2.default.createElement(_reactIntl.FormattedMessage, {\n                        id: 'add_command.triggerRequired',\n                        defaultMessage: 'A trigger word is required'\n                    })\n                });\n\n                return;\n            }\n\n            if (command.trigger.indexOf('/') === 0) {\n                this.setState({\n                    saving: false,\n                    clientError: _react2.default.createElement(_reactIntl.FormattedMessage, {\n                        id: 'add_command.triggerInvalidSlash',\n                        defaultMessage: 'A trigger word cannot begin with a /'\n                    })\n                });\n\n                return;\n            }\n\n            if (command.trigger.indexOf(' ') !== -1) {\n                this.setState({\n                    saving: false,\n                    clientError: _react2.default.createElement(_reactIntl.FormattedMessage, {\n                        id: 'add_command.triggerInvalidSpace',\n                        defaultMessage: 'A trigger word must not contain spaces'\n                    })\n                });\n                return;\n            }\n\n            if (command.trigger.length < _constants2.default.MIN_TRIGGER_LENGTH || command.trigger.length > _constants2.default.MAX_TRIGGER_LENGTH) {\n                this.setState({\n                    saving: false,\n                    clientError: _react2.default.createElement(_reactIntl.FormattedMessage, {\n                        id: 'add_command.triggerInvalidLength',\n                        defaultMessage: 'A trigger word must contain between {min} and {max} characters',\n                        values: {\n                            min: _constants2.default.MIN_TRIGGER_LENGTH,\n                            max: _constants2.default.MAX_TRIGGER_LENGTH\n                        }\n                    })\n                });\n\n                return;\n            }\n\n            if (!command.url) {\n                this.setState({\n                    saving: false,\n                    clientError: _react2.default.createElement(_reactIntl.FormattedMessage, {\n                        id: 'add_command.urlRequired',\n                        defaultMessage: 'A request URL is required'\n                    })\n                });\n\n                return;\n            }\n\n            this.newCmd = command;\n\n            if (this.originalCommand.url !== this.newCmd.url || this.originalCommand.trigger !== this.newCmd.trigger || this.originalCommand.method !== this.newCmd.method) {\n                this.handleConfirmModal();\n                this.setState({\n                    saving: false\n                });\n            } else {\n                this.submitCommand();\n            }\n        }\n    }, {\n        key: 'updateDisplayName',\n        value: function updateDisplayName(e) {\n            this.setState({\n                displayName: e.target.value\n            });\n        }\n    }, {\n        key: 'updateDescription',\n        value: function updateDescription(e) {\n            this.setState({\n                description: e.target.value\n            });\n        }\n    }, {\n        key: 'updateTrigger',\n        value: function updateTrigger(e) {\n            this.setState({\n                trigger: e.target.value\n            });\n        }\n    }, {\n        key: 'updateUrl',\n        value: function updateUrl(e) {\n            this.setState({\n                url: e.target.value\n            });\n        }\n    }, {\n        key: 'updateMethod',\n        value: function updateMethod(e) {\n            this.setState({\n                method: e.target.value\n            });\n        }\n    }, {\n        key: 'updateUsername',\n        value: function updateUsername(e) {\n            this.setState({\n                username: e.target.value\n            });\n        }\n    }, {\n        key: 'updateIconUrl',\n        value: function updateIconUrl(e) {\n            this.setState({\n                iconUrl: e.target.value\n            });\n        }\n    }, {\n        key: 'updateAutocomplete',\n        value: function updateAutocomplete(e) {\n            this.setState({\n                autocomplete: e.target.checked\n            });\n        }\n    }, {\n        key: 'updateAutocompleteHint',\n        value: function updateAutocompleteHint(e) {\n            this.setState({\n                autocompleteHint: e.target.value\n            });\n        }\n    }, {\n        key: 'updateAutocompleteDescription',\n        value: function updateAutocompleteDescription(e) {\n            this.setState({\n                autocompleteDescription: e.target.value\n            });\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var confirmButton = _react2.default.createElement(_reactIntl.FormattedMessage, {\n                id: 'update_command.update',\n                defaultMessage: 'Update'\n            });\n\n            var confirmTitle = _react2.default.createElement(_reactIntl.FormattedMessage, {\n                id: 'update_command.confirm',\n                defaultMessage: 'Edit Slash Command'\n            });\n\n            var confirmMessage = _react2.default.createElement(_reactIntl.FormattedMessage, {\n                id: 'update_command.question',\n                defaultMessage: 'Your changes may break the existing slash command. Are you sure you would like to update it?'\n            });\n\n            var autocompleteFields = null;\n            if (this.state.autocomplete) {\n                autocompleteFields = [_react2.default.createElement(\n                    'div',\n                    {\n                        key: 'autocompleteHint',\n                        className: 'form-group'\n                    },\n                    _react2.default.createElement(\n                        'label',\n                        {\n                            className: 'control-label col-sm-4',\n                            htmlFor: 'autocompleteHint'\n                        },\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'add_command.autocompleteHint',\n                            defaultMessage: 'Autocomplete Hint'\n                        })\n                    ),\n                    _react2.default.createElement(\n                        'div',\n                        { className: 'col-md-5 col-sm-8' },\n                        _react2.default.createElement('input', {\n                            id: 'autocompleteHint',\n                            type: 'text',\n                            maxLength: '1024',\n                            className: 'form-control',\n                            value: this.state.autocompleteHint,\n                            onChange: this.updateAutocompleteHint,\n                            placeholder: Utils.localizeMessage('add_command.autocompleteHint.placeholder', 'Example: [Patient Name]')\n                        }),\n                        _react2.default.createElement(\n                            'div',\n                            { className: 'form__help' },\n                            _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                id: 'add_command.autocompleteHint.help',\n                                defaultMessage: '(Optional) Arguments associated with your slash command, displayed as help in the autocomplete list.'\n                            })\n                        )\n                    )\n                ), _react2.default.createElement(\n                    'div',\n                    {\n                        key: 'autocompleteDescription',\n                        className: 'form-group'\n                    },\n                    _react2.default.createElement(\n                        'label',\n                        {\n                            className: 'control-label col-sm-4',\n                            htmlFor: 'autocompleteDescription'\n                        },\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'add_command.autocompleteDescription',\n                            defaultMessage: 'Autocomplete Description'\n                        })\n                    ),\n                    _react2.default.createElement(\n                        'div',\n                        { className: 'col-md-5 col-sm-8' },\n                        _react2.default.createElement('input', {\n                            id: 'description',\n                            type: 'text',\n                            maxLength: '128',\n                            className: 'form-control',\n                            value: this.state.autocompleteDescription,\n                            onChange: this.updateAutocompleteDescription,\n                            placeholder: Utils.localizeMessage('add_command.autocompleteDescription.placeholder', 'Example: \"Returns search results for patient records\"')\n                        }),\n                        _react2.default.createElement(\n                            'div',\n                            { className: 'form__help' },\n                            _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                id: 'add_command.autocompleteDescription.help',\n                                defaultMessage: '(Optional) Short description of slash command for the autocomplete list.'\n                            })\n                        )\n                    )\n                )];\n            }\n\n            return _react2.default.createElement(\n                'div',\n                { className: 'backstage-content row' },\n                _react2.default.createElement(\n                    _backstage_header2.default,\n                    null,\n                    _react2.default.createElement(\n                        _es.Link,\n                        { to: '/' + this.props.team.name + '/integrations/commands' },\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'installed_command.header',\n                            defaultMessage: 'Slash Commands'\n                        })\n                    ),\n                    _react2.default.createElement(_reactIntl.FormattedMessage, {\n                        id: 'integrations.edit',\n                        defaultMessage: 'Edit'\n                    })\n                ),\n                _react2.default.createElement(\n                    'div',\n                    { className: 'backstage-form' },\n                    _react2.default.createElement(\n                        'form',\n                        {\n                            className: 'form-horizontal',\n                            onSubmit: this.handleSubmit\n                        },\n                        _react2.default.createElement(\n                            'div',\n                            { className: 'form-group' },\n                            _react2.default.createElement(\n                                'label',\n                                {\n                                    className: 'control-label col-sm-4',\n                                    htmlFor: 'displayName'\n                                },\n                                _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                    id: 'add_command.displayName',\n                                    defaultMessage: 'Display Name'\n                                })\n                            ),\n                            _react2.default.createElement(\n                                'div',\n                                { className: 'col-md-5 col-sm-8' },\n                                _react2.default.createElement('input', {\n                                    id: 'displayName',\n                                    type: 'text',\n                                    maxLength: '64',\n                                    className: 'form-control',\n                                    value: this.state.displayName,\n                                    onChange: this.updateDisplayName\n                                }),\n                                _react2.default.createElement(\n                                    'div',\n                                    { className: 'form__help' },\n                                    _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                        id: 'add_command.displayName.help',\n                                        defaultMessage: 'Display name for your slash command made of up to 64 characters.'\n                                    })\n                                )\n                            )\n                        ),\n                        _react2.default.createElement(\n                            'div',\n                            { className: 'form-group' },\n                            _react2.default.createElement(\n                                'label',\n                                {\n                                    className: 'control-label col-sm-4',\n                                    htmlFor: 'description'\n                                },\n                                _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                    id: 'add_command.description',\n                                    defaultMessage: 'Description'\n                                })\n                            ),\n                            _react2.default.createElement(\n                                'div',\n                                { className: 'col-md-5 col-sm-8' },\n                                _react2.default.createElement('input', {\n                                    id: 'description',\n                                    type: 'text',\n                                    maxLength: '128',\n                                    className: 'form-control',\n                                    value: this.state.description,\n                                    onChange: this.updateDescription\n                                }),\n                                _react2.default.createElement(\n                                    'div',\n                                    { className: 'form__help' },\n                                    _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                        id: 'add_command.description.help',\n                                        defaultMessage: 'Description for your incoming webhook.'\n                                    })\n                                )\n                            )\n                        ),\n                        _react2.default.createElement(\n                            'div',\n                            { className: 'form-group' },\n                            _react2.default.createElement(\n                                'label',\n                                {\n                                    className: 'control-label col-sm-4',\n                                    htmlFor: 'trigger'\n                                },\n                                _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                    id: 'add_command.trigger',\n                                    defaultMessage: 'Command Trigger Word'\n                                })\n                            ),\n                            _react2.default.createElement(\n                                'div',\n                                { className: 'col-md-5 col-sm-8' },\n                                _react2.default.createElement('input', {\n                                    id: 'trigger',\n                                    type: 'text',\n                                    maxLength: _constants2.default.MAX_TRIGGER_LENGTH,\n                                    className: 'form-control',\n                                    value: this.state.trigger,\n                                    onChange: this.updateTrigger,\n                                    placeholder: Utils.localizeMessage('add_command.trigger.placeholder', 'Command trigger e.g. \"hello\" not including the slash')\n                                }),\n                                _react2.default.createElement(\n                                    'div',\n                                    { className: 'form__help' },\n                                    _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                        id: 'add_command.trigger.help',\n                                        defaultMessage: 'Trigger word must be unique, and cannot begin with a slash or contain any spaces.'\n                                    })\n                                ),\n                                _react2.default.createElement(\n                                    'div',\n                                    { className: 'form__help' },\n                                    _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                        id: 'add_command.trigger.helpExamples',\n                                        defaultMessage: 'Examples: client, employee, patient, weather'\n                                    })\n                                ),\n                                _react2.default.createElement(\n                                    'div',\n                                    { className: 'form__help' },\n                                    _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                        id: 'add_command.trigger.helpReserved',\n                                        defaultMessage: 'Reserved: {link}',\n                                        values: {\n                                            link: _react2.default.createElement(\n                                                'a',\n                                                {\n                                                    href: 'https://docs.mattermost.com/help/messaging/executing-commands.html#built-in-commands',\n                                                    target: '_blank',\n                                                    rel: 'noopener noreferrer'\n                                                },\n                                                _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                                    id: 'add_command.trigger.helpReservedLinkText',\n                                                    defaultMessage: 'see list of built-in slash commands'\n                                                })\n                                            )\n                                        }\n                                    })\n                                )\n                            )\n                        ),\n                        _react2.default.createElement(\n                            'div',\n                            { className: 'form-group' },\n                            _react2.default.createElement(\n                                'label',\n                                {\n                                    className: 'control-label col-sm-4',\n                                    htmlFor: 'url'\n                                },\n                                _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                    id: 'add_command.url',\n                                    defaultMessage: 'Request URL'\n                                })\n                            ),\n                            _react2.default.createElement(\n                                'div',\n                                { className: 'col-md-5 col-sm-8' },\n                                _react2.default.createElement('input', {\n                                    id: 'url',\n                                    type: 'text',\n                                    maxLength: '1024',\n                                    className: 'form-control',\n                                    value: this.state.url,\n                                    onChange: this.updateUrl,\n                                    placeholder: Utils.localizeMessage('add_command.url.placeholder', 'Must start with http:// or https://')\n                                }),\n                                _react2.default.createElement(\n                                    'div',\n                                    { className: 'form__help' },\n                                    _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                        id: 'add_command.url.help',\n                                        defaultMessage: 'The callback URL to receive the HTTP POST or GET event request when the slash command is run.'\n                                    })\n                                )\n                            )\n                        ),\n                        _react2.default.createElement(\n                            'div',\n                            { className: 'form-group' },\n                            _react2.default.createElement(\n                                'label',\n                                {\n                                    className: 'control-label col-sm-4',\n                                    htmlFor: 'method'\n                                },\n                                _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                    id: 'add_command.method',\n                                    defaultMessage: 'Request Method'\n                                })\n                            ),\n                            _react2.default.createElement(\n                                'div',\n                                { className: 'col-md-5 col-sm-8' },\n                                _react2.default.createElement(\n                                    'select',\n                                    {\n                                        id: 'method',\n                                        className: 'form-control',\n                                        value: this.state.method,\n                                        onChange: this.updateMethod\n                                    },\n                                    _react2.default.createElement(\n                                        'option',\n                                        { value: REQUEST_POST },\n                                        Utils.localizeMessage('add_command.method.post', 'POST')\n                                    ),\n                                    _react2.default.createElement(\n                                        'option',\n                                        { value: REQUEST_GET },\n                                        Utils.localizeMessage('add_command.method.get', 'GET')\n                                    )\n                                ),\n                                _react2.default.createElement(\n                                    'div',\n                                    { className: 'form__help' },\n                                    _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                        id: 'add_command.method.help',\n                                        defaultMessage: 'The type of command request issued to the Request URL.'\n                                    })\n                                )\n                            )\n                        ),\n                        _react2.default.createElement(\n                            'div',\n                            { className: 'form-group' },\n                            _react2.default.createElement(\n                                'label',\n                                {\n                                    className: 'control-label col-sm-4',\n                                    htmlFor: 'username'\n                                },\n                                _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                    id: 'add_command.username',\n                                    defaultMessage: 'Response Username'\n                                })\n                            ),\n                            _react2.default.createElement(\n                                'div',\n                                { className: 'col-md-5 col-sm-8' },\n                                _react2.default.createElement('input', {\n                                    id: 'username',\n                                    type: 'text',\n                                    maxLength: '64',\n                                    className: 'form-control',\n                                    value: this.state.username,\n                                    onChange: this.updateUsername,\n                                    placeholder: Utils.localizeMessage('add_command.username.placeholder', 'Username')\n                                }),\n                                _react2.default.createElement(\n                                    'div',\n                                    { className: 'form__help' },\n                                    _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                        id: 'add_command.username.help',\n                                        defaultMessage: '(Optional) Choose a username override for responses for this slash command. Usernames can consist of up to 22 characters consisting of lowercase letters, numbers and they symbols \"-\", \"_\", and \".\" .'\n                                    })\n                                )\n                            )\n                        ),\n                        _react2.default.createElement(\n                            'div',\n                            { className: 'form-group' },\n                            _react2.default.createElement(\n                                'label',\n                                {\n                                    className: 'control-label col-sm-4',\n                                    htmlFor: 'iconUrl'\n                                },\n                                _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                    id: 'add_command.iconUrl',\n                                    defaultMessage: 'Response Icon'\n                                })\n                            ),\n                            _react2.default.createElement(\n                                'div',\n                                { className: 'col-md-5 col-sm-8' },\n                                _react2.default.createElement('input', {\n                                    id: 'iconUrl',\n                                    type: 'text',\n                                    maxLength: '1024',\n                                    className: 'form-control',\n                                    value: this.state.iconUrl,\n                                    onChange: this.updateIconUrl,\n                                    placeholder: Utils.localizeMessage('add_command.iconUrl.placeholder', 'https://www.example.com/myicon.png')\n                                }),\n                                _react2.default.createElement(\n                                    'div',\n                                    { className: 'form__help' },\n                                    _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                        id: 'add_command.iconUrl.help',\n                                        defaultMessage: '(Optional) Choose a profile picture override for the post responses to this slash command. Enter the URL of a .png or .jpg file at least 128 pixels by 128 pixels.'\n                                    })\n                                )\n                            )\n                        ),\n                        _react2.default.createElement(\n                            'div',\n                            { className: 'form-group' },\n                            _react2.default.createElement(\n                                'label',\n                                {\n                                    className: 'control-label col-sm-4',\n                                    htmlFor: 'autocomplete'\n                                },\n                                _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                    id: 'add_command.autocomplete',\n                                    defaultMessage: 'Autocomplete'\n                                })\n                            ),\n                            _react2.default.createElement(\n                                'div',\n                                { className: 'col-md-5 col-sm-8 checkbox' },\n                                _react2.default.createElement('input', {\n                                    id: 'autocomplete',\n                                    type: 'checkbox',\n                                    checked: this.state.autocomplete,\n                                    onChange: this.updateAutocomplete\n                                }),\n                                _react2.default.createElement(\n                                    'div',\n                                    { className: 'form__help' },\n                                    _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                        id: 'add_command.autocomplete.help',\n                                        defaultMessage: '(Optional) Show slash command in autocomplete list.'\n                                    })\n                                )\n                            )\n                        ),\n                        autocompleteFields,\n                        _react2.default.createElement(\n                            'div',\n                            { className: 'backstage-form__footer' },\n                            _react2.default.createElement(_form_error2.default, {\n                                type: 'backstage',\n                                errors: [this.state.serverError, this.state.clientError]\n                            }),\n                            _react2.default.createElement(\n                                _es.Link,\n                                {\n                                    className: 'btn btn-sm',\n                                    to: '/' + this.props.team.name + '/integrations/commands'\n                                },\n                                _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                    id: 'add_command.cancel',\n                                    defaultMessage: 'Cancel'\n                                })\n                            ),\n                            _react2.default.createElement(\n                                _spinner_button2.default,\n                                {\n                                    className: 'btn btn-primary',\n                                    type: 'submit',\n                                    spinning: this.state.saving,\n                                    onClick: this.handleSubmit,\n                                    disabled: this.state.loading\n                                },\n                                _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                    id: 'edit_command.save',\n                                    defaultMessage: 'Update'\n                                })\n                            ),\n                            _react2.default.createElement(_confirm_modal2.default, {\n                                title: confirmTitle,\n                                message: confirmMessage,\n                                confirmButton: confirmButton,\n                                show: this.state.showConfirmModal,\n                                onConfirm: this.handleUpdate,\n                                onCancel: this.confirmModalDismissed\n                            })\n                        )\n                    )\n                )\n            );\n        }\n    }]);\n    return EditCommand;\n}(_react2.default.Component);\n\nexports.default = EditCommand;\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// 35.bfa4b578a116097a3cfa.js","// Copyright (c) 2016 Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nimport React from 'react';\n\nimport * as AsyncClient from 'utils/async_client.jsx';\nimport IntegrationStore from 'stores/integration_store.jsx';\nimport TeamStore from 'stores/team_store.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nimport {loadTeamCommands} from 'actions/integration_actions.jsx';\nimport BackstageHeader from 'components/backstage/components/backstage_header.jsx';\nimport {FormattedMessage} from 'react-intl';\nimport FormError from 'components/form_error.jsx';\nimport {browserHistory, Link} from 'react-router/es6';\nimport SpinnerButton from 'components/spinner_button.jsx';\nimport Constants from 'utils/constants.jsx';\nimport ConfirmModal from 'components/confirm_modal.jsx';\n\nconst REQUEST_POST = 'P';\nconst REQUEST_GET = 'G';\n\nexport default class EditCommand extends React.Component {\n    static get propTypes() {\n        return {\n            team: React.PropTypes.object,\n            location: React.PropTypes.object\n        };\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.handleIntegrationChange = this.handleIntegrationChange.bind(this);\n\n        this.submitCommand = this.submitCommand.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleUpdate = this.handleUpdate.bind(this);\n        this.handleConfirmModal = this.handleConfirmModal.bind(this);\n        this.confirmModalDismissed = this.confirmModalDismissed.bind(this);\n\n        this.updateDisplayName = this.updateDisplayName.bind(this);\n        this.updateDescription = this.updateDescription.bind(this);\n        this.updateTrigger = this.updateTrigger.bind(this);\n        this.updateUrl = this.updateUrl.bind(this);\n        this.updateMethod = this.updateMethod.bind(this);\n        this.updateUsername = this.updateUsername.bind(this);\n        this.updateIconUrl = this.updateIconUrl.bind(this);\n        this.updateAutocomplete = this.updateAutocomplete.bind(this);\n        this.updateAutocompleteHint = this.updateAutocompleteHint.bind(this);\n        this.updateAutocompleteDescription = this.updateAutocompleteDescription.bind(this);\n\n        this.originalCommand = null;\n        this.newCommand = null;\n\n        const teamId = TeamStore.getCurrentId();\n\n        this.state = {\n            displayName: '',\n            description: '',\n            trigger: '',\n            url: '',\n            method: REQUEST_POST,\n            username: '',\n            iconUrl: '',\n            autocomplete: false,\n            autocompleteHint: '',\n            autocompleteDescription: '',\n            saving: false,\n            serverError: '',\n            clientError: null,\n            showConfirmModal: false,\n            commands: IntegrationStore.getCommands(teamId),\n            loading: !IntegrationStore.hasReceivedCommands(teamId)\n        };\n    }\n\n    componentDidMount() {\n        IntegrationStore.addChangeListener(this.handleIntegrationChange);\n\n        if (window.mm_config.EnableCommands === 'true') {\n            loadTeamCommands();\n        }\n    }\n\n    componentWillUnmount() {\n        IntegrationStore.removeChangeListener(this.handleIntegrationChange);\n    }\n\n    handleConfirmModal() {\n        this.setState({showConfirmModal: true});\n    }\n\n    confirmModalDismissed() {\n        this.setState({showConfirmModal: false});\n    }\n\n    submitCommand() {\n        AsyncClient.editCommand(\n            this.newCmd,\n            browserHistory.push('/' + this.props.team.name + '/integrations/commands'),\n            (err) => {\n                this.setState({\n                    saving: false,\n                    serverError: err.message\n                });\n            }\n        );\n    }\n\n    handleUpdate() {\n        this.setState({\n            saving: true,\n            serverError: '',\n            clientError: ''\n        });\n\n        this.submitCommand();\n    }\n\n    handleIntegrationChange() {\n        const teamId = TeamStore.getCurrentId();\n\n        this.setState({\n            commands: IntegrationStore.getCommands(teamId),\n            loading: !IntegrationStore.hasReceivedCommands(teamId)\n        });\n\n        if (!this.state.loading) {\n            this.originalCommand = this.state.commands.filter((command) => command.id === this.props.location.query.id)[0];\n\n            this.setState({\n                displayName: this.originalCommand.display_name,\n                description: this.originalCommand.description,\n                trigger: this.originalCommand.trigger,\n                url: this.originalCommand.url,\n                method: this.originalCommand.method,\n                username: this.originalCommand.username,\n                iconUrl: this.originalCommand.icon_url,\n                autocomplete: this.originalCommand.auto_complete,\n                autocompleteHint: this.originalCommand.auto_complete_hint,\n                autocompleteDescription: this.originalCommand.auto_complete_desc\n            });\n        }\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n\n        if (this.state.saving) {\n            return;\n        }\n\n        this.setState({\n            saving: true,\n            serverError: '',\n            clientError: ''\n        });\n\n        let triggerWord = this.state.trigger.trim().toLowerCase();\n        if (triggerWord.indexOf('/') === 0) {\n            triggerWord = triggerWord.substr(1);\n        }\n\n        const command = {\n            display_name: this.state.displayName,\n            description: this.state.description,\n            trigger: triggerWord,\n            url: this.state.url.trim(),\n            method: this.state.method,\n            username: this.state.username,\n            icon_url: this.state.iconUrl,\n            auto_complete: this.state.autocomplete\n        };\n\n        if (this.originalCommand.id) {\n            command.id = this.originalCommand.id;\n        }\n\n        if (command.auto_complete) {\n            command.auto_complete_desc = this.state.autocompleteDescription;\n            command.auto_complete_hint = this.state.autocompleteHint;\n        }\n\n        if (!command.trigger) {\n            this.setState({\n                saving: false,\n                clientError: (\n                    <FormattedMessage\n                        id='add_command.triggerRequired'\n                        defaultMessage='A trigger word is required'\n                    />\n                )\n            });\n\n            return;\n        }\n\n        if (command.trigger.indexOf('/') === 0) {\n            this.setState({\n                saving: false,\n                clientError: (\n                    <FormattedMessage\n                        id='add_command.triggerInvalidSlash'\n                        defaultMessage='A trigger word cannot begin with a /'\n                    />\n                )\n            });\n\n            return;\n        }\n\n        if (command.trigger.indexOf(' ') !== -1) {\n            this.setState({\n                saving: false,\n                clientError: (\n                    <FormattedMessage\n                        id='add_command.triggerInvalidSpace'\n                        defaultMessage='A trigger word must not contain spaces'\n                    />\n                )\n            });\n            return;\n        }\n\n        if (command.trigger.length < Constants.MIN_TRIGGER_LENGTH || command.trigger.length > Constants.MAX_TRIGGER_LENGTH) {\n            this.setState({\n                saving: false,\n                clientError: (\n                    <FormattedMessage\n                        id='add_command.triggerInvalidLength'\n                        defaultMessage='A trigger word must contain between {min} and {max} characters'\n                        values={{\n                            min: Constants.MIN_TRIGGER_LENGTH,\n                            max: Constants.MAX_TRIGGER_LENGTH\n                        }}\n                    />\n                )\n            });\n\n            return;\n        }\n\n        if (!command.url) {\n            this.setState({\n                saving: false,\n                clientError: (\n                    <FormattedMessage\n                        id='add_command.urlRequired'\n                        defaultMessage='A request URL is required'\n                    />\n                )\n            });\n\n            return;\n        }\n\n        this.newCmd = command;\n\n        if (this.originalCommand.url !== this.newCmd.url || this.originalCommand.trigger !== this.newCmd.trigger || this.originalCommand.method !== this.newCmd.method) {\n            this.handleConfirmModal();\n            this.setState({\n                saving: false\n            });\n        } else {\n            this.submitCommand();\n        }\n    }\n\n    updateDisplayName(e) {\n        this.setState({\n            displayName: e.target.value\n        });\n    }\n\n    updateDescription(e) {\n        this.setState({\n            description: e.target.value\n        });\n    }\n\n    updateTrigger(e) {\n        this.setState({\n            trigger: e.target.value\n        });\n    }\n\n    updateUrl(e) {\n        this.setState({\n            url: e.target.value\n        });\n    }\n\n    updateMethod(e) {\n        this.setState({\n            method: e.target.value\n        });\n    }\n\n    updateUsername(e) {\n        this.setState({\n            username: e.target.value\n        });\n    }\n\n    updateIconUrl(e) {\n        this.setState({\n            iconUrl: e.target.value\n        });\n    }\n\n    updateAutocomplete(e) {\n        this.setState({\n            autocomplete: e.target.checked\n        });\n    }\n\n    updateAutocompleteHint(e) {\n        this.setState({\n            autocompleteHint: e.target.value\n        });\n    }\n\n    updateAutocompleteDescription(e) {\n        this.setState({\n            autocompleteDescription: e.target.value\n        });\n    }\n\n    render() {\n        const confirmButton = (\n            <FormattedMessage\n                id='update_command.update'\n                defaultMessage='Update'\n            />\n        );\n\n        const confirmTitle = (\n            <FormattedMessage\n                id='update_command.confirm'\n                defaultMessage='Edit Slash Command'\n            />\n        );\n\n        const confirmMessage = (\n            <FormattedMessage\n                id='update_command.question'\n                defaultMessage='Your changes may break the existing slash command. Are you sure you would like to update it?'\n            />\n        );\n\n        let autocompleteFields = null;\n        if (this.state.autocomplete) {\n            autocompleteFields = [(\n                <div\n                    key='autocompleteHint'\n                    className='form-group'\n                >\n                    <label\n                        className='control-label col-sm-4'\n                        htmlFor='autocompleteHint'\n                    >\n                        <FormattedMessage\n                            id='add_command.autocompleteHint'\n                            defaultMessage='Autocomplete Hint'\n                        />\n                    </label>\n                    <div className='col-md-5 col-sm-8'>\n                        <input\n                            id='autocompleteHint'\n                            type='text'\n                            maxLength='1024'\n                            className='form-control'\n                            value={this.state.autocompleteHint}\n                            onChange={this.updateAutocompleteHint}\n                            placeholder={Utils.localizeMessage('add_command.autocompleteHint.placeholder', 'Example: [Patient Name]')}\n                        />\n                        <div className='form__help'>\n                            <FormattedMessage\n                                id='add_command.autocompleteHint.help'\n                                defaultMessage='(Optional) Arguments associated with your slash command, displayed as help in the autocomplete list.'\n                            />\n                        </div>\n                    </div>\n                </div>\n            ),\n            (\n                <div\n                    key='autocompleteDescription'\n                    className='form-group'\n                >\n                    <label\n                        className='control-label col-sm-4'\n                        htmlFor='autocompleteDescription'\n                    >\n                        <FormattedMessage\n                            id='add_command.autocompleteDescription'\n                            defaultMessage='Autocomplete Description'\n                        />\n                    </label>\n                    <div className='col-md-5 col-sm-8'>\n                        <input\n                            id='description'\n                            type='text'\n                            maxLength='128'\n                            className='form-control'\n                            value={this.state.autocompleteDescription}\n                            onChange={this.updateAutocompleteDescription}\n                            placeholder={Utils.localizeMessage('add_command.autocompleteDescription.placeholder', 'Example: \"Returns search results for patient records\"')}\n                        />\n                        <div className='form__help'>\n                            <FormattedMessage\n                                id='add_command.autocompleteDescription.help'\n                                defaultMessage='(Optional) Short description of slash command for the autocomplete list.'\n                            />\n                        </div>\n                    </div>\n                </div>\n            )];\n        }\n\n        return (\n            <div className='backstage-content row'>\n                <BackstageHeader>\n                    <Link to={'/' + this.props.team.name + '/integrations/commands'}>\n                        <FormattedMessage\n                            id='installed_command.header'\n                            defaultMessage='Slash Commands'\n                        />\n                    </Link>\n                    <FormattedMessage\n                        id='integrations.edit'\n                        defaultMessage='Edit'\n                    />\n                </BackstageHeader>\n                <div className='backstage-form'>\n                    <form\n                        className='form-horizontal'\n                        onSubmit={this.handleSubmit}\n                    >\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='displayName'\n                            >\n                                <FormattedMessage\n                                    id='add_command.displayName'\n                                    defaultMessage='Display Name'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='displayName'\n                                    type='text'\n                                    maxLength='64'\n                                    className='form-control'\n                                    value={this.state.displayName}\n                                    onChange={this.updateDisplayName}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_command.displayName.help'\n                                        defaultMessage='Display name for your slash command made of up to 64 characters.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='description'\n                            >\n                                <FormattedMessage\n                                    id='add_command.description'\n                                    defaultMessage='Description'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='description'\n                                    type='text'\n                                    maxLength='128'\n                                    className='form-control'\n                                    value={this.state.description}\n                                    onChange={this.updateDescription}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_command.description.help'\n                                        defaultMessage='Description for your incoming webhook.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='trigger'\n                            >\n                                <FormattedMessage\n                                    id='add_command.trigger'\n                                    defaultMessage='Command Trigger Word'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='trigger'\n                                    type='text'\n                                    maxLength={Constants.MAX_TRIGGER_LENGTH}\n                                    className='form-control'\n                                    value={this.state.trigger}\n                                    onChange={this.updateTrigger}\n                                    placeholder={Utils.localizeMessage('add_command.trigger.placeholder', 'Command trigger e.g. \"hello\" not including the slash')}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_command.trigger.help'\n                                        defaultMessage='Trigger word must be unique, and cannot begin with a slash or contain any spaces.'\n                                    />\n                                </div>\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_command.trigger.helpExamples'\n                                        defaultMessage='Examples: client, employee, patient, weather'\n                                    />\n                                </div>\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_command.trigger.helpReserved'\n                                        defaultMessage='Reserved: {link}'\n                                        values={{\n                                            link: (\n                                                <a\n                                                    href='https://docs.mattermost.com/help/messaging/executing-commands.html#built-in-commands'\n                                                    target='_blank'\n                                                    rel='noopener noreferrer'\n                                                >\n                                                    <FormattedMessage\n                                                        id='add_command.trigger.helpReservedLinkText'\n                                                        defaultMessage='see list of built-in slash commands'\n                                                    />\n                                                </a>\n                                            )\n                                        }}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='url'\n                            >\n                                <FormattedMessage\n                                    id='add_command.url'\n                                    defaultMessage='Request URL'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='url'\n                                    type='text'\n                                    maxLength='1024'\n                                    className='form-control'\n                                    value={this.state.url}\n                                    onChange={this.updateUrl}\n                                    placeholder={Utils.localizeMessage('add_command.url.placeholder', 'Must start with http:// or https://')}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_command.url.help'\n                                        defaultMessage='The callback URL to receive the HTTP POST or GET event request when the slash command is run.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='method'\n                            >\n                                <FormattedMessage\n                                    id='add_command.method'\n                                    defaultMessage='Request Method'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <select\n                                    id='method'\n                                    className='form-control'\n                                    value={this.state.method}\n                                    onChange={this.updateMethod}\n                                >\n                                    <option value={REQUEST_POST}>\n                                        {Utils.localizeMessage('add_command.method.post', 'POST')}\n                                    </option>\n                                    <option value={REQUEST_GET}>\n                                        {Utils.localizeMessage('add_command.method.get', 'GET')}\n                                    </option>\n                                </select>\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_command.method.help'\n                                        defaultMessage='The type of command request issued to the Request URL.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='username'\n                            >\n                                <FormattedMessage\n                                    id='add_command.username'\n                                    defaultMessage='Response Username'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='username'\n                                    type='text'\n                                    maxLength='64'\n                                    className='form-control'\n                                    value={this.state.username}\n                                    onChange={this.updateUsername}\n                                    placeholder={Utils.localizeMessage('add_command.username.placeholder', 'Username')}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_command.username.help'\n                                        defaultMessage='(Optional) Choose a username override for responses for this slash command. Usernames can consist of up to 22 characters consisting of lowercase letters, numbers and they symbols \"-\", \"_\", and \".\" .'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='iconUrl'\n                            >\n                                <FormattedMessage\n                                    id='add_command.iconUrl'\n                                    defaultMessage='Response Icon'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='iconUrl'\n                                    type='text'\n                                    maxLength='1024'\n                                    className='form-control'\n                                    value={this.state.iconUrl}\n                                    onChange={this.updateIconUrl}\n                                    placeholder={Utils.localizeMessage('add_command.iconUrl.placeholder', 'https://www.example.com/myicon.png')}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_command.iconUrl.help'\n                                        defaultMessage='(Optional) Choose a profile picture override for the post responses to this slash command. Enter the URL of a .png or .jpg file at least 128 pixels by 128 pixels.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='autocomplete'\n                            >\n                                <FormattedMessage\n                                    id='add_command.autocomplete'\n                                    defaultMessage='Autocomplete'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8 checkbox'>\n                                <input\n                                    id='autocomplete'\n                                    type='checkbox'\n                                    checked={this.state.autocomplete}\n                                    onChange={this.updateAutocomplete}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_command.autocomplete.help'\n                                        defaultMessage='(Optional) Show slash command in autocomplete list.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        {autocompleteFields}\n                        <div className='backstage-form__footer'>\n                            <FormError\n                                type='backstage'\n                                errors={[this.state.serverError, this.state.clientError]}\n                            />\n                            <Link\n                                className='btn btn-sm'\n                                to={'/' + this.props.team.name + '/integrations/commands'}\n                            >\n                                <FormattedMessage\n                                    id='add_command.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </Link>\n                            <SpinnerButton\n                                className='btn btn-primary'\n                                type='submit'\n                                spinning={this.state.saving}\n                                onClick={this.handleSubmit}\n                                disabled={this.state.loading}\n                            >\n                                <FormattedMessage\n                                    id='edit_command.save'\n                                    defaultMessage='Update'\n                                />\n                            </SpinnerButton>\n                            <ConfirmModal\n                                title={confirmTitle}\n                                message={confirmMessage}\n                                confirmButton={confirmButton}\n                                show={this.state.showConfirmModal}\n                                onConfirm={this.handleUpdate}\n                                onCancel={this.confirmModalDismissed}\n                            />\n                        </div>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./components/integrations/components/edit_command.jsx"],"sourceRoot":""}