{"version":3,"sources":["webpack:///49.9c01ffde42179fd0a314.js","webpack:///./components/emoji/components/add_emoji.jsx"],"names":["webpackJsonp","1691","module","exports","__webpack_require__","_interopRequireWildcard","obj","__esModule","newObj","key","Object","prototype","hasOwnProperty","call","default","_interopRequireDefault","defineProperty","value","_getPrototypeOf","_getPrototypeOf2","_classCallCheck2","_classCallCheck3","_createClass2","_createClass3","_possibleConstructorReturn2","_possibleConstructorReturn3","_inherits2","_inherits3","_react","_react2","_async_client","AsyncClient","_emoji_store","_emoji_store2","_backstage_header","_backstage_header2","_reactIntl","_form_error","_form_error2","_reactRouter","_spinner_button","_spinner_button2","AddEmoji","_React$Component","props","this","_this","__proto__","handleSubmit","bind","updateName","updateImage","state","name","image","imageUrl","saving","error","e","_this2","preventDefault","setState","emoji","creator_id","user","id","trim","toLowerCase","startsWith","endsWith","substring","length","test","createElement","FormattedMessage","defaultMessage","hasSystemEmoji","addEmoji","context","router","push","team","err","message","target","_this3","files","reader","FileReader","onload","result","readAsDataURL","filename","className","preview","htmlFor","values","style","backgroundImage","Link","to","onSubmit","type","maxLength","onChange","accept","multiple","spinning","onClick","Component","propTypes","PropTypes","object","contextTypes","isRequired"],"mappings":"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","file":"49.9c01ffde42179fd0a314.js","sourcesContent":["webpackJsonp([49],{\n\n/***/ 1691:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getPrototypeOf = __webpack_require__(6);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(2);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(5);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(3);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = __webpack_require__(1);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _async_client = __webpack_require__(20);\n\nvar AsyncClient = _interopRequireWildcard(_async_client);\n\nvar _emoji_store = __webpack_require__(80);\n\nvar _emoji_store2 = _interopRequireDefault(_emoji_store);\n\nvar _backstage_header = __webpack_require__(336);\n\nvar _backstage_header2 = _interopRequireDefault(_backstage_header);\n\nvar _reactIntl = __webpack_require__(13);\n\nvar _form_error = __webpack_require__(332);\n\nvar _form_error2 = _interopRequireDefault(_form_error);\n\nvar _reactRouter = __webpack_require__(335);\n\nvar _spinner_button = __webpack_require__(243);\n\nvar _spinner_button2 = _interopRequireDefault(_spinner_button);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Copyright (c) 2016 Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nvar AddEmoji = function (_React$Component) {\n    (0, _inherits3.default)(AddEmoji, _React$Component);\n\n    function AddEmoji(props) {\n        (0, _classCallCheck3.default)(this, AddEmoji);\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (AddEmoji.__proto__ || (0, _getPrototypeOf2.default)(AddEmoji)).call(this, props));\n\n        _this.handleSubmit = _this.handleSubmit.bind(_this);\n\n        _this.updateName = _this.updateName.bind(_this);\n        _this.updateImage = _this.updateImage.bind(_this);\n\n        _this.state = {\n            name: '',\n            image: null,\n            imageUrl: '',\n            saving: false,\n            error: null\n        };\n        return _this;\n    }\n\n    (0, _createClass3.default)(AddEmoji, [{\n        key: 'handleSubmit',\n        value: function handleSubmit(e) {\n            var _this2 = this;\n\n            e.preventDefault();\n\n            if (this.state.saving) {\n                return;\n            }\n\n            this.setState({\n                saving: true,\n                error: null\n            });\n\n            var emoji = {\n                creator_id: this.props.user.id,\n                name: this.state.name.trim().toLowerCase()\n            };\n\n            // trim surrounding colons if the user accidentally included them in the name\n            if (emoji.name.startsWith(':') && emoji.name.endsWith(':')) {\n                emoji.name = emoji.name.substring(1, emoji.name.length - 1);\n            }\n\n            if (!emoji.name) {\n                this.setState({\n                    saving: false,\n                    error: _react2.default.createElement(_reactIntl.FormattedMessage, {\n                        id: 'add_emoji.nameRequired',\n                        defaultMessage: 'A name is required for the emoji'\n                    })\n                });\n\n                return;\n            } else if (/[^a-z0-9_-]/.test(emoji.name)) {\n                this.setState({\n                    saving: false,\n                    error: _react2.default.createElement(_reactIntl.FormattedMessage, {\n                        id: 'add_emoji.nameInvalid',\n                        defaultMessage: 'An emoji\\'s name can only contain lowercase letters, numbers, and the symbols \\'-\\' and \\'_\\'.'\n                    })\n                });\n\n                return;\n            } else if (_emoji_store2.default.hasSystemEmoji(emoji.name)) {\n                this.setState({\n                    saving: false,\n                    error: _react2.default.createElement(_reactIntl.FormattedMessage, {\n                        id: 'add_emoji.nameTaken',\n                        defaultMessage: 'This name is already in use by a system emoji. Please choose another name.'\n                    })\n                });\n\n                return;\n            }\n\n            if (!this.state.image) {\n                this.setState({\n                    saving: false,\n                    error: _react2.default.createElement(_reactIntl.FormattedMessage, {\n                        id: 'add_emoji.imageRequired',\n                        defaultMessage: 'An image is required for the emoji'\n                    })\n                });\n\n                return;\n            }\n\n            AsyncClient.addEmoji(emoji, this.state.image, function () {\n                // for some reason, browserHistory.push doesn't trigger a state change even though the url changes\n                _this2.context.router.push('/' + _this2.props.team.name + '/emoji');\n            }, function (err) {\n                _this2.setState({\n                    saving: false,\n                    error: err.message\n                });\n            });\n        }\n    }, {\n        key: 'updateName',\n        value: function updateName(e) {\n            this.setState({\n                name: e.target.value\n            });\n        }\n    }, {\n        key: 'updateImage',\n        value: function updateImage(e) {\n            var _this3 = this;\n\n            if (e.target.files.length === 0) {\n                this.setState({\n                    image: null,\n                    imageUrl: ''\n                });\n\n                return;\n            }\n\n            var image = e.target.files[0];\n\n            var reader = new FileReader();\n            reader.onload = function () {\n                _this3.setState({\n                    image: image,\n                    imageUrl: reader.result\n                });\n            };\n            reader.readAsDataURL(image);\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var filename = null;\n            if (this.state.image) {\n                filename = _react2.default.createElement(\n                    'span',\n                    { className: 'add-emoji__filename' },\n                    this.state.image.name\n                );\n            }\n\n            var preview = null;\n            if (this.state.imageUrl) {\n                preview = _react2.default.createElement(\n                    'div',\n                    { className: 'form-group' },\n                    _react2.default.createElement(\n                        'label',\n                        {\n                            className: 'control-label col-sm-4',\n                            htmlFor: 'preview'\n                        },\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'add_emoji.preview',\n                            defaultMessage: 'Preview'\n                        })\n                    ),\n                    _react2.default.createElement(\n                        'div',\n                        { className: 'col-md-5 col-sm-8 add-emoji__preview' },\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'add_emoji.preview.sentence',\n                            defaultMessage: 'This is a sentence with {image} in it.',\n                            values: {\n                                image: _react2.default.createElement('span', {\n                                    className: 'emoticon',\n                                    style: { backgroundImage: 'url(' + this.state.imageUrl + ')' }\n                                })\n                            }\n                        })\n                    )\n                );\n            }\n\n            return _react2.default.createElement(\n                'div',\n                { className: 'backstage-content row' },\n                _react2.default.createElement(\n                    _backstage_header2.default,\n                    null,\n                    _react2.default.createElement(\n                        _reactRouter.Link,\n                        { to: '/' + this.props.team.name + '/emoji' },\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'emoji_list.header',\n                            defaultMessage: 'Custom Emoji'\n                        })\n                    ),\n                    _react2.default.createElement(_reactIntl.FormattedMessage, {\n                        id: 'add_emoji.header',\n                        defaultMessage: 'Add'\n                    })\n                ),\n                _react2.default.createElement(\n                    'div',\n                    { className: 'backstage-form' },\n                    _react2.default.createElement(\n                        'form',\n                        {\n                            className: 'form-horizontal',\n                            onSubmit: this.handleSubmit\n                        },\n                        _react2.default.createElement(\n                            'div',\n                            { className: 'form-group' },\n                            _react2.default.createElement(\n                                'label',\n                                {\n                                    className: 'control-label col-sm-4',\n                                    htmlFor: 'name'\n                                },\n                                _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                    id: 'add_emoji.name',\n                                    defaultMessage: 'Name'\n                                })\n                            ),\n                            _react2.default.createElement(\n                                'div',\n                                { className: 'col-md-5 col-sm-8' },\n                                _react2.default.createElement('input', {\n                                    id: 'name',\n                                    type: 'text',\n                                    maxLength: '64',\n                                    className: 'form-control',\n                                    value: this.state.name,\n                                    onChange: this.updateName\n                                }),\n                                _react2.default.createElement(\n                                    'div',\n                                    { className: 'form__help' },\n                                    _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                        id: 'add_emoji.name.help',\n                                        defaultMessage: 'Choose a name for your emoji made of up to 64 characters consisting of lowercase letters, numbers, and the symbols \\'-\\' and \\'_\\'.'\n                                    })\n                                )\n                            )\n                        ),\n                        _react2.default.createElement(\n                            'div',\n                            { className: 'form-group' },\n                            _react2.default.createElement(\n                                'label',\n                                {\n                                    className: 'control-label col-sm-4',\n                                    htmlFor: 'image'\n                                },\n                                _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                    id: 'add_emoji.image',\n                                    defaultMessage: 'Image'\n                                })\n                            ),\n                            _react2.default.createElement(\n                                'div',\n                                { className: 'col-md-5 col-sm-8' },\n                                _react2.default.createElement(\n                                    'div',\n                                    null,\n                                    _react2.default.createElement(\n                                        'div',\n                                        { className: 'add-emoji__upload' },\n                                        _react2.default.createElement(\n                                            'button',\n                                            { className: 'btn btn-primary' },\n                                            _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                                id: 'add_emoji.image.button',\n                                                defaultMessage: 'Select'\n                                            })\n                                        ),\n                                        _react2.default.createElement('input', {\n                                            type: 'file',\n                                            accept: '.jpg,.png,.gif',\n                                            multiple: false,\n                                            onChange: this.updateImage\n                                        })\n                                    ),\n                                    filename,\n                                    _react2.default.createElement(\n                                        'div',\n                                        { className: 'form__help' },\n                                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                            id: 'add_emoji.image.help',\n                                            defaultMessage: 'Choose the image for your emoji. The image can be a gif, png, or jpeg file with a max size of 64 KB and dimensions up to 128 by 128 pixels.'\n                                        })\n                                    )\n                                )\n                            )\n                        ),\n                        preview,\n                        _react2.default.createElement(\n                            'div',\n                            { className: 'backstage-form__footer' },\n                            _react2.default.createElement(_form_error2.default, {\n                                type: 'backstage',\n                                error: this.state.error\n                            }),\n                            _react2.default.createElement(\n                                _reactRouter.Link,\n                                {\n                                    className: 'btn btn-sm',\n                                    to: '/' + this.props.team.name + '/emoji'\n                                },\n                                _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                    id: 'add_emoji.cancel',\n                                    defaultMessage: 'Cancel'\n                                })\n                            ),\n                            _react2.default.createElement(\n                                _spinner_button2.default,\n                                {\n                                    className: 'btn btn-primary',\n                                    type: 'submit',\n                                    spinning: this.state.saving,\n                                    onClick: this.handleSubmit\n                                },\n                                _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                    id: 'add_emoji.save',\n                                    defaultMessage: 'Save'\n                                })\n                            )\n                        )\n                    )\n                )\n            );\n        }\n    }]);\n    return AddEmoji;\n}(_react2.default.Component);\n\nAddEmoji.propTypes = {\n    team: _react2.default.PropTypes.object,\n    user: _react2.default.PropTypes.object\n};\nAddEmoji.contextTypes = {\n    router: _react2.default.PropTypes.object.isRequired\n};\nexports.default = AddEmoji;\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// 49.9c01ffde42179fd0a314.js","// Copyright (c) 2016 Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nimport React from 'react';\n\nimport * as AsyncClient from 'utils/async_client.jsx';\nimport EmojiStore from 'stores/emoji_store.jsx';\n\nimport BackstageHeader from 'components/backstage/components/backstage_header.jsx';\nimport {FormattedMessage} from 'react-intl';\nimport FormError from 'components/form_error.jsx';\nimport {Link} from 'react-router';\nimport SpinnerButton from 'components/spinner_button.jsx';\n\nexport default class AddEmoji extends React.Component {\n    static propTypes = {\n        team: React.PropTypes.object,\n        user: React.PropTypes.object\n    };\n\n    static contextTypes = {\n        router: React.PropTypes.object.isRequired\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n\n        this.updateName = this.updateName.bind(this);\n        this.updateImage = this.updateImage.bind(this);\n\n        this.state = {\n            name: '',\n            image: null,\n            imageUrl: '',\n            saving: false,\n            error: null\n        };\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n\n        if (this.state.saving) {\n            return;\n        }\n\n        this.setState({\n            saving: true,\n            error: null\n        });\n\n        const emoji = {\n            creator_id: this.props.user.id,\n            name: this.state.name.trim().toLowerCase()\n        };\n\n        // trim surrounding colons if the user accidentally included them in the name\n        if (emoji.name.startsWith(':') && emoji.name.endsWith(':')) {\n            emoji.name = emoji.name.substring(1, emoji.name.length - 1);\n        }\n\n        if (!emoji.name) {\n            this.setState({\n                saving: false,\n                error: (\n                    <FormattedMessage\n                        id='add_emoji.nameRequired'\n                        defaultMessage='A name is required for the emoji'\n                    />\n                )\n            });\n\n            return;\n        } else if (/[^a-z0-9_-]/.test(emoji.name)) {\n            this.setState({\n                saving: false,\n                error: (\n                    <FormattedMessage\n                        id='add_emoji.nameInvalid'\n                        defaultMessage=\"An emoji's name can only contain lowercase letters, numbers, and the symbols '-' and '_'.\"\n                    />\n                )\n            });\n\n            return;\n        } else if (EmojiStore.hasSystemEmoji(emoji.name)) {\n            this.setState({\n                saving: false,\n                error: (\n                    <FormattedMessage\n                        id='add_emoji.nameTaken'\n                        defaultMessage='This name is already in use by a system emoji. Please choose another name.'\n                    />\n                )\n            });\n\n            return;\n        }\n\n        if (!this.state.image) {\n            this.setState({\n                saving: false,\n                error: (\n                    <FormattedMessage\n                        id='add_emoji.imageRequired'\n                        defaultMessage='An image is required for the emoji'\n                    />\n                )\n            });\n\n            return;\n        }\n\n        AsyncClient.addEmoji(\n            emoji,\n            this.state.image,\n            () => {\n                // for some reason, browserHistory.push doesn't trigger a state change even though the url changes\n                this.context.router.push('/' + this.props.team.name + '/emoji');\n            },\n            (err) => {\n                this.setState({\n                    saving: false,\n                    error: err.message\n                });\n            }\n        );\n    }\n\n    updateName(e) {\n        this.setState({\n            name: e.target.value\n        });\n    }\n\n    updateImage(e) {\n        if (e.target.files.length === 0) {\n            this.setState({\n                image: null,\n                imageUrl: ''\n            });\n\n            return;\n        }\n\n        const image = e.target.files[0];\n\n        const reader = new FileReader();\n        reader.onload = () => {\n            this.setState({\n                image,\n                imageUrl: reader.result\n            });\n        };\n        reader.readAsDataURL(image);\n    }\n\n    render() {\n        let filename = null;\n        if (this.state.image) {\n            filename = (\n                <span className='add-emoji__filename'>\n                    {this.state.image.name}\n                </span>\n            );\n        }\n\n        let preview = null;\n        if (this.state.imageUrl) {\n            preview = (\n                <div className='form-group'>\n                    <label\n                        className='control-label col-sm-4'\n                        htmlFor='preview'\n                    >\n                        <FormattedMessage\n                            id='add_emoji.preview'\n                            defaultMessage='Preview'\n                        />\n                    </label>\n                    <div className='col-md-5 col-sm-8 add-emoji__preview'>\n                        <FormattedMessage\n                            id='add_emoji.preview.sentence'\n                            defaultMessage='This is a sentence with {image} in it.'\n                            values={{\n                                image: (\n                                    <span\n                                        className='emoticon'\n                                        style={{backgroundImage: 'url(' + this.state.imageUrl + ')'}}\n                                    />\n                                )\n                            }}\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <div className='backstage-content row'>\n                <BackstageHeader>\n                    <Link to={'/' + this.props.team.name + '/emoji'}>\n                        <FormattedMessage\n                            id='emoji_list.header'\n                            defaultMessage='Custom Emoji'\n                        />\n                    </Link>\n                    <FormattedMessage\n                        id='add_emoji.header'\n                        defaultMessage='Add'\n                    />\n                </BackstageHeader>\n                <div className='backstage-form'>\n                    <form\n                        className='form-horizontal'\n                        onSubmit={this.handleSubmit}\n                    >\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='name'\n                            >\n                                <FormattedMessage\n                                    id='add_emoji.name'\n                                    defaultMessage='Name'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='name'\n                                    type='text'\n                                    maxLength='64'\n                                    className='form-control'\n                                    value={this.state.name}\n                                    onChange={this.updateName}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_emoji.name.help'\n                                        defaultMessage=\"Choose a name for your emoji made of up to 64 characters consisting of lowercase letters, numbers, and the symbols '-' and '_'.\"\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='image'\n                            >\n                                <FormattedMessage\n                                    id='add_emoji.image'\n                                    defaultMessage='Image'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <div>\n                                    <div className='add-emoji__upload'>\n                                        <button className='btn btn-primary'>\n                                            <FormattedMessage\n                                                id='add_emoji.image.button'\n                                                defaultMessage='Select'\n                                            />\n                                        </button>\n                                        <input\n                                            type='file'\n                                            accept='.jpg,.png,.gif'\n                                            multiple={false}\n                                            onChange={this.updateImage}\n                                        />\n                                    </div>\n                                    {filename}\n                                    <div className='form__help'>\n                                        <FormattedMessage\n                                            id='add_emoji.image.help'\n                                            defaultMessage='Choose the image for your emoji. The image can be a gif, png, or jpeg file with a max size of 64 KB and dimensions up to 128 by 128 pixels.'\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        {preview}\n                        <div className='backstage-form__footer'>\n                            <FormError\n                                type='backstage'\n                                error={this.state.error}\n                            />\n                            <Link\n                                className='btn btn-sm'\n                                to={'/' + this.props.team.name + '/emoji'}\n                            >\n                                <FormattedMessage\n                                    id='add_emoji.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </Link>\n                            <SpinnerButton\n                                className='btn btn-primary'\n                                type='submit'\n                                spinning={this.state.saving}\n                                onClick={this.handleSubmit}\n                            >\n                                <FormattedMessage\n                                    id='add_emoji.save'\n                                    defaultMessage='Save'\n                                />\n                            </SpinnerButton>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./components/emoji/components/add_emoji.jsx"],"sourceRoot":""}