{"version":3,"sources":["webpack:///0.473cc1cc7583c31e1f16.js","webpack:///./components/change_url_modal.jsx","webpack:///./components/more_channels.jsx","webpack:///./components/more_direct_channels.jsx","webpack:///./components/new_channel_flow.jsx","webpack:///./components/new_channel_modal.jsx","webpack:///./components/searchable_channel_list.jsx","webpack:///./components/sidebar_header.jsx","webpack:///./components/sidebar_header_dropdown.jsx","webpack:///./components/sidebar_header_dropdown_button.jsx","webpack:///./components/unread_channel_indicator.jsx","webpack:///./images/favicon/redfavicon-16x16.png","webpack:///./components/sidebar.jsx"],"names":["webpackJsonp","2000","module","exports","__webpack_require__","_interopRequireWildcard","obj","__esModule","newObj","key","Object","prototype","hasOwnProperty","call","default","_interopRequireDefault","defineProperty","value","_getPrototypeOf","_getPrototypeOf2","_classCallCheck2","_classCallCheck3","_createClass2","_createClass3","_possibleConstructorReturn2","_possibleConstructorReturn3","_inherits2","_inherits3","_reactDom","_reactDom2","_constants","_constants2","_reactBootstrap","_team_store","_team_store2","_url","URL","_reactIntl","_react","_react2","ChangeUrlModal","_React$Component","props","this","_this","__proto__","onURLChanged","bind","doSubmit","doCancel","state","currentURL","urlError","userEdit","nextProps","setState","prevProps","show","findDOMNode","refs","urlinput","select","e","url","target","trim","replace","toLowerCase","error","length","push","createElement","FormattedMessage","id","defaultMessage","charAt","indexOf","preventDefault","cleanUpUrlable","getURLError","onModalSubmit","onModalDismissed","urlClass","serverError","className","fullUrl","getCurrentTeamUrl","shortURL","getShortenedURL","urlTooltip","Tooltip","Modal","onHide","onExited","onModalExited","Header","closeButton","Title","title","role","Body","OverlayTrigger","delayShow","OVERLAY_TIME_DELAY","placement","overlay","type","ref","maxLength","onChange","autoFocus","tabIndex","Footer","onClick","submitButtonText","Component","defaultProps","propTypes","PropTypes","bool","isRequired","node","string","func","2017","_searchable_channel_list","_searchable_channel_list2","_channel_store","_channel_store2","_user_store","_user_store2","_async_client","AsyncClient","_channel_actions","_channel_utils","_reactAddonsPureRenderMixin","_reactAddonsPureRenderMixin2","_es","CHANNELS_CHUNK_SIZE","CHANNELS_PER_PAGE","SEARCH_TIMEOUT_MILLISECONDS","MoreChannels","handleJoin","handleHide","handleExit","nextPage","search","shouldComponentUpdate","searchTimeoutId","channels","addChangeListener","getMoreChannelsPage","removeChangeListener","force","getMoreChannelsList","page","channel","done","_this2","joinChannel","browserHistory","getCurrentTeamRelativeUrl","name","err","message","term","_this3","clearTimeout","setTimeout","searchMoreChannels","createNewChannelButton","handleNewChannel","createChannelHelpText","isAdmin","isTeamAdminForCurrentTeam","isSystemAdminForCurrentUser","isSystemAdmin","showCreateOption","OPEN_CHANNEL","dialogClassName","channelsPerPage","noResultsText","2018","global","_assign","_assign2","_multiselect","_multiselect2","_profile_picture","_profile_picture2","_user_actions","_utils","_web_client","_web_client2","USERS_PER_PAGE","MAX_SELECTABLE_VALUES","MAX_USERS_IN_GM","MoreDirectChannels","handleSubmit","handleDelete","addValue","listType","window","mm_config","RestrictDirectMessage","values","startingUsers","i","user","label","username","users","loadingChannel","addInTeamChangeListener","addStatusesChangeListener","getProfiles","getProfilesInTeam","getCurrentId","removeInTeamChangeListener","removeStatusesChangeListener","exitToChannel","userIds","map","v","success","openDirectChannelToUser","openGroupChannelToUsers","getProfileList","getProfileListInTeam","prevPage","teamId","searchUsers","indexToDelete","splice","option","isSelected","onAdd","rowSelected","src","getUsersRoute","last_picture_update","width","height","displayUsernameForUser","email","note","numRemainingText","num","options","optionRenderer","renderOption","valueRenderer","renderValue","perPage","handlePageChange","handleInput","handleAdd","noteText","maxValues","arrayOf","object","2020","Utils","_new_channel_modal","_new_channel_modal2","_change_url_modal","_change_url_modal2","SHOW_NEW_CHANNEL","SHOW_EDIT_URL","SHOW_EDIT_URL_THEN_COMPLETE","NewChannelFlow","typeSwitched","urlChangeRequested","urlChangeSubmitted","urlChangeDismissed","channelDataChanged","channelType","flowState","channelDisplayName","channelName","channelPurpose","channelHeader","nameModified","localizeMessage","cu","getCurrentUser","team_id","display_name","purpose","header","createChannel","data","doOnModalExited","newURL","displayName","channelData","showChannelModal","showGroupModal","showChangeURLModal","changeURLTitle","changeURLSubmitButtonText","onSubmitChannel","onTypeSwitched","onChangeURLPressed","onDataChanged","2021","_jquery","_jquery2","_user_agent","UserAgent","ChannelUtils","_preference_store","_preference_store2","NewChannelModal","handleChange","onEnterKeyDown","onPreferenceChange","ctrlSend","getBool","Preferences","CATEGORY_ADVANCED_SETTINGS","displayNameError","document","addEventListener","removeEventListener","isInternetExplorer","addClass","keyCode","KeyCodes","ENTER","ctrlKey","shiftKey","altKey","MIN_CHANNELNAME_LENGTH","newData","channel_header","channel_purpose","displayNameClass","createPublicChannelLink","href","createPrivateChannelLink","PRIVATE_CHANNEL","channelSwitchText","prettyTeamURL","bsSize","placeholder","MAX_CHANNELNAME_LENGTH","rows","2036","_loading_screen","_loading_screen2","_load","_load2","NEXT_BUTTON_TIMEOUT_MILLISECONDS","SearchableChannelList","createChannelRow","previousPage","doSearch","nextTimeoutId","joiningChannel","nextDisabled","isMobile","filter","focus","prevState","channelList","scrollTop","joinButton","listContent","nextButton","previousButton","pageStart","pageEnd","channelsToDisplay","slice","disabled","onInput","number","2039","_sidebar_header_dropdown","_sidebar_header_dropdown2","_tutorial_tip","SidebarHeader","toggleDropdown","getStateFromStores","showTutorialTip","getInt","TUTORIAL_STEP","currentUser","TutorialSteps","MENU_POPOVER","dropdown","me","profilePicture","tutorialTip","createMenuTip","teamNameWithToolTip","teamDescription","teamDisplayName","trigger","Constants","teamType","teamName","2040","_global_actions","GlobalActions","_webrtc_store","_webrtc_store2","_about_build_modal","_about_build_modal2","_sidebar_header_dropdown_button","_sidebar_header_dropdown_button2","_team_members_modal","_team_members_modal2","_user_settings_modal","_user_settings_modal2","_add_users_to_team","_add_users_to_team2","SidebarHeaderDropdown","handleAboutModal","aboutModalDismissed","toggleAccountSettingsModal","showAddUsersToTeamModal","hideAddUsersToTeamModal","showInviteMemberModal","showGetTeamInviteLinkModal","showTeamMembersModal","hideTeamMembersModal","onTeamChange","openAccountSettings","renderCustomEmojiLink","handleClick","teamMembers","getMyTeamMembers","teamListings","getTeamListings","showAboutModal","showDropdown","showUserSettingsModal","isBusy","emitChanged","action","WebrtcActionTypes","IN_PROGRESS","off","cmdOrCtrlPressed","A","EnableCustomEmoji","canCreateCustomEmoji","Link","to","config","teamLink","inviteLink","addMemberToTeam","manageLink","sysAdminLink","teamSettings","integrationsLink","OPEN_TEAM","EnableUserCreation","mm_license","IsLicensed","RestrictTeamInvite","PERMISSIONS_SYSTEM_ADMIN","PERMISSIONS_TEAM_ADMIN","membersName","data-toggle","data-target","EnableIncomingWebhooks","EnableOutgoingWebhooks","EnableCommands","EnableOAuthServiceProvider","EnableOnlyAdminIntegrations","teams","moreTeams","EnableTeamCreation","isAlreadyMember","reduce","result","item","showLeaveTeamModal","helpLink","HelpLink","rel","reportLink","ReportAProblemLink","nativeAppLink","AppDownloadLink","isMobileApp","teamMembersModal","onLoad","addUsersToTeamModal","accountSettings","about","logout","emitUserLoggedOutEvent","customEmoji","inviteDivider","teamDivider","backstageDivider","sysAdminDivider","helpDivider","logoutDivider","Dropdown","defaultOpen","onClose","pullRight","bsRole","Menu","2041","SidebarHeaderDropdownButton","_React$PureComponent","apply","arguments","dangerouslySetInnerHTML","__html","MENU_ICON","PureComponent","oneOf","2051","UnreadChannelIndicator","displayValue","extraClass","style","display","text","2059","p","343","_stringify","_stringify2","_extends2","_extends3","_keys","_keys2","_map","_map2","_new_channel_flow","_new_channel_flow2","_more_direct_channels","_more_direct_channels2","_more_channels","_more_channels2","_sidebar_header","_sidebar_header2","_unread_channel_indicator","_unread_channel_indicator2","_tutorial_tip2","_status_icon","_status_icon2","_modal_store","_modal_store2","_team_utils","ChannelActions","_diagnostics_actions","_favicon16x","_favicon16x2","_redfavicon16x","_redfavicon16x2","Sidebar","badgesActive","firstUnreadChannel","lastUnreadChannel","onModalChange","onInChannelChange","onScroll","updateUnreadIndicators","handleLeaveDirectChannel","showMoreChannelsModal","hideMoreChannelsModal","showNewChannelModal","hideNewChannelModal","showMoreDirectChannelsModal","hideMoreDirectChannelsModal","createChannelElement","updateTitle","navigateChannelShortcut","navigateUnreadChannelShortcut","getDisplayedChannels","updateScrollbarOnChannelChange","isLeaving","isSwitchingChannel","closedDirectChannel","newChannelModalType","showDirectChannelsModal","loadingDMChannel","inChannelChange","msgs","mentions","unreadCounts","forEach","member","currentTeam","msg_count","mention_count","chId","get","DM_CHANNEL","GM_CHANNEL","members","getMyMembers","currentChannelId","tutorialStep","allChannels","getAll","buildDisplayableChannelList","activeId","JSON","parse","getUnreadCounts","CHANNEL_POPOVER","getCurrent","townSquare","getByName","DEFAULT_CHANNEL","offTopic","OFFTOPIC_CHANNEL","addInChannelChangeListener","addModalListener","ActionTypes","TOGGLE_DM_MODAL","nextState","areObjectsEqual","perfectScrollbar","container","removeClass","removeInChannelChangeListener","removeModalListener","args","clear","currentSiteName","SiteName","currentChannelName","teammate","getDirectTeammate","buildGroupChannelName","unread","getTotalUnreadCount","mentionTitle","unreadTitle","showTopUnread","showBottomUnread","firstUnreadElement","position","top","curChannel","getBoundingClientRect","CHANNEL_SCROLL_ADJUSTMENT","UP","DOWN","curChannelId","curIndex","nextChannel","nextIndex","mod","goToChannel","count","increment","getUnreadCount","favoriteChannels","concat","publicChannels","privateChannels","directAndGroupChannels","set","category","teammate_id","CATEGORY_DIRECT_CHANNEL_SHOW","CATEGORY_GROUP_CHANNEL_SHOW","savePreference","isFavoriteChannel","unmarkFavorite","trackEvent","querySelector","classList","add","screens","townSquareDisplayName","DEFAULT_CHANNEL_UI_NAME","offTopicDisplayName","OFFTOPIC_CHANNEL_UI_NAME","FormattedHTMLMessage","townsquare","offtopic","overlayClass","diagnosticsTag","index","arr","handleClose","channelMember","unreadCount","msgCount","linkClass","rowClass","badge","icon","getProfileListInChannel","status","removeTooltip","createTutorialTip","openLeftSidebar","link","fake","encodeURIComponent","trackChannelSelectedEvent","_this4","lastBadgesActive","favoriteItems","sort","sortTeamsByDisplayName","publicChannelItems","privateChannelItems","directMessageItems","head","getElementsByTagName","oldLink","getElementById","removeChild","appendChild","directMessageMore","createChannelTootlip","createGroupTootlip","above","below","createPublicChannelIcon","createPrivateChannelIcon","moreDirectChannelsModal","moreChannelsModal","description"],"mappings":"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","file":"0.473cc1cc7583c31e1f16.js","sourcesContent":["webpackJsonp([0],{\n\n/***/ 2000:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getPrototypeOf = __webpack_require__(6);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(2);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(5);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(3);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _reactDom = __webpack_require__(30);\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _constants = __webpack_require__(8);\n\nvar _constants2 = _interopRequireDefault(_constants);\n\nvar _reactBootstrap = __webpack_require__(27);\n\nvar _team_store = __webpack_require__(23);\n\nvar _team_store2 = _interopRequireDefault(_team_store);\n\nvar _url = __webpack_require__(141);\n\nvar URL = _interopRequireWildcard(_url);\n\nvar _reactIntl = __webpack_require__(13);\n\nvar _react = __webpack_require__(1);\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ChangeUrlModal = function (_React$Component) {\n    (0, _inherits3.default)(ChangeUrlModal, _React$Component);\n\n    function ChangeUrlModal(props) {\n        (0, _classCallCheck3.default)(this, ChangeUrlModal);\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (ChangeUrlModal.__proto__ || (0, _getPrototypeOf2.default)(ChangeUrlModal)).call(this, props));\n\n        _this.onURLChanged = _this.onURLChanged.bind(_this);\n        _this.doSubmit = _this.doSubmit.bind(_this);\n        _this.doCancel = _this.doCancel.bind(_this);\n\n        _this.state = {\n            currentURL: props.currentURL,\n            urlError: '',\n            userEdit: false\n        };\n        return _this;\n    }\n\n    (0, _createClass3.default)(ChangeUrlModal, [{\n        key: 'componentWillReceiveProps',\n        value: function componentWillReceiveProps(nextProps) {\n            // This check prevents the url being deleted when we re-render\n            // because of user status check\n            if (!this.state.userEdit) {\n                this.setState({\n                    currentURL: nextProps.currentURL\n                });\n            }\n        }\n    }, {\n        key: 'componentDidUpdate',\n        value: function componentDidUpdate(prevProps) {\n            if (this.props.show === true && prevProps.show === false) {\n                _reactDom2.default.findDOMNode(this.refs.urlinput).select();\n            }\n        }\n    }, {\n        key: 'onURLChanged',\n        value: function onURLChanged(e) {\n            var url = e.target.value.trim();\n            this.setState({ currentURL: url.replace(/[^A-Za-z0-9-_]/g, '').toLowerCase(), userEdit: true });\n        }\n    }, {\n        key: 'getURLError',\n        value: function getURLError(url) {\n            var error = []; //eslint-disable-line prefer-const\n            if (url.length < 2) {\n                error.push(_react2.default.createElement(\n                    'span',\n                    { key: 'error1' },\n                    _react2.default.createElement(_reactIntl.FormattedMessage, {\n                        id: 'change_url.longer',\n                        defaultMessage: 'URL must be two or more characters.'\n                    }),\n                    _react2.default.createElement('br', null)\n                ));\n            }\n            if (url.charAt(0) === '-' || url.charAt(0) === '_') {\n                error.push(_react2.default.createElement(\n                    'span',\n                    { key: 'error2' },\n                    _react2.default.createElement(_reactIntl.FormattedMessage, {\n                        id: 'change_url.startWithLetter',\n                        defaultMessage: 'URL must start with a letter or number.'\n                    }),\n                    _react2.default.createElement('br', null)\n                ));\n            }\n            if (url.length > 1 && (url.charAt(url.length - 1) === '-' || url.charAt(url.length - 1) === '_')) {\n                error.push(_react2.default.createElement(\n                    'span',\n                    { key: 'error3' },\n                    _react2.default.createElement(_reactIntl.FormattedMessage, {\n                        id: 'change_url.endWithLetter',\n                        defaultMessage: 'URL must end with a letter or number.'\n                    }),\n                    _react2.default.createElement('br', null)\n                ));\n            }\n            if (url.indexOf('__') > -1) {\n                error.push(_react2.default.createElement(\n                    'span',\n                    { key: 'error4' },\n                    _react2.default.createElement(_reactIntl.FormattedMessage, {\n                        id: 'change_url.noUnderscore',\n                        defaultMessage: 'URL can not contain two underscores in a row.'\n                    }),\n                    _react2.default.createElement('br', null)\n                ));\n            }\n\n            // In case of error we don't detect\n            if (error.length === 0) {\n                error.push(_react2.default.createElement(\n                    'span',\n                    { key: 'errorlast' },\n                    _react2.default.createElement(_reactIntl.FormattedMessage, {\n                        id: 'change_url.invalidUrl',\n                        defaultMessage: 'Invalid URL'\n                    }),\n                    _react2.default.createElement('br', null)\n                ));\n            }\n            return error;\n        }\n    }, {\n        key: 'doSubmit',\n        value: function doSubmit(e) {\n            e.preventDefault();\n\n            var url = _reactDom2.default.findDOMNode(this.refs.urlinput).value;\n            var cleanedURL = URL.cleanUpUrlable(url);\n            if (cleanedURL !== url || url.length < 2 || url.indexOf('__') > -1) {\n                this.setState({ urlError: this.getURLError(url) });\n                return;\n            }\n            this.setState({ urlError: '', userEdit: false });\n            this.props.onModalSubmit(url);\n        }\n    }, {\n        key: 'doCancel',\n        value: function doCancel() {\n            this.setState({ urlError: '', userEdit: false });\n            this.props.onModalDismissed();\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var urlClass = 'input-group input-group--limit';\n            var error = null;\n\n            if (this.state.urlError) {\n                urlClass += ' has-error';\n            }\n\n            if (this.props.serverError || this.state.urlError) {\n                error = _react2.default.createElement(\n                    'div',\n                    { className: 'form-group has-error' },\n                    _react2.default.createElement(\n                        'p',\n                        { className: 'input__help error' },\n                        this.state.urlError || this.props.serverError\n                    )\n                );\n            }\n\n            var fullUrl = _team_store2.default.getCurrentTeamUrl() + '/channels';\n            var shortURL = URL.getShortenedURL(fullUrl);\n            var urlTooltip = _react2.default.createElement(\n                _reactBootstrap.Tooltip,\n                { id: 'urlTooltip' },\n                fullUrl\n            );\n\n            return _react2.default.createElement(\n                _reactBootstrap.Modal,\n                {\n                    show: this.props.show,\n                    onHide: this.doCancel,\n                    onExited: this.props.onModalExited\n                },\n                _react2.default.createElement(\n                    _reactBootstrap.Modal.Header,\n                    { closeButton: true },\n                    _react2.default.createElement(\n                        _reactBootstrap.Modal.Title,\n                        null,\n                        this.props.title\n                    )\n                ),\n                _react2.default.createElement(\n                    'form',\n                    {\n                        role: 'form',\n                        className: 'form-horizontal'\n                    },\n                    _react2.default.createElement(\n                        _reactBootstrap.Modal.Body,\n                        null,\n                        _react2.default.createElement(\n                            'div',\n                            { className: 'modal-intro' },\n                            _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                id: 'channel_flow.changeUrlDescription',\n                                defaultMessage: 'Some characters are now allowed in URLs and may be removed.'\n                            })\n                        ),\n                        _react2.default.createElement(\n                            'div',\n                            { className: 'form-group' },\n                            _react2.default.createElement(\n                                'label',\n                                { className: 'col-sm-2 form__label control-label' },\n                                _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                    id: 'change_url.urlLabel',\n                                    defaultMessage: 'Channel URL'\n                                })\n                            ),\n                            _react2.default.createElement(\n                                'div',\n                                { className: 'col-sm-10' },\n                                _react2.default.createElement(\n                                    'div',\n                                    { className: urlClass },\n                                    _react2.default.createElement(\n                                        _reactBootstrap.OverlayTrigger,\n                                        {\n                                            delayShow: _constants2.default.OVERLAY_TIME_DELAY,\n                                            placement: 'top',\n                                            overlay: urlTooltip\n                                        },\n                                        _react2.default.createElement(\n                                            'span',\n                                            { className: 'input-group-addon' },\n                                            shortURL\n                                        )\n                                    ),\n                                    _react2.default.createElement('input', {\n                                        type: 'text',\n                                        ref: 'urlinput',\n                                        className: 'form-control',\n                                        maxLength: '22',\n                                        onChange: this.onURLChanged,\n                                        value: this.state.currentURL,\n                                        autoFocus: true,\n                                        tabIndex: '1'\n                                    })\n                                ),\n                                error\n                            )\n                        )\n                    ),\n                    _react2.default.createElement(\n                        _reactBootstrap.Modal.Footer,\n                        null,\n                        _react2.default.createElement(\n                            'button',\n                            {\n                                type: 'button',\n                                className: 'btn btn-default',\n                                onClick: this.doCancel\n                            },\n                            _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                id: 'change_url.close',\n                                defaultMessage: 'Close'\n                            })\n                        ),\n                        _react2.default.createElement(\n                            'button',\n                            {\n                                onClick: this.doSubmit,\n                                type: 'submit',\n                                className: 'btn btn-primary',\n                                tabIndex: '2'\n                            },\n                            this.props.submitButtonText\n                        )\n                    )\n                )\n            );\n        }\n    }]);\n    return ChangeUrlModal;\n}(_react2.default.Component); // Copyright (c) 2015 Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nexports.default = ChangeUrlModal;\n\n\nChangeUrlModal.defaultProps = {\n    show: false,\n    title: 'Change URL',\n    submitButtonText: 'Save',\n    currentURL: '',\n    serverError: null\n};\n\nChangeUrlModal.propTypes = {\n    show: _react2.default.PropTypes.bool.isRequired,\n    title: _react2.default.PropTypes.node,\n    submitButtonText: _react2.default.PropTypes.node,\n    currentURL: _react2.default.PropTypes.string,\n    serverError: _react2.default.PropTypes.node,\n    onModalSubmit: _react2.default.PropTypes.func.isRequired,\n    onModalExited: _react2.default.PropTypes.func,\n    onModalDismissed: _react2.default.PropTypes.func.isRequired\n};\n\n/***/ }),\n\n/***/ 2017:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getPrototypeOf = __webpack_require__(6);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(2);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(5);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(3);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _searchable_channel_list = __webpack_require__(2036);\n\nvar _searchable_channel_list2 = _interopRequireDefault(_searchable_channel_list);\n\nvar _channel_store = __webpack_require__(24);\n\nvar _channel_store2 = _interopRequireDefault(_channel_store);\n\nvar _user_store = __webpack_require__(15);\n\nvar _user_store2 = _interopRequireDefault(_user_store);\n\nvar _team_store = __webpack_require__(23);\n\nvar _team_store2 = _interopRequireDefault(_team_store);\n\nvar _constants = __webpack_require__(8);\n\nvar _constants2 = _interopRequireDefault(_constants);\n\nvar _async_client = __webpack_require__(20);\n\nvar AsyncClient = _interopRequireWildcard(_async_client);\n\nvar _channel_actions = __webpack_require__(47);\n\nvar _channel_utils = __webpack_require__(81);\n\nvar _react = __webpack_require__(1);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactAddonsPureRenderMixin = __webpack_require__(245);\n\nvar _reactAddonsPureRenderMixin2 = _interopRequireDefault(_reactAddonsPureRenderMixin);\n\nvar _reactBootstrap = __webpack_require__(27);\n\nvar _reactIntl = __webpack_require__(13);\n\nvar _es = __webpack_require__(37);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar CHANNELS_CHUNK_SIZE = 50; // Copyright (c) 2015 Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nvar CHANNELS_PER_PAGE = 50;\nvar SEARCH_TIMEOUT_MILLISECONDS = 100;\n\nvar MoreChannels = function (_React$Component) {\n    (0, _inherits3.default)(MoreChannels, _React$Component);\n\n    function MoreChannels(props) {\n        (0, _classCallCheck3.default)(this, MoreChannels);\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (MoreChannels.__proto__ || (0, _getPrototypeOf2.default)(MoreChannels)).call(this, props));\n\n        _this.onChange = _this.onChange.bind(_this);\n        _this.handleJoin = _this.handleJoin.bind(_this);\n        _this.handleHide = _this.handleHide.bind(_this);\n        _this.handleExit = _this.handleExit.bind(_this);\n        _this.nextPage = _this.nextPage.bind(_this);\n        _this.search = _this.search.bind(_this);\n\n        _this.shouldComponentUpdate = _reactAddonsPureRenderMixin2.default.shouldComponentUpdate.bind(_this);\n\n        _this.searchTimeoutId = 0;\n\n        _this.state = {\n            show: true,\n            search: false,\n            channels: null,\n            serverError: null\n        };\n        return _this;\n    }\n\n    (0, _createClass3.default)(MoreChannels, [{\n        key: 'componentDidMount',\n        value: function componentDidMount() {\n            _channel_store2.default.addChangeListener(this.onChange);\n            AsyncClient.getMoreChannelsPage(0, CHANNELS_CHUNK_SIZE * 2);\n        }\n    }, {\n        key: 'componentWillUnmount',\n        value: function componentWillUnmount() {\n            _channel_store2.default.removeChangeListener(this.onChange);\n        }\n    }, {\n        key: 'handleHide',\n        value: function handleHide() {\n            this.setState({ show: false });\n        }\n    }, {\n        key: 'handleExit',\n        value: function handleExit() {\n            if (this.props.onModalDismissed) {\n                this.props.onModalDismissed();\n            }\n        }\n    }, {\n        key: 'onChange',\n        value: function onChange(force) {\n            if (this.state.search && !force) {\n                return;\n            }\n\n            this.setState({\n                channels: _channel_store2.default.getMoreChannelsList(),\n                serverError: null\n            });\n        }\n    }, {\n        key: 'nextPage',\n        value: function nextPage(page) {\n            AsyncClient.getMoreChannelsPage((page + 1) * CHANNELS_PER_PAGE, CHANNELS_PER_PAGE);\n        }\n    }, {\n        key: 'handleJoin',\n        value: function handleJoin(channel, done) {\n            var _this2 = this;\n\n            (0, _channel_actions.joinChannel)(channel, function () {\n                _es.browserHistory.push(_team_store2.default.getCurrentTeamRelativeUrl() + '/channels/' + channel.name);\n                if (done) {\n                    done();\n                }\n\n                _this2.handleHide();\n            }, function (err) {\n                _this2.setState({ serverError: err.message });\n                if (done) {\n                    done();\n                }\n            });\n        }\n    }, {\n        key: 'search',\n        value: function search(term) {\n            var _this3 = this;\n\n            clearTimeout(this.searchTimeoutId);\n\n            if (term === '') {\n                this.onChange(true);\n                this.setState({ search: false });\n                this.searchTimeoutId = '';\n                return;\n            }\n\n            var searchTimeoutId = setTimeout(function () {\n                (0, _channel_actions.searchMoreChannels)(term, function (channels) {\n                    if (searchTimeoutId !== _this3.searchTimeoutId) {\n                        return;\n                    }\n                    _this3.setState({ search: true, channels: channels });\n                });\n            }, SEARCH_TIMEOUT_MILLISECONDS);\n\n            this.searchTimeoutId = searchTimeoutId;\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var serverError = void 0;\n            if (this.state.serverError) {\n                serverError = _react2.default.createElement(\n                    'div',\n                    { className: 'form-group has-error' },\n                    _react2.default.createElement(\n                        'label',\n                        { className: 'control-label' },\n                        this.state.serverError\n                    )\n                );\n            }\n\n            var createNewChannelButton = _react2.default.createElement(\n                'button',\n                {\n                    type: 'button',\n                    className: 'btn btn-primary channel-create-btn',\n                    onClick: this.props.handleNewChannel\n                },\n                _react2.default.createElement(_reactIntl.FormattedMessage, {\n                    id: 'more_channels.create',\n                    defaultMessage: 'Create New Channel'\n                })\n            );\n\n            var createChannelHelpText = _react2.default.createElement(\n                'p',\n                { className: 'secondary-message' },\n                _react2.default.createElement(_reactIntl.FormattedMessage, {\n                    id: 'more_channels.createClick',\n                    defaultMessage: 'Click \\'Create New Channel\\' to make a new one'\n                })\n            );\n\n            var isAdmin = _team_store2.default.isTeamAdminForCurrentTeam() || _user_store2.default.isSystemAdminForCurrentUser();\n            var isSystemAdmin = _user_store2.default.isSystemAdminForCurrentUser();\n\n            if (!(0, _channel_utils.showCreateOption)(_constants2.default.OPEN_CHANNEL, isAdmin, isSystemAdmin)) {\n                createNewChannelButton = null;\n                createChannelHelpText = null;\n            }\n\n            return _react2.default.createElement(\n                _reactBootstrap.Modal,\n                {\n                    dialogClassName: 'more-modal more-modal--action',\n                    show: this.state.show,\n                    onHide: this.handleHide,\n                    onExited: this.handleExit\n                },\n                _react2.default.createElement(\n                    _reactBootstrap.Modal.Header,\n                    { closeButton: true },\n                    _react2.default.createElement(\n                        _reactBootstrap.Modal.Title,\n                        null,\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'more_channels.title',\n                            defaultMessage: 'More Channels'\n                        })\n                    ),\n                    createNewChannelButton\n                ),\n                _react2.default.createElement(\n                    _reactBootstrap.Modal.Body,\n                    null,\n                    _react2.default.createElement(_searchable_channel_list2.default, {\n                        channels: this.state.channels,\n                        channelsPerPage: CHANNELS_PER_PAGE,\n                        nextPage: this.nextPage,\n                        search: this.search,\n                        handleJoin: this.handleJoin,\n                        noResultsText: createChannelHelpText\n                    }),\n                    serverError\n                )\n            );\n        }\n    }]);\n    return MoreChannels;\n}(_react2.default.Component);\n\nexports.default = MoreChannels;\n\n\nMoreChannels.propTypes = {\n    onModalDismissed: _react2.default.PropTypes.func,\n    handleNewChannel: _react2.default.PropTypes.func\n};\n\n/***/ }),\n\n/***/ 2018:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _assign = __webpack_require__(31);\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _getPrototypeOf = __webpack_require__(6);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(2);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(5);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(3);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _multiselect = __webpack_require__(595);\n\nvar _multiselect2 = _interopRequireDefault(_multiselect);\n\nvar _profile_picture = __webpack_require__(166);\n\nvar _profile_picture2 = _interopRequireDefault(_profile_picture);\n\nvar _user_actions = __webpack_require__(46);\n\nvar _channel_actions = __webpack_require__(47);\n\nvar _user_store = __webpack_require__(15);\n\nvar _user_store2 = _interopRequireDefault(_user_store);\n\nvar _team_store = __webpack_require__(23);\n\nvar _team_store2 = _interopRequireDefault(_team_store);\n\nvar _async_client = __webpack_require__(20);\n\nvar AsyncClient = _interopRequireWildcard(_async_client);\n\nvar _constants = __webpack_require__(8);\n\nvar _constants2 = _interopRequireDefault(_constants);\n\nvar _utils = __webpack_require__(11);\n\nvar _web_client = __webpack_require__(28);\n\nvar _web_client2 = _interopRequireDefault(_web_client);\n\nvar _react = __webpack_require__(1);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactBootstrap = __webpack_require__(27);\n\nvar _reactIntl = __webpack_require__(13);\n\nvar _es = __webpack_require__(37);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Copyright (c) 2015 Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nvar USERS_PER_PAGE = 50;\nvar MAX_SELECTABLE_VALUES = _constants2.default.MAX_USERS_IN_GM - 1;\n\nvar MoreDirectChannels = function (_React$Component) {\n    (0, _inherits3.default)(MoreDirectChannels, _React$Component);\n\n    function MoreDirectChannels(props) {\n        (0, _classCallCheck3.default)(this, MoreDirectChannels);\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (MoreDirectChannels.__proto__ || (0, _getPrototypeOf2.default)(MoreDirectChannels)).call(this, props));\n\n        _this.handleHide = _this.handleHide.bind(_this);\n        _this.handleExit = _this.handleExit.bind(_this);\n        _this.handleSubmit = _this.handleSubmit.bind(_this);\n        _this.handleDelete = _this.handleDelete.bind(_this);\n        _this.onChange = _this.onChange.bind(_this);\n        _this.search = _this.search.bind(_this);\n        _this.addValue = _this.addValue.bind(_this);\n\n        _this.searchTimeoutId = 0;\n        _this.listType = global.window.mm_config.RestrictDirectMessage;\n\n        var values = [];\n        if (props.startingUsers) {\n            for (var i = 0; i < props.startingUsers.length; i++) {\n                var user = (0, _assign2.default)({}, props.startingUsers[i]);\n                user.value = user.id;\n                user.label = '@' + user.username;\n                values.push(user);\n            }\n        }\n\n        _this.state = {\n            users: null,\n            values: values,\n            show: true,\n            search: false,\n            loadingChannel: -1\n        };\n        return _this;\n    }\n\n    (0, _createClass3.default)(MoreDirectChannels, [{\n        key: 'componentDidMount',\n        value: function componentDidMount() {\n            _user_store2.default.addChangeListener(this.onChange);\n            _user_store2.default.addInTeamChangeListener(this.onChange);\n            _user_store2.default.addStatusesChangeListener(this.onChange);\n\n            if (this.listType === 'any') {\n                AsyncClient.getProfiles(0, USERS_PER_PAGE * 2);\n            } else {\n                AsyncClient.getProfilesInTeam(_team_store2.default.getCurrentId(), 0, USERS_PER_PAGE * 2);\n            }\n        }\n    }, {\n        key: 'componentWillUnmount',\n        value: function componentWillUnmount() {\n            _user_store2.default.removeChangeListener(this.onChange);\n            _user_store2.default.removeInTeamChangeListener(this.onChange);\n            _user_store2.default.removeStatusesChangeListener(this.onChange);\n        }\n    }, {\n        key: 'handleHide',\n        value: function handleHide() {\n            this.setState({ show: false });\n        }\n    }, {\n        key: 'handleExit',\n        value: function handleExit() {\n            if (this.exitToChannel) {\n                _es.browserHistory.push(this.exitToChannel);\n            }\n\n            if (this.props.onModalDismissed) {\n                this.props.onModalDismissed();\n            }\n        }\n    }, {\n        key: 'handleSubmit',\n        value: function handleSubmit(e) {\n            var _this2 = this;\n\n            if (e) {\n                e.preventDefault();\n            }\n\n            if (this.state.loadingChannel !== -1) {\n                return;\n            }\n\n            var userIds = this.state.values.map(function (v) {\n                return v.id;\n            });\n            if (userIds.length === 0) {\n                return;\n            }\n\n            this.setState({ loadingChannel: 1 });\n\n            var success = function success(channel) {\n                // Due to how react-overlays Modal handles focus, we delay pushing\n                // the new channel information until the modal is fully exited.\n                // The channel information will be pushed in `handleExit`\n                _this2.exitToChannel = _team_store2.default.getCurrentTeamRelativeUrl() + '/channels/' + channel.name;\n                _this2.setState({ loadingChannel: -1 });\n                _this2.handleHide();\n            };\n\n            var error = function error() {\n                _this2.setState({ loadingChannel: -1 });\n            };\n\n            if (userIds.length === 1) {\n                (0, _channel_actions.openDirectChannelToUser)(userIds[0], success, error);\n            } else {\n                (0, _channel_actions.openGroupChannelToUsers)(userIds, success, error);\n            }\n        }\n    }, {\n        key: 'addValue',\n        value: function addValue(value) {\n            var values = (0, _assign2.default)([], this.state.values);\n            if (values.indexOf(value) === -1) {\n                values.push(value);\n            }\n\n            this.setState({ values: values });\n        }\n    }, {\n        key: 'onChange',\n        value: function onChange(force) {\n            if (this.state.search && !force) {\n                return;\n            }\n\n            var users = void 0;\n            if (this.listType === 'any') {\n                users = (0, _assign2.default)([], _user_store2.default.getProfileList(true));\n            } else {\n                users = (0, _assign2.default)([], _user_store2.default.getProfileListInTeam(_team_store2.default.getCurrentId(), true));\n            }\n\n            for (var i = 0; i < users.length; i++) {\n                var user = (0, _assign2.default)({}, users[i]);\n                user.value = user.id;\n                user.label = '@' + user.username;\n                users[i] = user;\n            }\n\n            this.setState({\n                users: users\n            });\n        }\n    }, {\n        key: 'handlePageChange',\n        value: function handlePageChange(page, prevPage) {\n            if (page > prevPage) {\n                AsyncClient.getProfiles((page + 1) * USERS_PER_PAGE, USERS_PER_PAGE);\n            }\n        }\n    }, {\n        key: 'search',\n        value: function search(term) {\n            var _this3 = this;\n\n            clearTimeout(this.searchTimeoutId);\n\n            if (term === '') {\n                this.onChange(true);\n                this.setState({ search: false });\n                this.searchTimeoutId = '';\n                return;\n            }\n\n            var teamId = void 0;\n            if (this.listType === 'any') {\n                teamId = '';\n            } else {\n                teamId = _team_store2.default.getCurrentId();\n            }\n\n            var searchTimeoutId = setTimeout(function () {\n                (0, _user_actions.searchUsers)(term, teamId, {}, function (users) {\n                    if (searchTimeoutId !== _this3.searchTimeoutId) {\n                        return;\n                    }\n\n                    var indexToDelete = -1;\n                    for (var i = 0; i < users.length; i++) {\n                        if (users[i].id === _user_store2.default.getCurrentId()) {\n                            indexToDelete = i;\n                        }\n                        users[i].value = users[i].id;\n                        users[i].label = '@' + users[i].username;\n                    }\n\n                    if (indexToDelete !== -1) {\n                        users.splice(indexToDelete, 1);\n                    }\n                    _this3.setState({ search: true, users: users });\n                });\n            }, _constants2.default.SEARCH_TIMEOUT_MILLISECONDS);\n\n            this.searchTimeoutId = searchTimeoutId;\n        }\n    }, {\n        key: 'handleDelete',\n        value: function handleDelete(values) {\n            this.setState({ values: values });\n        }\n    }, {\n        key: 'renderOption',\n        value: function renderOption(option, isSelected, onAdd) {\n            var rowSelected = '';\n            if (isSelected) {\n                rowSelected = 'more-modal__row--selected';\n            }\n\n            return _react2.default.createElement(\n                'div',\n                {\n                    key: option.id,\n                    ref: isSelected ? 'selected' : option.id,\n                    className: 'more-modal__row clickable ' + rowSelected,\n                    onClick: function onClick() {\n                        return onAdd(option);\n                    }\n                },\n                _react2.default.createElement(_profile_picture2.default, {\n                    src: _web_client2.default.getUsersRoute() + '/' + option.id + '/image?time=' + option.last_picture_update,\n                    width: '32',\n                    height: '32'\n                }),\n                _react2.default.createElement(\n                    'div',\n                    {\n                        className: 'more-modal__details'\n                    },\n                    _react2.default.createElement(\n                        'div',\n                        { className: 'more-modal__name' },\n                        (0, _utils.displayUsernameForUser)(option)\n                    ),\n                    _react2.default.createElement(\n                        'div',\n                        { className: 'more-modal__description' },\n                        option.email\n                    )\n                ),\n                _react2.default.createElement(\n                    'div',\n                    { className: 'more-modal__actions' },\n                    _react2.default.createElement(\n                        'div',\n                        { className: 'more-modal__actions--round' },\n                        _react2.default.createElement('i', { className: 'fa fa-plus' })\n                    )\n                )\n            );\n        }\n    }, {\n        key: 'renderValue',\n        value: function renderValue(user) {\n            return user.username;\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var note = void 0;\n            if (this.props.startingUsers) {\n                if (this.state.values && this.state.values.length >= MAX_SELECTABLE_VALUES) {\n                    note = _react2.default.createElement(_reactIntl.FormattedMessage, {\n                        id: 'more_direct_channels.new_convo_note.full',\n                        defaultMessage: 'You\\u2019ve reached the maximum number of people for this conversation. Consider creating a private channel instead.'\n                    });\n                } else {\n                    note = _react2.default.createElement(_reactIntl.FormattedMessage, {\n                        id: 'more_direct_channels.new_convo_note',\n                        defaultMessage: 'This will start a new conversation. If you\\u2019re adding a lot of people, consider creating a private channel instead.'\n                    });\n                }\n            }\n\n            var numRemainingText = _react2.default.createElement(_reactIntl.FormattedMessage, {\n                id: 'multiselect.numPeopleRemaining',\n                defaultMessage: 'You can add {num, number} more {num, plural, =0 {people} one {person} other {people}}. ',\n                values: {\n                    num: MAX_SELECTABLE_VALUES - this.state.values.length\n                }\n            });\n\n            return _react2.default.createElement(\n                _reactBootstrap.Modal,\n                {\n                    dialogClassName: 'more-modal more-direct-channels',\n                    show: this.state.show,\n                    onHide: this.handleHide,\n                    onExited: this.handleExit\n                },\n                _react2.default.createElement(\n                    _reactBootstrap.Modal.Header,\n                    { closeButton: true },\n                    _react2.default.createElement(\n                        _reactBootstrap.Modal.Title,\n                        null,\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'more_direct_channels.title',\n                            defaultMessage: 'Direct Messages'\n                        })\n                    )\n                ),\n                _react2.default.createElement(\n                    _reactBootstrap.Modal.Body,\n                    null,\n                    _react2.default.createElement(_multiselect2.default, {\n                        key: 'moreDirectChannelsList',\n                        options: this.state.users,\n                        optionRenderer: this.renderOption,\n                        values: this.state.values,\n                        valueRenderer: this.renderValue,\n                        perPage: USERS_PER_PAGE,\n                        handlePageChange: this.handlePageChange,\n                        handleInput: this.search,\n                        handleDelete: this.handleDelete,\n                        handleAdd: this.addValue,\n                        handleSubmit: this.handleSubmit,\n                        noteText: note,\n                        maxValues: MAX_SELECTABLE_VALUES,\n                        numRemainingText: numRemainingText\n                    })\n                )\n            );\n        }\n    }]);\n    return MoreDirectChannels;\n}(_react2.default.Component);\n\nexports.default = MoreDirectChannels;\n\n\nMoreDirectChannels.propTypes = {\n    startingUsers: _react2.default.PropTypes.arrayOf(_react2.default.PropTypes.object),\n    onModalDismissed: _react2.default.PropTypes.func\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))\n\n/***/ }),\n\n/***/ 2020:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getPrototypeOf = __webpack_require__(6);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(2);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(5);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(3);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _utils = __webpack_require__(11);\n\nvar Utils = _interopRequireWildcard(_utils);\n\nvar _team_store = __webpack_require__(23);\n\nvar _team_store2 = _interopRequireDefault(_team_store);\n\nvar _user_store = __webpack_require__(15);\n\nvar _user_store2 = _interopRequireDefault(_user_store);\n\nvar _url = __webpack_require__(141);\n\nvar _new_channel_modal = __webpack_require__(2021);\n\nvar _new_channel_modal2 = _interopRequireDefault(_new_channel_modal);\n\nvar _change_url_modal = __webpack_require__(2000);\n\nvar _change_url_modal2 = _interopRequireDefault(_change_url_modal);\n\nvar _reactIntl = __webpack_require__(13);\n\nvar _channel_actions = __webpack_require__(47);\n\nvar _es = __webpack_require__(37);\n\nvar _react = __webpack_require__(1);\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar SHOW_NEW_CHANNEL = 1; // Copyright (c) 2015 Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nvar SHOW_EDIT_URL = 2;\nvar SHOW_EDIT_URL_THEN_COMPLETE = 3;\n\nvar NewChannelFlow = function (_React$Component) {\n    (0, _inherits3.default)(NewChannelFlow, _React$Component);\n\n    function NewChannelFlow(props) {\n        (0, _classCallCheck3.default)(this, NewChannelFlow);\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (NewChannelFlow.__proto__ || (0, _getPrototypeOf2.default)(NewChannelFlow)).call(this, props));\n\n        _this.doSubmit = _this.doSubmit.bind(_this);\n        _this.onModalExited = _this.onModalExited.bind(_this);\n        _this.typeSwitched = _this.typeSwitched.bind(_this);\n        _this.urlChangeRequested = _this.urlChangeRequested.bind(_this);\n        _this.urlChangeSubmitted = _this.urlChangeSubmitted.bind(_this);\n        _this.urlChangeDismissed = _this.urlChangeDismissed.bind(_this);\n        _this.channelDataChanged = _this.channelDataChanged.bind(_this);\n\n        _this.state = {\n            serverError: '',\n            channelType: 'O',\n            flowState: SHOW_NEW_CHANNEL,\n            channelDisplayName: '',\n            channelName: '',\n            channelPurpose: '',\n            channelHeader: '',\n            nameModified: false\n        };\n        return _this;\n    }\n\n    (0, _createClass3.default)(NewChannelFlow, [{\n        key: 'componentWillReceiveProps',\n        value: function componentWillReceiveProps(nextProps) {\n            // If we are being shown, grab channel type from props and clear\n            if (nextProps.show === true && this.props.show === false) {\n                this.setState({\n                    serverError: '',\n                    channelType: nextProps.channelType,\n                    flowState: SHOW_NEW_CHANNEL,\n                    channelDisplayName: '',\n                    channelName: '',\n                    channelPurpose: '',\n                    channelHeader: '',\n                    nameModified: false\n                });\n            }\n        }\n    }, {\n        key: 'doSubmit',\n        value: function doSubmit() {\n            var _this2 = this;\n\n            if (!this.state.channelDisplayName) {\n                this.setState({ serverError: Utils.localizeMessage('channel_flow.invalidName', 'Invalid Channel Name') });\n                return;\n            }\n\n            if (this.state.channelName < 2) {\n                this.setState({ flowState: SHOW_EDIT_URL_THEN_COMPLETE });\n                return;\n            }\n\n            var cu = _user_store2.default.getCurrentUser();\n            var channel = {\n                team_id: cu.team_id,\n                name: this.state.channelName,\n                display_name: this.state.channelDisplayName,\n                purpose: this.state.channelPurpose,\n                header: this.state.channelHeader,\n                type: this.state.channelType\n            };\n\n            (0, _channel_actions.createChannel)(channel, function (data) {\n                _this2.doOnModalExited = function () {\n                    _es.browserHistory.push(_team_store2.default.getCurrentTeamRelativeUrl() + '/channels/' + data.channel.name);\n                };\n\n                _this2.props.onModalDismissed();\n            }, function (err) {\n                if (err.id === 'model.channel.is_valid.2_or_more.app_error') {\n                    _this2.setState({\n                        flowState: SHOW_EDIT_URL_THEN_COMPLETE,\n                        serverError: _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'channel_flow.handleTooShort',\n                            defaultMessage: 'Channel URL must be 2 or more lowercase alphanumeric characters'\n                        })\n                    });\n                    return;\n                }\n                if (err.id === 'store.sql_channel.update.exists.app_error') {\n                    _this2.setState({ serverError: Utils.localizeMessage('channel_flow.alreadyExist', 'A channel with that URL already exists') });\n                    return;\n                }\n                _this2.setState({ serverError: err.message });\n            });\n        }\n    }, {\n        key: 'onModalExited',\n        value: function onModalExited() {\n            if (this.doOnModalExited) {\n                this.doOnModalExited();\n            }\n        }\n    }, {\n        key: 'typeSwitched',\n        value: function typeSwitched() {\n            if (this.state.channelType === 'P') {\n                this.setState({ channelType: 'O' });\n            } else {\n                this.setState({ channelType: 'P' });\n            }\n        }\n    }, {\n        key: 'urlChangeRequested',\n        value: function urlChangeRequested() {\n            this.setState({ flowState: SHOW_EDIT_URL });\n        }\n    }, {\n        key: 'urlChangeSubmitted',\n        value: function urlChangeSubmitted(newURL) {\n            if (this.state.flowState === SHOW_EDIT_URL_THEN_COMPLETE) {\n                this.setState({ channelName: newURL, nameModified: true }, this.doSubmit);\n            } else {\n                this.setState({ flowState: SHOW_NEW_CHANNEL, serverError: null, channelName: newURL, nameModified: true });\n            }\n        }\n    }, {\n        key: 'urlChangeDismissed',\n        value: function urlChangeDismissed() {\n            this.setState({ flowState: SHOW_NEW_CHANNEL });\n        }\n    }, {\n        key: 'channelDataChanged',\n        value: function channelDataChanged(data) {\n            this.setState({\n                channelDisplayName: data.displayName,\n                channelPurpose: data.purpose,\n                channelHeader: data.header\n            });\n            if (!this.state.nameModified) {\n                this.setState({ channelName: (0, _url.cleanUpUrlable)(data.displayName.trim()) });\n            }\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var channelData = {\n                name: this.state.channelName,\n                displayName: this.state.channelDisplayName,\n                purpose: this.state.channelPurpose\n            };\n\n            var showChannelModal = false;\n            var showGroupModal = false;\n            var showChangeURLModal = false;\n\n            var changeURLTitle = '';\n            var changeURLSubmitButtonText = '';\n\n            // Only listen to flow state if we are being shown\n            if (this.props.show) {\n                switch (this.state.flowState) {\n                    case SHOW_NEW_CHANNEL:\n                        if (this.state.channelType === 'O') {\n                            showChannelModal = true;\n                        } else {\n                            showGroupModal = true;\n                        }\n                        break;\n                    case SHOW_EDIT_URL:\n                        showChangeURLModal = true;\n                        changeURLTitle = _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'channel_flow.changeUrlTitle',\n                            defaultMessage: 'Change Channel URL'\n                        });\n                        changeURLSubmitButtonText = changeURLTitle;\n                        break;\n                    case SHOW_EDIT_URL_THEN_COMPLETE:\n                        showChangeURLModal = true;\n                        changeURLTitle = _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'channel_flow.set_url_title',\n                            defaultMessage: 'Set Channel URL'\n                        });\n                        changeURLSubmitButtonText = _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'channel_flow.create',\n                            defaultMessage: 'Create Channel'\n                        });\n                        break;\n                }\n            }\n            return _react2.default.createElement(\n                'span',\n                null,\n                _react2.default.createElement(_new_channel_modal2.default, {\n                    show: showChannelModal,\n                    channelType: 'O',\n                    channelData: channelData,\n                    serverError: this.state.serverError,\n                    onSubmitChannel: this.doSubmit,\n                    onModalDismissed: this.props.onModalDismissed,\n                    onModalExited: this.onModalExited,\n                    onTypeSwitched: this.typeSwitched,\n                    onChangeURLPressed: this.urlChangeRequested,\n                    onDataChanged: this.channelDataChanged\n                }),\n                _react2.default.createElement(_new_channel_modal2.default, {\n                    show: showGroupModal,\n                    channelType: 'P',\n                    channelData: channelData,\n                    serverError: this.state.serverError,\n                    onSubmitChannel: this.doSubmit,\n                    onModalExited: this.onModalExited,\n                    onModalDismissed: this.props.onModalDismissed,\n                    onTypeSwitched: this.typeSwitched,\n                    onChangeURLPressed: this.urlChangeRequested,\n                    onDataChanged: this.channelDataChanged\n                }),\n                _react2.default.createElement(_change_url_modal2.default, {\n                    show: showChangeURLModal,\n                    title: changeURLTitle,\n                    submitButtonText: changeURLSubmitButtonText,\n                    currentURL: this.state.channelName,\n                    serverError: this.state.serverError,\n                    onModalSubmit: this.urlChangeSubmitted,\n                    onModalDismissed: this.urlChangeDismissed,\n                    onModalExited: this.onModalExited\n                })\n            );\n        }\n    }]);\n    return NewChannelFlow;\n}(_react2.default.Component);\n\nexports.default = NewChannelFlow;\n\n\nNewChannelFlow.defaultProps = {\n    show: false,\n    channelType: 'O'\n};\n\nNewChannelFlow.propTypes = {\n    show: _react2.default.PropTypes.bool.isRequired,\n    channelType: _react2.default.PropTypes.string.isRequired,\n    onModalDismissed: _react2.default.PropTypes.func.isRequired\n};\n\n/***/ }),\n\n/***/ 2021:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getPrototypeOf = __webpack_require__(6);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(2);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(5);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(3);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _jquery = __webpack_require__(0);\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _reactDom = __webpack_require__(30);\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _url = __webpack_require__(141);\n\nvar _user_agent = __webpack_require__(59);\n\nvar UserAgent = _interopRequireWildcard(_user_agent);\n\nvar _utils = __webpack_require__(11);\n\nvar Utils = _interopRequireWildcard(_utils);\n\nvar _channel_utils = __webpack_require__(81);\n\nvar ChannelUtils = _interopRequireWildcard(_channel_utils);\n\nvar _constants = __webpack_require__(8);\n\nvar _constants2 = _interopRequireDefault(_constants);\n\nvar _user_store = __webpack_require__(15);\n\nvar _user_store2 = _interopRequireDefault(_user_store);\n\nvar _team_store = __webpack_require__(23);\n\nvar _team_store2 = _interopRequireDefault(_team_store);\n\nvar _preference_store = __webpack_require__(42);\n\nvar _preference_store2 = _interopRequireDefault(_preference_store);\n\nvar _reactIntl = __webpack_require__(13);\n\nvar _reactBootstrap = __webpack_require__(27);\n\nvar _react = __webpack_require__(1);\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar NewChannelModal = function (_React$Component) {\n    (0, _inherits3.default)(NewChannelModal, _React$Component);\n\n    function NewChannelModal(props) {\n        (0, _classCallCheck3.default)(this, NewChannelModal);\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (NewChannelModal.__proto__ || (0, _getPrototypeOf2.default)(NewChannelModal)).call(this, props));\n\n        _this.handleSubmit = _this.handleSubmit.bind(_this);\n        _this.handleChange = _this.handleChange.bind(_this);\n        _this.onEnterKeyDown = _this.onEnterKeyDown.bind(_this);\n        _this.onPreferenceChange = _this.onPreferenceChange.bind(_this);\n\n        _this.ctrlSend = _preference_store2.default.getBool(_constants2.default.Preferences.CATEGORY_ADVANCED_SETTINGS, 'send_on_ctrl_enter');\n\n        _this.state = {\n            displayNameError: ''\n        };\n        return _this;\n    }\n\n    (0, _createClass3.default)(NewChannelModal, [{\n        key: 'componentWillReceiveProps',\n        value: function componentWillReceiveProps(nextProps) {\n            if (nextProps.show === true && this.props.show === false) {\n                this.setState({\n                    displayNameError: ''\n                });\n\n                document.addEventListener('keydown', this.onEnterKeyDown);\n            } else if (nextProps.show === false && this.props.show === true) {\n                document.removeEventListener('keydown', this.onEnterKeyDown);\n            }\n        }\n    }, {\n        key: 'componentDidMount',\n        value: function componentDidMount() {\n            // ???\n            if (UserAgent.isInternetExplorer()) {\n                (0, _jquery2.default)('body').addClass('browser--ie');\n            }\n\n            _preference_store2.default.addChangeListener(this.onPreferenceChange);\n        }\n    }, {\n        key: 'componentWillUnmount',\n        value: function componentWillUnmount() {\n            _preference_store2.default.removeChangeListener(this.onPreferenceChange);\n        }\n    }, {\n        key: 'onPreferenceChange',\n        value: function onPreferenceChange() {\n            this.ctrlSend = _preference_store2.default.getBool(_constants2.default.Preferences.CATEGORY_ADVANCED_SETTINGS, 'send_on_ctrl_enter');\n        }\n    }, {\n        key: 'onEnterKeyDown',\n        value: function onEnterKeyDown(e) {\n            if (this.ctrlSend && e.keyCode === _constants2.default.KeyCodes.ENTER && e.ctrlKey) {\n                this.handleSubmit(e);\n            } else if (!this.ctrlSend && e.keyCode === _constants2.default.KeyCodes.ENTER && !e.shiftKey && !e.altKey) {\n                this.handleSubmit(e);\n            }\n        }\n    }, {\n        key: 'handleSubmit',\n        value: function handleSubmit(e) {\n            e.preventDefault();\n\n            var displayName = _reactDom2.default.findDOMNode(this.refs.display_name).value.trim();\n            if (displayName.length < _constants2.default.MIN_CHANNELNAME_LENGTH) {\n                this.setState({ displayNameError: true });\n                return;\n            }\n\n            this.props.onSubmitChannel();\n        }\n    }, {\n        key: 'handleChange',\n        value: function handleChange() {\n            var newData = {\n                displayName: this.refs.display_name.value,\n                header: this.refs.channel_header.value,\n                purpose: this.refs.channel_purpose.value\n            };\n            this.props.onDataChanged(newData);\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var displayNameError = null;\n            var serverError = null;\n            var displayNameClass = 'form-group';\n\n            if (this.state.displayNameError) {\n                displayNameError = _react2.default.createElement(\n                    'p',\n                    { className: 'input__help error' },\n                    _react2.default.createElement(_reactIntl.FormattedMessage, {\n                        id: 'channel_modal.displayNameError',\n                        defaultMessage: 'Channel name must be 2 or more characters'\n                    }),\n                    this.state.displayNameError\n                );\n                displayNameClass += ' has-error';\n            }\n\n            if (this.props.serverError) {\n                serverError = _react2.default.createElement(\n                    'div',\n                    { className: 'form-group has-error' },\n                    _react2.default.createElement(\n                        'p',\n                        { className: 'input__help error' },\n                        this.props.serverError\n                    )\n                );\n            }\n\n            var createPublicChannelLink = _react2.default.createElement(\n                'a',\n                {\n                    href: '#',\n                    onClick: this.props.onTypeSwitched\n                },\n                _react2.default.createElement(_reactIntl.FormattedMessage, {\n                    id: 'channel_modal.publicChannel1',\n                    defaultMessage: 'Create a public channel'\n                })\n            );\n\n            var createPrivateChannelLink = _react2.default.createElement(\n                'a',\n                {\n                    href: '#',\n                    onClick: this.props.onTypeSwitched\n                },\n                _react2.default.createElement(_reactIntl.FormattedMessage, {\n                    id: 'channel_modal.privateGroup2',\n                    defaultMessage: 'Create a private channel'\n                })\n            );\n\n            var isAdmin = _team_store2.default.isTeamAdminForCurrentTeam() || _user_store2.default.isSystemAdminForCurrentUser();\n            var isSystemAdmin = _user_store2.default.isSystemAdminForCurrentUser();\n\n            if (!ChannelUtils.showCreateOption(_constants2.default.OPEN_CHANNEL, isAdmin, isSystemAdmin)) {\n                createPublicChannelLink = null;\n            }\n\n            if (!ChannelUtils.showCreateOption(_constants2.default.PRIVATE_CHANNEL, isAdmin, isSystemAdmin)) {\n                createPrivateChannelLink = null;\n            }\n\n            var channelSwitchText = '';\n            switch (this.props.channelType) {\n                case 'P':\n                    channelSwitchText = _react2.default.createElement(\n                        'div',\n                        { className: 'modal-intro' },\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'channel_modal.privateGroup1',\n                            defaultMessage: 'Create a new private channel with restricted membership. '\n                        }),\n                        createPublicChannelLink\n                    );\n                    break;\n                case 'O':\n                    channelSwitchText = _react2.default.createElement(\n                        'div',\n                        { className: 'modal-intro' },\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'channel_modal.publicChannel2',\n                            defaultMessage: 'Create a new public channel anyone can join. '\n                        }),\n                        createPrivateChannelLink\n                    );\n                    break;\n            }\n\n            var prettyTeamURL = (0, _url.getShortenedURL)();\n\n            return _react2.default.createElement(\n                'span',\n                null,\n                _react2.default.createElement(\n                    _reactBootstrap.Modal,\n                    {\n                        dialogClassName: 'new-channel__modal',\n                        show: this.props.show,\n                        bsSize: 'large',\n                        onHide: this.props.onModalDismissed,\n                        onExited: this.props.onModalExited\n                    },\n                    _react2.default.createElement(\n                        _reactBootstrap.Modal.Header,\n                        { closeButton: true },\n                        _react2.default.createElement(\n                            _reactBootstrap.Modal.Title,\n                            null,\n                            _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                id: 'channel_modal.modalTitle',\n                                defaultMessage: 'New Channel'\n                            })\n                        )\n                    ),\n                    _react2.default.createElement(\n                        'form',\n                        {\n                            role: 'form',\n                            className: 'form-horizontal'\n                        },\n                        _react2.default.createElement(\n                            _reactBootstrap.Modal.Body,\n                            null,\n                            _react2.default.createElement(\n                                'div',\n                                null,\n                                channelSwitchText\n                            ),\n                            _react2.default.createElement(\n                                'div',\n                                { className: displayNameClass },\n                                _react2.default.createElement(\n                                    'label',\n                                    { className: 'col-sm-3 form__label control-label' },\n                                    _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                        id: 'channel_modal.name',\n                                        defaultMessage: 'Name'\n                                    })\n                                ),\n                                _react2.default.createElement(\n                                    'div',\n                                    { className: 'col-sm-9' },\n                                    _react2.default.createElement('input', {\n                                        onChange: this.handleChange,\n                                        type: 'text',\n                                        ref: 'display_name',\n                                        className: 'form-control',\n                                        placeholder: Utils.localizeMessage('channel_modal.nameEx', 'E.g.: \"Bugs\", \"Marketing\", \"客户支持\"'),\n                                        maxLength: _constants2.default.MAX_CHANNELNAME_LENGTH,\n                                        value: this.props.channelData.displayName,\n                                        autoFocus: true,\n                                        tabIndex: '1'\n                                    }),\n                                    displayNameError,\n                                    _react2.default.createElement(\n                                        'p',\n                                        { className: 'input__help dark' },\n                                        'URL: ' + prettyTeamURL + this.props.channelData.name + ' (',\n                                        _react2.default.createElement(\n                                            'a',\n                                            {\n                                                href: '#',\n                                                onClick: this.props.onChangeURLPressed\n                                            },\n                                            _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                                id: 'channel_modal.edit',\n                                                defaultMessage: 'Edit'\n                                            })\n                                        ),\n                                        ')'\n                                    )\n                                )\n                            ),\n                            _react2.default.createElement(\n                                'div',\n                                { className: 'form-group' },\n                                _react2.default.createElement(\n                                    'div',\n                                    { className: 'col-sm-3' },\n                                    _react2.default.createElement(\n                                        'label',\n                                        { className: 'form__label control-label' },\n                                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                            id: 'channel_modal.purpose',\n                                            defaultMessage: 'Purpose'\n                                        })\n                                    ),\n                                    _react2.default.createElement(\n                                        'label',\n                                        { className: 'form__label light' },\n                                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                            id: 'channel_modal.optional',\n                                            defaultMessage: '(optional)'\n                                        })\n                                    )\n                                ),\n                                _react2.default.createElement(\n                                    'div',\n                                    { className: 'col-sm-9' },\n                                    _react2.default.createElement('textarea', {\n                                        className: 'form-control no-resize',\n                                        ref: 'channel_purpose',\n                                        rows: '4',\n                                        placeholder: Utils.localizeMessage('channel_modal.purposeEx', 'E.g.: \"A channel to file bugs and improvements\"'),\n                                        maxLength: '250',\n                                        value: this.props.channelData.purpose,\n                                        onChange: this.handleChange,\n                                        tabIndex: '2'\n                                    }),\n                                    _react2.default.createElement(\n                                        'p',\n                                        { className: 'input__help' },\n                                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                            id: 'channel_modal.descriptionHelp',\n                                            defaultMessage: 'Describe how this channel should be used.'\n                                        })\n                                    )\n                                )\n                            ),\n                            _react2.default.createElement(\n                                'div',\n                                { className: 'form-group less' },\n                                _react2.default.createElement(\n                                    'div',\n                                    { className: 'col-sm-3' },\n                                    _react2.default.createElement(\n                                        'label',\n                                        { className: 'form__label control-label' },\n                                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                            id: 'channel_modal.header',\n                                            defaultMessage: 'Header'\n                                        })\n                                    ),\n                                    _react2.default.createElement(\n                                        'label',\n                                        { className: 'form__label light' },\n                                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                            id: 'channel_modal.optional',\n                                            defaultMessage: '(optional)'\n                                        })\n                                    )\n                                ),\n                                _react2.default.createElement(\n                                    'div',\n                                    { className: 'col-sm-9' },\n                                    _react2.default.createElement('textarea', {\n                                        className: 'form-control no-resize',\n                                        ref: 'channel_header',\n                                        rows: '4',\n                                        placeholder: Utils.localizeMessage('channel_modal.headerEx', 'E.g.: \"[Link Title](http://example.com)\"'),\n                                        maxLength: '1024',\n                                        value: this.props.channelData.header,\n                                        onChange: this.handleChange,\n                                        tabIndex: '2'\n                                    }),\n                                    _react2.default.createElement(\n                                        'p',\n                                        { className: 'input__help' },\n                                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                            id: 'channel_modal.headerHelp',\n                                            defaultMessage: 'Set text that will appear in the header of the channel beside the channel name. For example, include frequently used links by typing [Link Title](http://example.com).'\n                                        })\n                                    ),\n                                    serverError\n                                )\n                            )\n                        ),\n                        _react2.default.createElement(\n                            _reactBootstrap.Modal.Footer,\n                            null,\n                            _react2.default.createElement(\n                                'button',\n                                {\n                                    type: 'button',\n                                    className: 'btn btn-default',\n                                    onClick: this.props.onModalDismissed\n                                },\n                                _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                    id: 'channel_modal.cancel',\n                                    defaultMessage: 'Cancel'\n                                })\n                            ),\n                            _react2.default.createElement(\n                                'button',\n                                {\n                                    onClick: this.handleSubmit,\n                                    type: 'submit',\n                                    className: 'btn btn-primary',\n                                    tabIndex: '3'\n                                },\n                                _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                    id: 'channel_modal.createNew',\n                                    defaultMessage: 'Create New Channel'\n                                })\n                            )\n                        )\n                    )\n                )\n            );\n        }\n    }]);\n    return NewChannelModal;\n}(_react2.default.Component); // Copyright (c) 2015 Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nexports.default = NewChannelModal;\n\n\nNewChannelModal.defaultProps = {\n    show: false,\n    channelType: 'O',\n    serverError: null\n};\nNewChannelModal.propTypes = {\n    show: _react2.default.PropTypes.bool.isRequired,\n    channelType: _react2.default.PropTypes.string.isRequired,\n    channelData: _react2.default.PropTypes.object.isRequired,\n    serverError: _react2.default.PropTypes.node,\n    onSubmitChannel: _react2.default.PropTypes.func.isRequired,\n    onModalDismissed: _react2.default.PropTypes.func.isRequired,\n    onModalExited: _react2.default.PropTypes.func,\n    onTypeSwitched: _react2.default.PropTypes.func.isRequired,\n    onChangeURLPressed: _react2.default.PropTypes.func.isRequired,\n    onDataChanged: _react2.default.PropTypes.func.isRequired\n};\n\n/***/ }),\n\n/***/ 2036:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getPrototypeOf = __webpack_require__(6);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(2);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(5);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(3);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _loading_screen = __webpack_require__(164);\n\nvar _loading_screen2 = _interopRequireDefault(_loading_screen);\n\nvar _user_agent = __webpack_require__(59);\n\nvar UserAgent = _interopRequireWildcard(_user_agent);\n\nvar _jquery = __webpack_require__(0);\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _react = __webpack_require__(1);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _utils = __webpack_require__(11);\n\nvar _reactIntl = __webpack_require__(13);\n\nvar _load = __webpack_require__(121);\n\nvar _load2 = _interopRequireDefault(_load);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar NEXT_BUTTON_TIMEOUT_MILLISECONDS = 500; // Copyright (c) 2016 Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nvar SearchableChannelList = function (_React$Component) {\n    (0, _inherits3.default)(SearchableChannelList, _React$Component);\n\n    function SearchableChannelList(props) {\n        (0, _classCallCheck3.default)(this, SearchableChannelList);\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (SearchableChannelList.__proto__ || (0, _getPrototypeOf2.default)(SearchableChannelList)).call(this, props));\n\n        _this.createChannelRow = _this.createChannelRow.bind(_this);\n        _this.nextPage = _this.nextPage.bind(_this);\n        _this.previousPage = _this.previousPage.bind(_this);\n        _this.doSearch = _this.doSearch.bind(_this);\n\n        _this.nextTimeoutId = 0;\n\n        _this.state = {\n            joiningChannel: '',\n            page: 0,\n            nextDisabled: false\n        };\n        return _this;\n    }\n\n    (0, _createClass3.default)(SearchableChannelList, [{\n        key: 'componentDidMount',\n        value: function componentDidMount() {\n            // only focus the search box on desktop so that we don't cause the keyboard to open on mobile\n            if (!UserAgent.isMobile()) {\n                this.refs.filter.focus();\n            }\n        }\n    }, {\n        key: 'componentDidUpdate',\n        value: function componentDidUpdate(prevProps, prevState) {\n            if (prevState.page !== this.state.page) {\n                (0, _jquery2.default)(this.refs.channelList).scrollTop(0);\n            }\n        }\n    }, {\n        key: 'handleJoin',\n        value: function handleJoin(channel) {\n            var _this2 = this;\n\n            this.setState({ joiningChannel: channel.id });\n            this.props.handleJoin(channel, function () {\n                _this2.setState({ joiningChannel: '' });\n            });\n        }\n    }, {\n        key: 'createChannelRow',\n        value: function createChannelRow(channel) {\n            var joinButton = void 0;\n            if (this.state.joiningChannel === channel.id) {\n                joinButton = _react2.default.createElement('img', {\n                    className: 'join-channel-loading-gif',\n                    src: _load2.default\n                });\n            } else {\n                joinButton = _react2.default.createElement(\n                    'button',\n                    {\n                        onClick: this.handleJoin.bind(this, channel),\n                        className: 'btn btn-primary'\n                    },\n                    _react2.default.createElement(_reactIntl.FormattedMessage, {\n                        id: 'more_channels.join',\n                        defaultMessage: 'Join'\n                    })\n                );\n            }\n\n            return _react2.default.createElement(\n                'div',\n                {\n                    className: 'more-modal__row',\n                    key: channel.id\n                },\n                _react2.default.createElement(\n                    'div',\n                    { className: 'more-modal__details' },\n                    _react2.default.createElement(\n                        'p',\n                        { className: 'more-modal__name' },\n                        channel.display_name\n                    ),\n                    _react2.default.createElement(\n                        'p',\n                        { className: 'more-modal__description' },\n                        channel.purpose\n                    )\n                ),\n                _react2.default.createElement(\n                    'div',\n                    { className: 'more-modal__actions' },\n                    joinButton\n                )\n            );\n        }\n    }, {\n        key: 'nextPage',\n        value: function nextPage(e) {\n            var _this3 = this;\n\n            e.preventDefault();\n            this.setState({ page: this.state.page + 1, nextDisabled: true });\n            this.nextTimeoutId = setTimeout(function () {\n                return _this3.setState({ nextDisabled: false });\n            }, NEXT_BUTTON_TIMEOUT_MILLISECONDS);\n            this.props.nextPage(this.state.page + 1);\n        }\n    }, {\n        key: 'previousPage',\n        value: function previousPage(e) {\n            e.preventDefault();\n            this.setState({ page: this.state.page - 1 });\n        }\n    }, {\n        key: 'doSearch',\n        value: function doSearch() {\n            var term = this.refs.filter.value;\n            this.props.search(term);\n            if (term === '') {\n                this.setState({ page: 0 });\n            }\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var channels = this.props.channels;\n            var listContent = void 0;\n            var nextButton = void 0;\n            var previousButton = void 0;\n\n            if (channels == null) {\n                listContent = _react2.default.createElement(_loading_screen2.default, null);\n            } else if (channels.length === 0) {\n                listContent = _react2.default.createElement(\n                    'div',\n                    { className: 'no-channel-message' },\n                    _react2.default.createElement(\n                        'p',\n                        { className: 'primary-message' },\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'more_channels.noMore',\n                            defaultMessage: 'No more channels to join'\n                        })\n                    ),\n                    this.props.noResultsText\n                );\n            } else {\n                var pageStart = this.state.page * this.props.channelsPerPage;\n                var pageEnd = pageStart + this.props.channelsPerPage;\n                var channelsToDisplay = this.props.channels.slice(pageStart, pageEnd);\n                listContent = channelsToDisplay.map(this.createChannelRow);\n\n                if (channelsToDisplay.length >= this.props.channelsPerPage) {\n                    nextButton = _react2.default.createElement(\n                        'button',\n                        {\n                            className: 'btn btn-default filter-control filter-control__next',\n                            onClick: this.nextPage,\n                            disabled: this.state.nextDisabled\n                        },\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'more_channels.next',\n                            defaultMessage: 'Next'\n                        })\n                    );\n                }\n\n                if (this.state.page > 0) {\n                    previousButton = _react2.default.createElement(\n                        'button',\n                        {\n                            className: 'btn btn-default filter-control filter-control__prev',\n                            onClick: this.previousPage\n                        },\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'more_channels.prev',\n                            defaultMessage: 'Previous'\n                        })\n                    );\n                }\n            }\n\n            return _react2.default.createElement(\n                'div',\n                { className: 'filtered-user-list' },\n                _react2.default.createElement(\n                    'div',\n                    { className: 'filter-row' },\n                    _react2.default.createElement(\n                        'div',\n                        { className: 'col-sm-12' },\n                        _react2.default.createElement('input', {\n                            ref: 'filter',\n                            className: 'form-control filter-textbox',\n                            placeholder: (0, _utils.localizeMessage)('filtered_channels_list.search', 'Search channels'),\n                            onInput: this.doSearch\n                        })\n                    )\n                ),\n                _react2.default.createElement(\n                    'div',\n                    {\n                        ref: 'channelList',\n                        className: 'more-modal__list'\n                    },\n                    _react2.default.createElement(\n                        'div',\n                        null,\n                        listContent\n                    )\n                ),\n                _react2.default.createElement(\n                    'div',\n                    { className: 'filter-controls' },\n                    previousButton,\n                    nextButton\n                )\n            );\n        }\n    }]);\n    return SearchableChannelList;\n}(_react2.default.Component);\n\nexports.default = SearchableChannelList;\n\n\nSearchableChannelList.defaultProps = {\n    channels: []\n};\n\nSearchableChannelList.propTypes = {\n    channels: _react2.default.PropTypes.arrayOf(_react2.default.PropTypes.object),\n    channelsPerPage: _react2.default.PropTypes.number,\n    nextPage: _react2.default.PropTypes.func.isRequired,\n    search: _react2.default.PropTypes.func.isRequired,\n    handleJoin: _react2.default.PropTypes.func.isRequired,\n    noResultsText: _react2.default.PropTypes.object\n};\n\n/***/ }),\n\n/***/ 2039:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getPrototypeOf = __webpack_require__(6);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(2);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(5);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(3);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = __webpack_require__(1);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _web_client = __webpack_require__(28);\n\nvar _web_client2 = _interopRequireDefault(_web_client);\n\nvar _preference_store = __webpack_require__(42);\n\nvar _preference_store2 = _interopRequireDefault(_preference_store);\n\nvar _utils = __webpack_require__(11);\n\nvar Utils = _interopRequireWildcard(_utils);\n\nvar _sidebar_header_dropdown = __webpack_require__(2040);\n\nvar _sidebar_header_dropdown2 = _interopRequireDefault(_sidebar_header_dropdown);\n\nvar _reactBootstrap = __webpack_require__(27);\n\nvar _constants = __webpack_require__(8);\n\nvar _tutorial_tip = __webpack_require__(573);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Copyright (c) 2015 Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nvar SidebarHeader = function (_React$Component) {\n    (0, _inherits3.default)(SidebarHeader, _React$Component);\n\n    function SidebarHeader(props) {\n        (0, _classCallCheck3.default)(this, SidebarHeader);\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (SidebarHeader.__proto__ || (0, _getPrototypeOf2.default)(SidebarHeader)).call(this, props));\n\n        _this.toggleDropdown = _this.toggleDropdown.bind(_this);\n        _this.onPreferenceChange = _this.onPreferenceChange.bind(_this);\n\n        _this.state = _this.getStateFromStores();\n        return _this;\n    }\n\n    (0, _createClass3.default)(SidebarHeader, [{\n        key: 'componentDidMount',\n        value: function componentDidMount() {\n            _preference_store2.default.addChangeListener(this.onPreferenceChange);\n        }\n    }, {\n        key: 'componentWillUnmount',\n        value: function componentWillUnmount() {\n            _preference_store2.default.removeChangeListener(this.onPreferenceChange);\n        }\n    }, {\n        key: 'getStateFromStores',\n        value: function getStateFromStores() {\n            var tutorialStep = _preference_store2.default.getInt(_constants.Preferences.TUTORIAL_STEP, this.props.currentUser.id, 999);\n\n            return { showTutorialTip: tutorialStep === _constants.TutorialSteps.MENU_POPOVER && !Utils.isMobile() };\n        }\n    }, {\n        key: 'onPreferenceChange',\n        value: function onPreferenceChange() {\n            this.setState(this.getStateFromStores());\n        }\n    }, {\n        key: 'toggleDropdown',\n        value: function toggleDropdown(e) {\n            e.preventDefault();\n\n            this.refs.dropdown.toggleDropdown();\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var me = this.props.currentUser;\n            var profilePicture = null;\n\n            if (!me) {\n                return null;\n            }\n\n            if (me.last_picture_update) {\n                profilePicture = _react2.default.createElement('img', {\n                    className: 'user__picture',\n                    src: _web_client2.default.getUsersRoute() + '/' + me.id + '/image?time=' + me.last_picture_update\n                });\n            }\n\n            var tutorialTip = null;\n            if (this.state.showTutorialTip) {\n                tutorialTip = (0, _tutorial_tip.createMenuTip)(this.toggleDropdown);\n            }\n\n            var teamNameWithToolTip = null;\n            if (this.props.teamDescription === '') {\n                teamNameWithToolTip = _react2.default.createElement(\n                    'div',\n                    { className: 'team__name' },\n                    this.props.teamDisplayName\n                );\n            } else {\n                teamNameWithToolTip = _react2.default.createElement(\n                    _reactBootstrap.OverlayTrigger,\n                    {\n                        trigger: ['hover', 'focus'],\n                        delayShow: _constants.Constants.OVERLAY_TIME_DELAY,\n                        placement: 'bottom',\n                        overlay: _react2.default.createElement(\n                            _reactBootstrap.Tooltip,\n                            { id: 'team-name__tooltip' },\n                            this.props.teamDescription\n                        ),\n                        ref: 'descriptionOverlay'\n                    },\n                    _react2.default.createElement(\n                        'div',\n                        { className: 'team__name' },\n                        this.props.teamDisplayName\n                    )\n                );\n            }\n\n            return _react2.default.createElement(\n                'div',\n                { className: 'team__header theme' },\n                tutorialTip,\n                _react2.default.createElement(\n                    'div',\n                    null,\n                    profilePicture,\n                    _react2.default.createElement(\n                        'div',\n                        { className: 'header__info' },\n                        _react2.default.createElement(\n                            'div',\n                            { className: 'user__name' },\n                            '@' + me.username\n                        ),\n                        teamNameWithToolTip\n                    )\n                ),\n                _react2.default.createElement(_sidebar_header_dropdown2.default, {\n                    ref: 'dropdown',\n                    teamType: this.props.teamType,\n                    teamDisplayName: this.props.teamDisplayName,\n                    teamName: this.props.teamName,\n                    currentUser: this.props.currentUser\n                })\n            );\n        }\n    }]);\n    return SidebarHeader;\n}(_react2.default.Component);\n\nexports.default = SidebarHeader;\n\n\nSidebarHeader.defaultProps = {\n    teamDisplayName: '',\n    teamDescription: '',\n    teamType: ''\n};\nSidebarHeader.propTypes = {\n    teamDisplayName: _react2.default.PropTypes.string,\n    teamDescription: _react2.default.PropTypes.string,\n    teamName: _react2.default.PropTypes.string,\n    teamType: _react2.default.PropTypes.string,\n    currentUser: _react2.default.PropTypes.object\n};\n\n/***/ }),\n\n/***/ 2040:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getPrototypeOf = __webpack_require__(6);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(2);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(5);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(3);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _jquery = __webpack_require__(0);\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _reactDom = __webpack_require__(30);\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _user_agent = __webpack_require__(59);\n\nvar UserAgent = _interopRequireWildcard(_user_agent);\n\nvar _utils = __webpack_require__(11);\n\nvar Utils = _interopRequireWildcard(_utils);\n\nvar _global_actions = __webpack_require__(41);\n\nvar GlobalActions = _interopRequireWildcard(_global_actions);\n\nvar _team_store = __webpack_require__(23);\n\nvar _team_store2 = _interopRequireDefault(_team_store);\n\nvar _user_store = __webpack_require__(15);\n\nvar _user_store2 = _interopRequireDefault(_user_store);\n\nvar _webrtc_store = __webpack_require__(334);\n\nvar _webrtc_store2 = _interopRequireDefault(_webrtc_store);\n\nvar _about_build_modal = __webpack_require__(1670);\n\nvar _about_build_modal2 = _interopRequireDefault(_about_build_modal);\n\nvar _sidebar_header_dropdown_button = __webpack_require__(2041);\n\nvar _sidebar_header_dropdown_button2 = _interopRequireDefault(_sidebar_header_dropdown_button);\n\nvar _team_members_modal = __webpack_require__(578);\n\nvar _team_members_modal2 = _interopRequireDefault(_team_members_modal);\n\nvar _user_settings_modal = __webpack_require__(1678);\n\nvar _user_settings_modal2 = _interopRequireDefault(_user_settings_modal);\n\nvar _add_users_to_team = __webpack_require__(1671);\n\nvar _add_users_to_team2 = _interopRequireDefault(_add_users_to_team);\n\nvar _constants = __webpack_require__(8);\n\nvar _reactBootstrap = __webpack_require__(27);\n\nvar _reactIntl = __webpack_require__(13);\n\nvar _es = __webpack_require__(37);\n\nvar _react = __webpack_require__(1);\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Copyright (c) 2015 Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nvar SidebarHeaderDropdown = function (_React$Component) {\n    (0, _inherits3.default)(SidebarHeaderDropdown, _React$Component);\n\n    function SidebarHeaderDropdown(props) {\n        (0, _classCallCheck3.default)(this, SidebarHeaderDropdown);\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (SidebarHeaderDropdown.__proto__ || (0, _getPrototypeOf2.default)(SidebarHeaderDropdown)).call(this, props));\n\n        _this.toggleDropdown = _this.toggleDropdown.bind(_this);\n\n        _this.handleAboutModal = _this.handleAboutModal.bind(_this);\n        _this.aboutModalDismissed = _this.aboutModalDismissed.bind(_this);\n        _this.toggleAccountSettingsModal = _this.toggleAccountSettingsModal.bind(_this);\n        _this.showAddUsersToTeamModal = _this.showAddUsersToTeamModal.bind(_this);\n        _this.hideAddUsersToTeamModal = _this.hideAddUsersToTeamModal.bind(_this);\n        _this.showInviteMemberModal = _this.showInviteMemberModal.bind(_this);\n        _this.showGetTeamInviteLinkModal = _this.showGetTeamInviteLinkModal.bind(_this);\n        _this.showTeamMembersModal = _this.showTeamMembersModal.bind(_this);\n        _this.hideTeamMembersModal = _this.hideTeamMembersModal.bind(_this);\n\n        _this.onTeamChange = _this.onTeamChange.bind(_this);\n        _this.openAccountSettings = _this.openAccountSettings.bind(_this);\n\n        _this.renderCustomEmojiLink = _this.renderCustomEmojiLink.bind(_this);\n\n        _this.handleClick = _this.handleClick.bind(_this);\n\n        _this.state = {\n            teamMembers: _team_store2.default.getMyTeamMembers(),\n            teamListings: _team_store2.default.getTeamListings(),\n            showAboutModal: false,\n            showDropdown: false,\n            showTeamMembersModal: false,\n            showUserSettingsModal: false,\n            showAddUsersToTeamModal: false\n        };\n        return _this;\n    }\n\n    (0, _createClass3.default)(SidebarHeaderDropdown, [{\n        key: 'handleClick',\n        value: function handleClick(e) {\n            if (_webrtc_store2.default.isBusy()) {\n                _webrtc_store2.default.emitChanged({ action: _constants.WebrtcActionTypes.IN_PROGRESS });\n                e.preventDefault();\n            }\n        }\n    }, {\n        key: 'toggleDropdown',\n        value: function toggleDropdown(e) {\n            if (e) {\n                e.preventDefault();\n            }\n\n            this.setState({ showDropdown: !this.state.showDropdown });\n        }\n    }, {\n        key: 'handleAboutModal',\n        value: function handleAboutModal(e) {\n            e.preventDefault();\n\n            this.setState({\n                showAboutModal: true,\n                showDropdown: false\n            });\n        }\n    }, {\n        key: 'aboutModalDismissed',\n        value: function aboutModalDismissed() {\n            this.setState({ showAboutModal: false });\n        }\n    }, {\n        key: 'toggleAccountSettingsModal',\n        value: function toggleAccountSettingsModal(e) {\n            e.preventDefault();\n\n            this.setState({\n                showUserSettingsModal: !this.state.showUserSettingsModal,\n                showDropdown: false\n            });\n        }\n    }, {\n        key: 'showAddUsersToTeamModal',\n        value: function showAddUsersToTeamModal(e) {\n            e.preventDefault();\n\n            this.setState({\n                showAddUsersToTeamModal: true,\n                showDropdown: false\n            });\n        }\n    }, {\n        key: 'hideAddUsersToTeamModal',\n        value: function hideAddUsersToTeamModal() {\n            this.setState({\n                showAddUsersToTeamModal: false\n            });\n        }\n    }, {\n        key: 'showInviteMemberModal',\n        value: function showInviteMemberModal(e) {\n            e.preventDefault();\n\n            this.setState({ showDropdown: false });\n\n            GlobalActions.showInviteMemberModal();\n        }\n    }, {\n        key: 'showGetTeamInviteLinkModal',\n        value: function showGetTeamInviteLinkModal(e) {\n            e.preventDefault();\n\n            this.setState({ showDropdown: false });\n\n            GlobalActions.showGetTeamInviteLinkModal();\n        }\n    }, {\n        key: 'showTeamMembersModal',\n        value: function showTeamMembersModal(e) {\n            e.preventDefault();\n\n            this.setState({\n                showTeamMembersModal: true\n            });\n        }\n    }, {\n        key: 'hideTeamMembersModal',\n        value: function hideTeamMembersModal() {\n            this.setState({\n                showTeamMembersModal: false\n            });\n        }\n    }, {\n        key: 'componentDidMount',\n        value: function componentDidMount() {\n            _team_store2.default.addChangeListener(this.onTeamChange);\n            document.addEventListener('keydown', this.openAccountSettings);\n        }\n    }, {\n        key: 'onTeamChange',\n        value: function onTeamChange() {\n            this.setState({\n                teamMembers: _team_store2.default.getMyTeamMembers(),\n                teamListings: _team_store2.default.getTeamListings()\n            });\n        }\n    }, {\n        key: 'componentWillUnmount',\n        value: function componentWillUnmount() {\n            (0, _jquery2.default)(_reactDom2.default.findDOMNode(this.refs.dropdown)).off('hide.bs.dropdown');\n            _team_store2.default.removeChangeListener(this.onTeamChange);\n            document.removeEventListener('keydown', this.openAccountSettings);\n        }\n    }, {\n        key: 'openAccountSettings',\n        value: function openAccountSettings(e) {\n            if (Utils.cmdOrCtrlPressed(e) && e.shiftKey && e.keyCode === _constants.Constants.KeyCodes.A) {\n                this.toggleAccountSettingsModal(e);\n            }\n        }\n    }, {\n        key: 'renderCustomEmojiLink',\n        value: function renderCustomEmojiLink() {\n            if (window.mm_config.EnableCustomEmoji !== 'true' || !Utils.canCreateCustomEmoji(this.props.currentUser)) {\n                return null;\n            }\n\n            return _react2.default.createElement(\n                'li',\n                null,\n                _react2.default.createElement(\n                    _es.Link,\n                    {\n                        onClick: this.handleClick,\n                        to: '/' + this.props.teamName + '/emoji'\n                    },\n                    _react2.default.createElement(_reactIntl.FormattedMessage, {\n                        id: 'navbar_dropdown.emoji',\n                        defaultMessage: 'Custom Emoji'\n                    })\n                )\n            );\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var _this2 = this;\n\n            var config = global.mm_config;\n            var currentUser = this.props.currentUser;\n            var teamLink = '';\n            var inviteLink = '';\n            var addMemberToTeam = '';\n            var manageLink = '';\n            var sysAdminLink = '';\n            var isAdmin = false;\n            var isSystemAdmin = false;\n            var teamSettings = null;\n            var integrationsLink = null;\n\n            if (!currentUser) {\n                return null;\n            }\n\n            if (currentUser != null) {\n                isAdmin = _team_store2.default.isTeamAdminForCurrentTeam() || _user_store2.default.isSystemAdminForCurrentUser();\n                isSystemAdmin = _user_store2.default.isSystemAdminForCurrentUser();\n\n                inviteLink = _react2.default.createElement(\n                    'li',\n                    null,\n                    _react2.default.createElement(\n                        'a',\n                        {\n                            href: '#',\n                            onClick: this.showInviteMemberModal\n                        },\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'navbar_dropdown.inviteMember',\n                            defaultMessage: 'Send Email Invite'\n                        })\n                    )\n                );\n\n                addMemberToTeam = _react2.default.createElement(\n                    'li',\n                    null,\n                    _react2.default.createElement(\n                        'a',\n                        {\n                            id: 'addUsersToTeam',\n                            href: '#',\n                            onClick: this.showAddUsersToTeamModal\n                        },\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'navbar_dropdown.addMemberToTeam',\n                            defaultMessage: 'Add Members to Team'\n                        })\n                    )\n                );\n\n                if (this.props.teamType === _constants.Constants.OPEN_TEAM && config.EnableUserCreation === 'true') {\n                    teamLink = _react2.default.createElement(\n                        'li',\n                        null,\n                        _react2.default.createElement(\n                            'a',\n                            {\n                                href: '#',\n                                onClick: this.showGetTeamInviteLinkModal\n                            },\n                            _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                id: 'navbar_dropdown.teamLink',\n                                defaultMessage: 'Get Team Invite Link'\n                            })\n                        )\n                    );\n                }\n\n                if (global.window.mm_license.IsLicensed === 'true') {\n                    if (config.RestrictTeamInvite === _constants.Constants.PERMISSIONS_SYSTEM_ADMIN && !isSystemAdmin) {\n                        teamLink = null;\n                        inviteLink = null;\n                        addMemberToTeam = null;\n                    } else if (config.RestrictTeamInvite === _constants.Constants.PERMISSIONS_TEAM_ADMIN && !isAdmin) {\n                        teamLink = null;\n                        inviteLink = null;\n                        addMemberToTeam = null;\n                    }\n                }\n            }\n\n            var membersName = _react2.default.createElement(_reactIntl.FormattedMessage, {\n                id: 'navbar_dropdown.manageMembers',\n                defaultMessage: 'Manage Members'\n            });\n\n            if (isAdmin) {\n                teamSettings = _react2.default.createElement(\n                    'li',\n                    null,\n                    _react2.default.createElement(\n                        'a',\n                        {\n                            href: '#',\n                            'data-toggle': 'modal',\n                            'data-target': '#team_settings',\n                            onClick: this.toggleDropdown\n                        },\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'navbar_dropdown.teamSettings',\n                            defaultMessage: 'Team Settings'\n                        })\n                    )\n                );\n            } else {\n                membersName = _react2.default.createElement(_reactIntl.FormattedMessage, {\n                    id: 'navbar_dropdown.viewMembers',\n                    defaultMessage: 'View Members'\n                });\n            }\n\n            manageLink = _react2.default.createElement(\n                'li',\n                null,\n                _react2.default.createElement(\n                    'a',\n                    {\n                        href: '#',\n                        onClick: this.showTeamMembersModal\n                    },\n                    membersName\n                )\n            );\n\n            var integrationsEnabled = config.EnableIncomingWebhooks === 'true' || config.EnableOutgoingWebhooks === 'true' || config.EnableCommands === 'true' || config.EnableOAuthServiceProvider === 'true' && (isSystemAdmin || config.EnableOnlyAdminIntegrations !== 'true');\n            if (integrationsEnabled && (isAdmin || config.EnableOnlyAdminIntegrations !== 'true')) {\n                integrationsLink = _react2.default.createElement(\n                    'li',\n                    null,\n                    _react2.default.createElement(\n                        _es.Link,\n                        {\n                            to: '/' + this.props.teamName + '/integrations',\n                            onClick: this.handleClick\n                        },\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'navbar_dropdown.integrations',\n                            defaultMessage: 'Integrations'\n                        })\n                    )\n                );\n            }\n\n            if (isSystemAdmin) {\n                sysAdminLink = _react2.default.createElement(\n                    'li',\n                    null,\n                    _react2.default.createElement(\n                        _es.Link,\n                        {\n                            id: 'systemConsole',\n                            to: '/admin_console',\n                            onClick: this.handleClick\n                        },\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'navbar_dropdown.console',\n                            defaultMessage: 'System Console'\n                        })\n                    )\n                );\n            }\n\n            var teams = [];\n            var moreTeams = false;\n\n            if (config.EnableTeamCreation === 'true' || _user_store2.default.isSystemAdminForCurrentUser()) {\n                teams.push(_react2.default.createElement(\n                    'li',\n                    { key: 'newTeam_li' },\n                    _react2.default.createElement(\n                        _es.Link,\n                        {\n                            key: 'newTeam_a',\n                            to: '/create_team',\n                            onClick: this.handleClick\n                        },\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'navbar_dropdown.create',\n                            defaultMessage: 'Create a New Team'\n                        })\n                    )\n                ));\n            }\n\n            var isAlreadyMember = this.state.teamMembers.reduce(function (result, item) {\n                result[item.team_id] = true;\n                return result;\n            }, {});\n\n            for (var id in this.state.teamListings) {\n                if (this.state.teamListings.hasOwnProperty(id) && !isAlreadyMember[id]) {\n                    moreTeams = true;\n                    break;\n                }\n            }\n\n            if (moreTeams) {\n                teams.push(_react2.default.createElement(\n                    'li',\n                    { key: 'joinTeam_li' },\n                    _react2.default.createElement(\n                        _es.Link,\n                        {\n                            onClick: this.handleClick,\n                            to: '/select_team'\n                        },\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'navbar_dropdown.join',\n                            defaultMessage: 'Join Another Team'\n                        })\n                    )\n                ));\n            }\n\n            teams.push(_react2.default.createElement(\n                'li',\n                { key: 'leaveTeam_li' },\n                _react2.default.createElement(\n                    'a',\n                    {\n                        href: '#',\n                        onClick: GlobalActions.showLeaveTeamModal\n                    },\n                    _react2.default.createElement(_reactIntl.FormattedMessage, {\n                        id: 'navbar_dropdown.leave',\n                        defaultMessage: 'Leave Team'\n                    })\n                )\n            ));\n\n            var helpLink = null;\n            if (config.HelpLink) {\n                helpLink = _react2.default.createElement(\n                    'li',\n                    null,\n                    _react2.default.createElement(\n                        _es.Link,\n                        {\n                            target: '_blank',\n                            rel: 'noopener noreferrer',\n                            to: config.HelpLink\n                        },\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'navbar_dropdown.help',\n                            defaultMessage: 'Help'\n                        })\n                    )\n                );\n            }\n\n            var reportLink = null;\n            if (config.ReportAProblemLink) {\n                reportLink = _react2.default.createElement(\n                    'li',\n                    null,\n                    _react2.default.createElement(\n                        _es.Link,\n                        {\n                            target: '_blank',\n                            rel: 'noopener noreferrer',\n                            to: config.ReportAProblemLink\n                        },\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'navbar_dropdown.report',\n                            defaultMessage: 'Report a Problem'\n                        })\n                    )\n                );\n            }\n\n            var nativeAppLink = null;\n            if (global.window.mm_config.AppDownloadLink && !UserAgent.isMobileApp()) {\n                nativeAppLink = _react2.default.createElement(\n                    'li',\n                    null,\n                    _react2.default.createElement(\n                        _es.Link,\n                        {\n                            target: '_blank',\n                            rel: 'noopener noreferrer',\n                            to: global.window.mm_config.AppDownloadLink\n                        },\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'navbar_dropdown.nativeApps',\n                            defaultMessage: 'Download Apps'\n                        })\n                    )\n                );\n            }\n\n            var teamMembersModal = void 0;\n            if (this.state.showTeamMembersModal) {\n                teamMembersModal = _react2.default.createElement(_team_members_modal2.default, {\n                    onLoad: this.toggleDropdown,\n                    onHide: this.hideTeamMembersModal,\n                    isAdmin: isAdmin\n                });\n            }\n\n            var addUsersToTeamModal = void 0;\n            if (this.state.showAddUsersToTeamModal) {\n                addUsersToTeamModal = _react2.default.createElement(_add_users_to_team2.default, {\n                    onModalDismissed: this.hideAddUsersToTeamModal\n                });\n            }\n\n            var accountSettings = _react2.default.createElement(\n                'li',\n                null,\n                _react2.default.createElement(\n                    'a',\n                    {\n                        id: 'accountSettings',\n                        href: '#',\n                        onClick: this.toggleAccountSettingsModal\n                    },\n                    _react2.default.createElement(_reactIntl.FormattedMessage, {\n                        id: 'navbar_dropdown.accountSettings',\n                        defaultMessage: 'Account Settings'\n                    })\n                )\n            );\n\n            var about = _react2.default.createElement(\n                'li',\n                null,\n                _react2.default.createElement(\n                    'a',\n                    {\n                        href: '#',\n                        onClick: this.handleAboutModal\n                    },\n                    _react2.default.createElement(_reactIntl.FormattedMessage, {\n                        id: 'navbar_dropdown.about',\n                        defaultMessage: 'About Mattermost'\n                    })\n                )\n            );\n\n            var logout = _react2.default.createElement(\n                'li',\n                null,\n                _react2.default.createElement(\n                    'a',\n                    {\n                        id: 'logout',\n                        href: '#',\n                        onClick: function onClick() {\n                            return GlobalActions.emitUserLoggedOutEvent();\n                        }\n                    },\n                    _react2.default.createElement(_reactIntl.FormattedMessage, {\n                        id: 'navbar_dropdown.logout',\n                        defaultMessage: 'Logout'\n                    })\n                )\n            );\n\n            var customEmoji = this.renderCustomEmojiLink();\n\n            // Dividers.\n            var inviteDivider = null;\n            if (inviteLink || teamLink || addMemberToTeam) {\n                inviteDivider = _react2.default.createElement('li', { className: 'divider' });\n            }\n\n            var teamDivider = null;\n            if (teamSettings || manageLink || teams) {\n                teamDivider = _react2.default.createElement('li', { className: 'divider' });\n            }\n\n            var backstageDivider = null;\n            if (integrationsLink || customEmoji) {\n                backstageDivider = _react2.default.createElement('li', { className: 'divider' });\n            }\n\n            var sysAdminDivider = null;\n            if (sysAdminLink) {\n                sysAdminDivider = _react2.default.createElement('li', { className: 'divider' });\n            }\n\n            var helpDivider = null;\n            if (helpLink || reportLink || nativeAppLink || about) {\n                helpDivider = _react2.default.createElement('li', { className: 'divider' });\n            }\n\n            var logoutDivider = null;\n            if (logout) {\n                logoutDivider = _react2.default.createElement('li', { className: 'divider' });\n            }\n\n            return _react2.default.createElement(\n                _reactBootstrap.Dropdown,\n                {\n                    id: 'sidebar-header-dropdown',\n                    defaultOpen: this.state.showDropdown,\n                    onClose: this.toggleDropdown,\n                    className: 'sidebar-header-dropdown',\n                    pullRight: true\n                },\n                _react2.default.createElement(_sidebar_header_dropdown_button2.default, {\n                    bsRole: 'toggle',\n                    onClick: this.toggleDropdown\n                }),\n                _react2.default.createElement(\n                    _reactBootstrap.Dropdown.Menu,\n                    null,\n                    accountSettings,\n                    inviteDivider,\n                    inviteLink,\n                    teamLink,\n                    addMemberToTeam,\n                    teamDivider,\n                    teamSettings,\n                    manageLink,\n                    teams,\n                    backstageDivider,\n                    integrationsLink,\n                    customEmoji,\n                    sysAdminDivider,\n                    sysAdminLink,\n                    helpDivider,\n                    helpLink,\n                    reportLink,\n                    nativeAppLink,\n                    about,\n                    logoutDivider,\n                    logout,\n                    _react2.default.createElement(_user_settings_modal2.default, {\n                        show: this.state.showUserSettingsModal,\n                        onModalDismissed: function onModalDismissed() {\n                            return _this2.setState({ showUserSettingsModal: false });\n                        }\n                    }),\n                    teamMembersModal,\n                    _react2.default.createElement(_about_build_modal2.default, {\n                        show: this.state.showAboutModal,\n                        onModalDismissed: this.aboutModalDismissed\n                    }),\n                    addUsersToTeamModal\n                )\n            );\n        }\n    }]);\n    return SidebarHeaderDropdown;\n}(_react2.default.Component);\n\nSidebarHeaderDropdown.propTypes = {\n    teamType: _react2.default.PropTypes.string,\n    teamDisplayName: _react2.default.PropTypes.string,\n    teamName: _react2.default.PropTypes.string,\n    currentUser: _react2.default.PropTypes.object\n};\nSidebarHeaderDropdown.defaultProps = {\n    teamType: ''\n};\nexports.default = SidebarHeaderDropdown;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))\n\n/***/ }),\n\n/***/ 2041:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getPrototypeOf = __webpack_require__(6);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(2);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(5);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(3);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = __webpack_require__(1);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _constants = __webpack_require__(8);\n\nvar _constants2 = _interopRequireDefault(_constants);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Copyright (c) 2015 Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nvar SidebarHeaderDropdownButton = function (_React$PureComponent) {\n    (0, _inherits3.default)(SidebarHeaderDropdownButton, _React$PureComponent);\n\n    function SidebarHeaderDropdownButton() {\n        (0, _classCallCheck3.default)(this, SidebarHeaderDropdownButton);\n        return (0, _possibleConstructorReturn3.default)(this, (SidebarHeaderDropdownButton.__proto__ || (0, _getPrototypeOf2.default)(SidebarHeaderDropdownButton)).apply(this, arguments));\n    }\n\n    (0, _createClass3.default)(SidebarHeaderDropdownButton, [{\n        key: 'render',\n        value: function render() {\n            return _react2.default.createElement(\n                'a',\n                {\n                    href: '#',\n                    id: 'sidebarHeaderDropdownButton',\n                    className: 'sidebar-header-dropdown__toggle',\n                    onClick: this.props.onClick\n                },\n                _react2.default.createElement('span', {\n                    className: 'sidebar-header-dropdown__icon',\n                    dangerouslySetInnerHTML: { __html: _constants2.default.MENU_ICON }\n                })\n            );\n        }\n    }]);\n    return SidebarHeaderDropdownButton;\n}(_react2.default.PureComponent);\n\nSidebarHeaderDropdownButton.propTypes = {\n    bsRole: _react2.default.PropTypes.oneOf(['toggle']).isRequired, // eslint-disable-line react/no-unused-prop-types\n    onClick: _react2.default.PropTypes.func.isRequired\n};\nexports.default = SidebarHeaderDropdownButton;\n\n/***/ }),\n\n/***/ 2051:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getPrototypeOf = __webpack_require__(6);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(2);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(5);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(3);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = __webpack_require__(1);\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar UnreadChannelIndicator = function (_React$Component) {\n    (0, _inherits3.default)(UnreadChannelIndicator, _React$Component);\n\n    function UnreadChannelIndicator() {\n        (0, _classCallCheck3.default)(this, UnreadChannelIndicator);\n        return (0, _possibleConstructorReturn3.default)(this, (UnreadChannelIndicator.__proto__ || (0, _getPrototypeOf2.default)(UnreadChannelIndicator)).apply(this, arguments));\n    }\n\n    (0, _createClass3.default)(UnreadChannelIndicator, [{\n        key: 'render',\n        value: function render() {\n            var displayValue = 'none';\n            if (this.props.show) {\n                displayValue = 'block';\n            }\n            return _react2.default.createElement(\n                'div',\n                {\n                    className: 'nav-pills__unread-indicator ' + this.props.extraClass,\n                    style: { display: displayValue }\n                },\n                this.props.text\n            );\n        }\n    }]);\n    return UnreadChannelIndicator;\n}(_react2.default.Component); // Copyright (c) 2015 Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\n// Indicator for the left sidebar which indicate if there's unread posts in a channel that is not shown\n// because it is either above or below the screen\n\n\nexports.default = UnreadChannelIndicator;\n\n\nUnreadChannelIndicator.defaultProps = {\n    show: false,\n    extraClass: '',\n    text: ''\n};\nUnreadChannelIndicator.propTypes = {\n    show: _react2.default.PropTypes.bool,\n    extraClass: _react2.default.PropTypes.string,\n    text: _react2.default.PropTypes.object\n};\n\n/***/ }),\n\n/***/ 2059:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__.p + \"files/2c9d31cec343005b617e3b39fdb20895.png\";\n\n/***/ }),\n\n/***/ 343:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _stringify = __webpack_require__(71);\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _extends2 = __webpack_require__(9);\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _assign = __webpack_require__(31);\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _keys = __webpack_require__(43);\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _map = __webpack_require__(72);\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _getPrototypeOf = __webpack_require__(6);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(2);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(5);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(3);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _jquery = __webpack_require__(0);\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _reactDom = __webpack_require__(30);\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _new_channel_flow = __webpack_require__(2020);\n\nvar _new_channel_flow2 = _interopRequireDefault(_new_channel_flow);\n\nvar _more_direct_channels = __webpack_require__(2018);\n\nvar _more_direct_channels2 = _interopRequireDefault(_more_direct_channels);\n\nvar _more_channels = __webpack_require__(2017);\n\nvar _more_channels2 = _interopRequireDefault(_more_channels);\n\nvar _sidebar_header = __webpack_require__(2039);\n\nvar _sidebar_header2 = _interopRequireDefault(_sidebar_header);\n\nvar _unread_channel_indicator = __webpack_require__(2051);\n\nvar _unread_channel_indicator2 = _interopRequireDefault(_unread_channel_indicator);\n\nvar _tutorial_tip = __webpack_require__(573);\n\nvar _tutorial_tip2 = _interopRequireDefault(_tutorial_tip);\n\nvar _status_icon = __webpack_require__(577);\n\nvar _status_icon2 = _interopRequireDefault(_status_icon);\n\nvar _channel_store = __webpack_require__(24);\n\nvar _channel_store2 = _interopRequireDefault(_channel_store);\n\nvar _user_store = __webpack_require__(15);\n\nvar _user_store2 = _interopRequireDefault(_user_store);\n\nvar _team_store = __webpack_require__(23);\n\nvar _team_store2 = _interopRequireDefault(_team_store);\n\nvar _preference_store = __webpack_require__(42);\n\nvar _preference_store2 = _interopRequireDefault(_preference_store);\n\nvar _modal_store = __webpack_require__(1661);\n\nvar _modal_store2 = _interopRequireDefault(_modal_store);\n\nvar _async_client = __webpack_require__(20);\n\nvar AsyncClient = _interopRequireWildcard(_async_client);\n\nvar _team_utils = __webpack_require__(570);\n\nvar _utils = __webpack_require__(11);\n\nvar Utils = _interopRequireWildcard(_utils);\n\nvar _channel_utils = __webpack_require__(81);\n\nvar ChannelUtils = _interopRequireWildcard(_channel_utils);\n\nvar _channel_actions = __webpack_require__(47);\n\nvar ChannelActions = _interopRequireWildcard(_channel_actions);\n\nvar _diagnostics_actions = __webpack_require__(165);\n\nvar _constants = __webpack_require__(8);\n\nvar _reactIntl = __webpack_require__(13);\n\nvar _reactBootstrap = __webpack_require__(27);\n\nvar _load = __webpack_require__(121);\n\nvar _load2 = _interopRequireDefault(_load);\n\nvar _react = __webpack_require__(1);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _es = __webpack_require__(37);\n\nvar _favicon16x = __webpack_require__(604);\n\nvar _favicon16x2 = _interopRequireDefault(_favicon16x);\n\nvar _redfavicon16x = __webpack_require__(2059);\n\nvar _redfavicon16x2 = _interopRequireDefault(_redfavicon16x);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Copyright (c) 2015 Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nvar Preferences = _constants.Constants.Preferences;\nvar TutorialSteps = _constants.Constants.TutorialSteps;\n\nvar Sidebar = function (_React$Component) {\n    (0, _inherits3.default)(Sidebar, _React$Component);\n\n    function Sidebar(props) {\n        (0, _classCallCheck3.default)(this, Sidebar);\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (Sidebar.__proto__ || (0, _getPrototypeOf2.default)(Sidebar)).call(this, props));\n\n        _this.badgesActive = false;\n        _this.firstUnreadChannel = null;\n        _this.lastUnreadChannel = null;\n\n        _this.getStateFromStores = _this.getStateFromStores.bind(_this);\n\n        _this.onChange = _this.onChange.bind(_this);\n        _this.onModalChange = _this.onModalChange.bind(_this);\n        _this.onInChannelChange = _this.onInChannelChange.bind(_this);\n        _this.onScroll = _this.onScroll.bind(_this);\n        _this.updateUnreadIndicators = _this.updateUnreadIndicators.bind(_this);\n        _this.handleLeaveDirectChannel = _this.handleLeaveDirectChannel.bind(_this);\n\n        _this.showMoreChannelsModal = _this.showMoreChannelsModal.bind(_this);\n        _this.hideMoreChannelsModal = _this.hideMoreChannelsModal.bind(_this);\n        _this.showNewChannelModal = _this.showNewChannelModal.bind(_this);\n        _this.hideNewChannelModal = _this.hideNewChannelModal.bind(_this);\n        _this.showMoreDirectChannelsModal = _this.showMoreDirectChannelsModal.bind(_this);\n        _this.hideMoreDirectChannelsModal = _this.hideMoreDirectChannelsModal.bind(_this);\n\n        _this.createChannelElement = _this.createChannelElement.bind(_this);\n        _this.updateTitle = _this.updateTitle.bind(_this);\n\n        _this.navigateChannelShortcut = _this.navigateChannelShortcut.bind(_this);\n        _this.navigateUnreadChannelShortcut = _this.navigateUnreadChannelShortcut.bind(_this);\n        _this.getDisplayedChannels = _this.getDisplayedChannels.bind(_this);\n        _this.updateScrollbarOnChannelChange = _this.updateScrollbarOnChannelChange.bind(_this);\n\n        _this.isLeaving = new _map2.default();\n        _this.isSwitchingChannel = false;\n        _this.closedDirectChannel = false;\n\n        var state = _this.getStateFromStores();\n        state.newChannelModalType = '';\n        state.showDirectChannelsModal = false;\n        state.showMoreChannelsModal = false;\n        state.loadingDMChannel = -1;\n        state.inChannelChange = false;\n        _this.state = state;\n        return _this;\n    }\n\n    (0, _createClass3.default)(Sidebar, [{\n        key: 'getTotalUnreadCount',\n        value: function getTotalUnreadCount() {\n            var _this2 = this;\n\n            var msgs = 0;\n            var mentions = 0;\n            var unreadCounts = this.state.unreadCounts;\n            var teamMembers = this.state.teamMembers;\n\n            teamMembers.forEach(function (member) {\n                if (member.team_id !== _this2.state.currentTeam.id) {\n                    msgs += member.msg_count || 0;\n                    mentions += member.mention_count || 0;\n                }\n            });\n\n            (0, _keys2.default)(unreadCounts).forEach(function (chId) {\n                var channel = _channel_store2.default.get(chId);\n\n                if (channel && (channel.type === _constants.Constants.DM_CHANNEL || channel.type === _constants.Constants.GM_CHANNEL || channel.team_id === _this2.state.currentTeam.id)) {\n                    msgs += unreadCounts[chId].msgs;\n                    mentions += unreadCounts[chId].mentions;\n                }\n            });\n\n            return { msgs: msgs, mentions: mentions };\n        }\n    }, {\n        key: 'getStateFromStores',\n        value: function getStateFromStores() {\n            var members = _channel_store2.default.getMyMembers();\n            var teamMembers = _team_store2.default.getMyTeamMembers();\n            var currentChannelId = _channel_store2.default.getCurrentId();\n            var tutorialStep = _preference_store2.default.getInt(Preferences.TUTORIAL_STEP, _user_store2.default.getCurrentId(), 999);\n\n            var allChannels = _channel_store2.default.getAll().map(function (channel) {\n                return (0, _assign2.default)({}, channel);\n            });\n            var channelList = ChannelUtils.buildDisplayableChannelList(allChannels);\n\n            return (0, _extends3.default)({\n                activeId: currentChannelId,\n                members: members,\n                teamMembers: teamMembers\n            }, channelList, {\n                unreadCounts: JSON.parse((0, _stringify2.default)(_channel_store2.default.getUnreadCounts())),\n                showTutorialTip: tutorialStep === TutorialSteps.CHANNEL_POPOVER,\n                currentTeam: _team_store2.default.getCurrent(),\n                currentUser: _user_store2.default.getCurrentUser(),\n                townSquare: _channel_store2.default.getByName(_constants.Constants.DEFAULT_CHANNEL),\n                offTopic: _channel_store2.default.getByName(_constants.Constants.OFFTOPIC_CHANNEL)\n            });\n        }\n    }, {\n        key: 'onInChannelChange',\n        value: function onInChannelChange() {\n            this.setState({ inChannelChange: !this.state.inChannelChange });\n        }\n    }, {\n        key: 'componentDidMount',\n        value: function componentDidMount() {\n            _channel_store2.default.addChangeListener(this.onChange);\n            _user_store2.default.addChangeListener(this.onChange);\n            _user_store2.default.addInTeamChangeListener(this.onChange);\n            _user_store2.default.addInChannelChangeListener(this.onInChannelChange);\n            _user_store2.default.addStatusesChangeListener(this.onChange);\n            _team_store2.default.addChangeListener(this.onChange);\n            _preference_store2.default.addChangeListener(this.onChange);\n            _modal_store2.default.addModalListener(_constants.ActionTypes.TOGGLE_DM_MODAL, this.onModalChange);\n\n            this.updateTitle();\n            this.updateUnreadIndicators();\n\n            document.addEventListener('keydown', this.navigateChannelShortcut);\n            document.addEventListener('keydown', this.navigateUnreadChannelShortcut);\n        }\n    }, {\n        key: 'shouldComponentUpdate',\n        value: function shouldComponentUpdate(nextProps, nextState) {\n            if (!Utils.areObjectsEqual(nextState, this.state)) {\n                return true;\n            }\n            return false;\n        }\n    }, {\n        key: 'componentDidUpdate',\n        value: function componentDidUpdate(prevProps, prevState) {\n            this.updateTitle();\n            this.updateUnreadIndicators();\n            if (!Utils.isMobile()) {\n                (0, _jquery2.default)('.sidebar--left .nav-pills__container').perfectScrollbar();\n            }\n\n            // reset the scrollbar upon switching teams\n            if (this.state.currentTeam !== prevState.currentTeam) {\n                this.refs.container.scrollTop = 0;\n                (0, _jquery2.default)('.nav-pills__container').perfectScrollbar('update');\n            }\n\n            // close the LHS on mobile when you change channels\n            if (this.state.activeId !== prevState.activeId) {\n                if (this.closedDirectChannel) {\n                    this.closedDirectChannel = false;\n                } else {\n                    (0, _jquery2.default)('.app__body .inner-wrap').removeClass('move--right');\n                    (0, _jquery2.default)('.app__body .sidebar--left').removeClass('move--right');\n                    (0, _jquery2.default)('.multi-teams .team-sidebar').removeClass('move--right');\n                }\n            }\n        }\n    }, {\n        key: 'componentWillUnmount',\n        value: function componentWillUnmount() {\n            _channel_store2.default.removeChangeListener(this.onChange);\n            _user_store2.default.removeChangeListener(this.onChange);\n            _user_store2.default.removeInTeamChangeListener(this.onChange);\n            _user_store2.default.removeInChannelChangeListener(this.onChange);\n            _user_store2.default.removeStatusesChangeListener(this.onChange);\n            _team_store2.default.removeChangeListener(this.onChange);\n            _preference_store2.default.removeChangeListener(this.onChange);\n            _modal_store2.default.removeModalListener(_constants.ActionTypes.TOGGLE_DM_MODAL, this.onModalChange);\n            document.removeEventListener('keydown', this.navigateChannelShortcut);\n            document.removeEventListener('keydown', this.navigateUnreadChannelShortcut);\n        }\n    }, {\n        key: 'onModalChange',\n        value: function onModalChange(value, args) {\n            this.showMoreDirectChannelsModal(args.startingUsers);\n        }\n    }, {\n        key: 'onChange',\n        value: function onChange() {\n            if (this.state.currentTeam.id !== _team_store2.default.getCurrentId()) {\n                _channel_store2.default.clear();\n            }\n            this.setState(this.getStateFromStores());\n            this.updateTitle();\n        }\n    }, {\n        key: 'updateTitle',\n        value: function updateTitle() {\n            var channel = _channel_store2.default.getCurrent();\n            if (channel && this.state.currentTeam) {\n                var currentSiteName = '';\n                if (global.window.mm_config.SiteName != null) {\n                    currentSiteName = global.window.mm_config.SiteName;\n                }\n\n                var currentChannelName = channel.display_name;\n                if (channel.type === _constants.Constants.DM_CHANNEL) {\n                    var teammate = Utils.getDirectTeammate(channel.id);\n                    if (teammate != null) {\n                        currentChannelName = teammate.username;\n                    }\n                } else if (channel.type === _constants.Constants.GM_CHANNEL) {\n                    currentChannelName = ChannelUtils.buildGroupChannelName(channel.id);\n                }\n\n                var unread = this.getTotalUnreadCount();\n                var mentionTitle = unread.mentions > 0 ? '(' + unread.mentions + ') ' : '';\n                var unreadTitle = unread.msgs > 0 ? '* ' : '';\n                document.title = mentionTitle + unreadTitle + currentChannelName + ' - ' + this.state.currentTeam.display_name + ' ' + currentSiteName;\n            }\n        }\n    }, {\n        key: 'onScroll',\n        value: function onScroll() {\n            this.updateUnreadIndicators();\n        }\n    }, {\n        key: 'updateUnreadIndicators',\n        value: function updateUnreadIndicators() {\n            var container = (0, _jquery2.default)(_reactDom2.default.findDOMNode(this.refs.container));\n\n            var showTopUnread = false;\n            var showBottomUnread = false;\n\n            if (this.firstUnreadChannel) {\n                var firstUnreadElement = (0, _jquery2.default)(_reactDom2.default.findDOMNode(this.refs[this.firstUnreadChannel]));\n\n                if (firstUnreadElement.position().top + firstUnreadElement.height() < 0) {\n                    showTopUnread = true;\n                }\n            }\n\n            if (this.lastUnreadChannel) {\n                var lastUnreadElement = (0, _jquery2.default)(_reactDom2.default.findDOMNode(this.refs[this.lastUnreadChannel]));\n\n                if (lastUnreadElement.position().top > container.height()) {\n                    showBottomUnread = true;\n                }\n            }\n\n            this.setState({\n                showTopUnread: showTopUnread,\n                showBottomUnread: showBottomUnread\n            });\n        }\n    }, {\n        key: 'updateScrollbarOnChannelChange',\n        value: function updateScrollbarOnChannelChange(channel) {\n            var curChannel = this.refs[channel.name].getBoundingClientRect();\n            if (curChannel.top - _constants.Constants.CHANNEL_SCROLL_ADJUSTMENT < 0 || curChannel.top + curChannel.height > this.refs.container.getBoundingClientRect().height) {\n                this.refs.container.scrollTop = this.refs.container.scrollTop + (curChannel.top - _constants.Constants.CHANNEL_SCROLL_ADJUSTMENT);\n                (0, _jquery2.default)('.nav-pills__container').perfectScrollbar('update');\n            }\n        }\n    }, {\n        key: 'navigateChannelShortcut',\n        value: function navigateChannelShortcut(e) {\n            if (e.altKey && !e.shiftKey && (e.keyCode === _constants.Constants.KeyCodes.UP || e.keyCode === _constants.Constants.KeyCodes.DOWN)) {\n                e.preventDefault();\n\n                if (this.isSwitchingChannel) {\n                    return;\n                }\n\n                this.isSwitchingChannel = true;\n                var allChannels = this.getDisplayedChannels();\n                var curChannelId = this.state.activeId;\n                var curIndex = -1;\n                for (var i = 0; i < allChannels.length; i++) {\n                    if (allChannels[i].id === curChannelId) {\n                        curIndex = i;\n                    }\n                }\n                var nextChannel = allChannels[curIndex];\n                var nextIndex = curIndex;\n                if (e.keyCode === _constants.Constants.KeyCodes.DOWN) {\n                    nextIndex = curIndex + 1;\n                } else if (e.keyCode === _constants.Constants.KeyCodes.UP) {\n                    nextIndex = curIndex - 1;\n                }\n                nextChannel = allChannels[Utils.mod(nextIndex, allChannels.length)];\n                ChannelActions.goToChannel(nextChannel);\n                this.updateScrollbarOnChannelChange(nextChannel);\n                this.isSwitchingChannel = false;\n            }\n        }\n    }, {\n        key: 'navigateUnreadChannelShortcut',\n        value: function navigateUnreadChannelShortcut(e) {\n            if (e.altKey && e.shiftKey && (e.keyCode === _constants.Constants.KeyCodes.UP || e.keyCode === _constants.Constants.KeyCodes.DOWN)) {\n                e.preventDefault();\n\n                if (this.isSwitchingChannel) {\n                    return;\n                }\n\n                this.isSwitchingChannel = true;\n                var allChannels = this.getDisplayedChannels();\n                var curChannelId = this.state.activeId;\n                var curIndex = -1;\n                for (var i = 0; i < allChannels.length; i++) {\n                    if (allChannels[i].id === curChannelId) {\n                        curIndex = i;\n                    }\n                }\n                var nextChannel = allChannels[curIndex];\n                var nextIndex = curIndex;\n                var count = 0;\n                var increment = 0;\n                if (e.keyCode === _constants.Constants.KeyCodes.UP) {\n                    increment = -1;\n                } else if (e.keyCode === _constants.Constants.KeyCodes.DOWN) {\n                    increment = 1;\n                }\n                var unreadCounts = _channel_store2.default.getUnreadCount(allChannels[nextIndex].id);\n                while (count < allChannels.length && unreadCounts.msgs === 0 && unreadCounts.mentions === 0) {\n                    nextIndex += increment;\n                    count++;\n                    nextIndex = Utils.mod(nextIndex, allChannels.length);\n                    unreadCounts = _channel_store2.default.getUnreadCount(allChannels[nextIndex].id);\n                }\n                if (unreadCounts.msgs !== 0 || unreadCounts.mentions !== 0) {\n                    nextChannel = allChannels[nextIndex];\n                    ChannelActions.goToChannel(nextChannel);\n                    this.updateScrollbarOnChannelChange(nextChannel);\n                }\n                this.isSwitchingChannel = false;\n            }\n        }\n    }, {\n        key: 'getDisplayedChannels',\n        value: function getDisplayedChannels() {\n            return this.state.favoriteChannels.concat(this.state.publicChannels).concat(this.state.privateChannels).concat(this.state.directAndGroupChannels);\n        }\n    }, {\n        key: 'handleLeaveDirectChannel',\n        value: function handleLeaveDirectChannel(e, channel) {\n            var _this3 = this;\n\n            e.preventDefault();\n\n            if (!this.isLeaving.get(channel.id)) {\n                this.isLeaving.set(channel.id, true);\n\n                var id = void 0;\n                var category = void 0;\n                if (channel.type === _constants.Constants.DM_CHANNEL) {\n                    id = channel.teammate_id;\n                    category = _constants.Constants.Preferences.CATEGORY_DIRECT_CHANNEL_SHOW;\n                } else {\n                    id = channel.id;\n                    category = _constants.Constants.Preferences.CATEGORY_GROUP_CHANNEL_SHOW;\n                }\n\n                AsyncClient.savePreference(category, id, 'false', function () {\n                    _this3.isLeaving.set(channel.id, false);\n                }, function () {\n                    _this3.isLeaving.set(channel.id, false);\n                });\n\n                if (ChannelUtils.isFavoriteChannel(channel)) {\n                    ChannelActions.unmarkFavorite(channel.id);\n                }\n\n                this.setState(this.getStateFromStores());\n            }\n\n            if (channel.id === this.state.activeId) {\n                this.closedDirectChannel = true;\n                _es.browserHistory.push('/' + this.state.currentTeam.name + '/channels/town-square');\n            }\n        }\n    }, {\n        key: 'showMoreChannelsModal',\n        value: function showMoreChannelsModal() {\n            this.setState({ showMoreChannelsModal: true });\n            (0, _diagnostics_actions.trackEvent)('ui', 'ui_channels_more_public');\n        }\n    }, {\n        key: 'hideMoreChannelsModal',\n        value: function hideMoreChannelsModal() {\n            this.setState({ showMoreChannelsModal: false });\n        }\n    }, {\n        key: 'showNewChannelModal',\n        value: function showNewChannelModal(type) {\n            this.setState({ newChannelModalType: type });\n        }\n    }, {\n        key: 'hideNewChannelModal',\n        value: function hideNewChannelModal() {\n            this.setState({ newChannelModalType: '' });\n        }\n    }, {\n        key: 'showMoreDirectChannelsModal',\n        value: function showMoreDirectChannelsModal(startingUsers) {\n            (0, _diagnostics_actions.trackEvent)('ui', 'ui_channels_more_direct');\n            this.setState({ showDirectChannelsModal: true, startingUsers: startingUsers });\n        }\n    }, {\n        key: 'hideMoreDirectChannelsModal',\n        value: function hideMoreDirectChannelsModal() {\n            this.setState({ showDirectChannelsModal: false, startingUsers: null });\n        }\n    }, {\n        key: 'openLeftSidebar',\n        value: function openLeftSidebar() {\n            if (Utils.isMobile()) {\n                setTimeout(function () {\n                    document.querySelector('.app__body .inner-wrap').classList.add('move--right');\n                    document.querySelector('.app__body .sidebar--left').classList.add('move--right');\n                });\n            }\n        }\n    }, {\n        key: 'createTutorialTip',\n        value: function createTutorialTip() {\n            var screens = [];\n\n            var townSquareDisplayName = _constants.Constants.DEFAULT_CHANNEL_UI_NAME;\n            if (this.state.townSquare) {\n                townSquareDisplayName = this.state.townSquare.display_name;\n            }\n\n            var offTopicDisplayName = _constants.Constants.OFFTOPIC_CHANNEL_UI_NAME;\n            if (this.state.offTopic) {\n                offTopicDisplayName = this.state.offTopic.display_name;\n            }\n\n            screens.push(_react2.default.createElement(\n                'div',\n                null,\n                _react2.default.createElement(_reactIntl.FormattedHTMLMessage, {\n                    id: 'sidebar.tutorialScreen1',\n                    defaultMessage: '<h4>Channels</h4><p><strong>Channels</strong> organize conversations across different topics. They\\u2019re open to everyone on your team. To send private communications use <strong>Direct Messages</strong> for a single person or <strong>Private Channels</strong> for multiple people.</p>'\n                })\n            ));\n\n            screens.push(_react2.default.createElement(\n                'div',\n                null,\n                _react2.default.createElement(_reactIntl.FormattedHTMLMessage, {\n                    id: 'sidebar.tutorialScreen2',\n                    defaultMessage: '<h4>\"{townsquare}\" and \"{offtopic}\" channels</h4> <p>Here are two public channels to start:</p> <p><strong>{townsquare}</strong> is a place for team-wide communication. Everyone in your team is a member of this channel.</p> <p><strong>{offtopic}</strong> is a place for fun and humor outside of work-related channels. You and your team can decide what other channels to create.</p>',\n                    values: {\n                        townsquare: townSquareDisplayName,\n                        offtopic: offTopicDisplayName\n                    }\n                })\n            ));\n\n            screens.push(_react2.default.createElement(\n                'div',\n                null,\n                _react2.default.createElement(_reactIntl.FormattedHTMLMessage, {\n                    id: 'sidebar.tutorialScreen3',\n                    defaultMessage: '<h4>Creating and Joining Channels</h4> <p>Click <strong>\"More...\"</strong> to create a new channel or join an existing one.</p> <p>You can also create a new public or private channel by clicking the <strong>\"+\" symbol</strong> next to the public or private channel header.</p>'\n                })\n            ));\n\n            return _react2.default.createElement(_tutorial_tip2.default, {\n                placement: 'right',\n                screens: screens,\n                overlayClass: 'tip-overlay--sidebar',\n                diagnosticsTag: 'tutorial_tip_2_channels'\n            });\n        }\n    }, {\n        key: 'createChannelElement',\n        value: function createChannelElement(channel, index, arr, handleClose) {\n            var members = this.state.members;\n            var activeId = this.state.activeId;\n            var channelMember = members[channel.id];\n            var unreadCount = this.state.unreadCounts[channel.id] || { msgs: 0, mentions: 0 };\n            var msgCount = void 0;\n\n            var linkClass = '';\n            if (channel.id === activeId) {\n                linkClass = 'active';\n            }\n\n            var rowClass = 'sidebar-channel';\n\n            var unread = false;\n            if (channelMember) {\n                msgCount = unreadCount.msgs + unreadCount.mentions;\n                unread = msgCount > 0 || channelMember.mention_count > 0;\n            }\n\n            if (unread) {\n                rowClass += ' unread-title';\n\n                if (channel.id !== activeId) {\n                    if (!this.firstUnreadChannel) {\n                        this.firstUnreadChannel = channel.name;\n                    }\n                    this.lastUnreadChannel = channel.name;\n                }\n            }\n\n            var badge = null;\n            if (channelMember) {\n                if (unreadCount.mentions) {\n                    badge = _react2.default.createElement(\n                        'span',\n                        { className: 'badge pull-right small' },\n                        unreadCount.mentions\n                    );\n                    this.badgesActive = true;\n                }\n            } else if (this.state.loadingDMChannel === index && channel.type === _constants.Constants.DM_CHANNEL) {\n                badge = _react2.default.createElement('img', {\n                    className: 'channel-loading-gif pull-right',\n                    src: _load2.default\n                });\n            }\n\n            if (msgCount > 0) {\n                rowClass += ' has-badge';\n            }\n\n            var displayName = channel.display_name;\n\n            var icon = null;\n            if (channel.type === _constants.Constants.OPEN_CHANNEL) {\n                icon = _react2.default.createElement(\n                    'div',\n                    { className: 'status' },\n                    _react2.default.createElement('i', { className: 'fa fa-globe' })\n                );\n            } else if (channel.type === _constants.Constants.PRIVATE_CHANNEL) {\n                icon = _react2.default.createElement(\n                    'div',\n                    { className: 'status' },\n                    _react2.default.createElement('i', { className: 'fa fa-lock' })\n                );\n            } else if (channel.type === _constants.Constants.GM_CHANNEL) {\n                displayName = ChannelUtils.buildGroupChannelName(channel.id);\n                icon = _react2.default.createElement(\n                    'div',\n                    { className: 'status status--group' },\n                    _user_store2.default.getProfileListInChannel(channel.id, true).length\n                );\n            } else {\n                // set up status icon for direct message channels (status is null for other channel types)\n                icon = _react2.default.createElement(_status_icon2.default, {\n                    type: 'avatar',\n                    status: channel.status\n                });\n            }\n\n            var closeButton = null;\n            var removeTooltip = _react2.default.createElement(\n                _reactBootstrap.Tooltip,\n                { id: 'remove-dm-tooltip' },\n                _react2.default.createElement(_reactIntl.FormattedMessage, {\n                    id: 'sidebar.removeList',\n                    defaultMessage: 'Remove from list'\n                })\n            );\n            if (handleClose && !badge) {\n                closeButton = _react2.default.createElement(\n                    _reactBootstrap.OverlayTrigger,\n                    {\n                        delayShow: 1000,\n                        placement: 'top',\n                        overlay: removeTooltip\n                    },\n                    _react2.default.createElement(\n                        'span',\n                        {\n                            onClick: function onClick(e) {\n                                return handleClose(e, channel);\n                            },\n                            className: 'btn-close'\n                        },\n                        '×'\n                    )\n                );\n\n                rowClass += ' has-close';\n            }\n\n            var tutorialTip = null;\n            if (this.state.showTutorialTip && channel.name === _constants.Constants.DEFAULT_CHANNEL) {\n                tutorialTip = this.createTutorialTip();\n                this.openLeftSidebar();\n            }\n\n            var link = '';\n            if (channel.fake) {\n                link = '/' + this.state.currentTeam.name + '/channels/' + channel.name + '?fakechannel=' + encodeURIComponent((0, _stringify2.default)(channel));\n            } else {\n                link = '/' + this.state.currentTeam.name + '/channels/' + channel.name;\n            }\n\n            return _react2.default.createElement(\n                'li',\n                {\n                    key: channel.name,\n                    ref: channel.name,\n                    className: linkClass\n                },\n                _react2.default.createElement(\n                    _es.Link,\n                    {\n                        to: link,\n                        className: rowClass,\n                        onClick: this.trackChannelSelectedEvent\n                    },\n                    icon,\n                    displayName,\n                    badge,\n                    closeButton\n                ),\n                tutorialTip\n            );\n        }\n    }, {\n        key: 'trackChannelSelectedEvent',\n        value: function trackChannelSelectedEvent() {\n            (0, _diagnostics_actions.trackEvent)('ui', 'ui_channel_selected');\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var _this4 = this;\n\n            // Check if we have all info needed to render\n            if (this.state.currentTeam == null || this.state.currentUser == null) {\n                return _react2.default.createElement('div', null);\n            }\n\n            this.lastBadgesActive = this.badgesActive;\n            this.badgesActive = false;\n\n            // keep track of the first and last unread channels so we can use them to set the unread indicators\n            this.firstUnreadChannel = null;\n            this.lastUnreadChannel = null;\n\n            // create elements for all 4 types of channels\n            var favoriteItems = this.state.favoriteChannels.sort(_team_utils.sortTeamsByDisplayName).map(function (channel, index, arr) {\n                if (channel.type === _constants.Constants.DM_CHANNEL) {\n                    return _this4.createChannelElement(channel, index, arr, _this4.handleLeaveDirectChannel);\n                }\n\n                return _this4.createChannelElement(channel);\n            });\n\n            var publicChannelItems = this.state.publicChannels.map(this.createChannelElement);\n\n            var privateChannelItems = this.state.privateChannels.map(this.createChannelElement);\n\n            var directMessageItems = this.state.directAndGroupChannels.map(function (channel, index, arr) {\n                return _this4.createChannelElement(channel, index, arr, _this4.handleLeaveDirectChannel);\n            });\n\n            // update the favicon to show if there are any notifications\n            if (this.lastBadgesActive !== this.badgesActive) {\n                var link = document.createElement('link');\n                link.type = 'image/x-icon';\n                link.rel = 'shortcut icon';\n                link.id = 'favicon';\n                if (this.badgesActive) {\n                    link.href = _redfavicon16x2.default;\n                } else {\n                    link.href = _favicon16x2.default;\n                }\n                var head = document.getElementsByTagName('head')[0];\n                var oldLink = document.getElementById('favicon');\n                if (oldLink) {\n                    head.removeChild(oldLink);\n                }\n                head.appendChild(link);\n            }\n\n            var directMessageMore = _react2.default.createElement(\n                'li',\n                { key: 'more' },\n                _react2.default.createElement(\n                    'a',\n                    {\n                        href: '#',\n                        onClick: function onClick(e) {\n                            e.preventDefault();\n                            _this4.showMoreDirectChannelsModal();\n                        }\n                    },\n                    _react2.default.createElement(_reactIntl.FormattedMessage, {\n                        id: 'sidebar.moreElips',\n                        defaultMessage: 'More...'\n                    })\n                )\n            );\n\n            var showChannelModal = false;\n            if (this.state.newChannelModalType !== '') {\n                showChannelModal = true;\n            }\n\n            var createChannelTootlip = _react2.default.createElement(\n                _reactBootstrap.Tooltip,\n                { id: 'new-channel-tooltip' },\n                _react2.default.createElement(_reactIntl.FormattedMessage, {\n                    id: 'sidebar.createChannel',\n                    defaultMessage: 'Create new public channel'\n                })\n            );\n            var createGroupTootlip = _react2.default.createElement(\n                _reactBootstrap.Tooltip,\n                { id: 'new-group-tooltip' },\n                _react2.default.createElement(_reactIntl.FormattedMessage, {\n                    id: 'sidebar.createGroup',\n                    defaultMessage: 'Create new private channel'\n                })\n            );\n\n            var above = _react2.default.createElement(_reactIntl.FormattedMessage, {\n                id: 'sidebar.unreadAbove',\n                defaultMessage: 'Unread post(s) above'\n            });\n\n            var below = _react2.default.createElement(_reactIntl.FormattedMessage, {\n                id: 'sidebar.unreadBelow',\n                defaultMessage: 'Unread post(s) below'\n            });\n\n            var isAdmin = _team_store2.default.isTeamAdminForCurrentTeam() || _user_store2.default.isSystemAdminForCurrentUser();\n            var isSystemAdmin = _user_store2.default.isSystemAdminForCurrentUser();\n\n            var createPublicChannelIcon = _react2.default.createElement(\n                _reactBootstrap.OverlayTrigger,\n                {\n                    delayShow: 500,\n                    placement: 'top',\n                    overlay: createChannelTootlip\n                },\n                _react2.default.createElement(\n                    'a',\n                    {\n                        className: 'add-channel-btn',\n                        href: '#',\n                        onClick: this.showNewChannelModal.bind(this, _constants.Constants.OPEN_CHANNEL)\n                    },\n                    '+'\n                )\n            );\n\n            var createPrivateChannelIcon = _react2.default.createElement(\n                _reactBootstrap.OverlayTrigger,\n                {\n                    delayShow: 500,\n                    placement: 'top',\n                    overlay: createGroupTootlip\n                },\n                _react2.default.createElement(\n                    'a',\n                    {\n                        className: 'add-channel-btn',\n                        href: '#',\n                        onClick: this.showNewChannelModal.bind(this, _constants.Constants.PRIVATE_CHANNEL)\n                    },\n                    '+'\n                )\n            );\n\n            if (!ChannelUtils.showCreateOption(_constants.Constants.OPEN_CHANNEL, isAdmin, isSystemAdmin)) {\n                createPublicChannelIcon = null;\n            }\n\n            if (!ChannelUtils.showCreateOption(_constants.Constants.PRIVATE_CHANNEL, isAdmin, isSystemAdmin)) {\n                createPrivateChannelIcon = null;\n            }\n\n            var moreDirectChannelsModal = void 0;\n            if (this.state.showDirectChannelsModal) {\n                moreDirectChannelsModal = _react2.default.createElement(_more_direct_channels2.default, {\n                    onModalDismissed: this.hideMoreDirectChannelsModal,\n                    startingUsers: this.state.startingUsers\n                });\n            }\n\n            var moreChannelsModal = void 0;\n            if (this.state.showMoreChannelsModal) {\n                moreChannelsModal = _react2.default.createElement(_more_channels2.default, {\n                    onModalDismissed: this.hideMoreChannelsModal,\n                    handleNewChannel: function handleNewChannel() {\n                        _this4.hideMoreChannelsModal();\n                        _this4.showNewChannelModal(_constants.Constants.OPEN_CHANNEL);\n                    }\n                });\n            }\n\n            return _react2.default.createElement(\n                'div',\n                {\n                    className: 'sidebar--left',\n                    id: 'sidebar-left',\n                    key: 'sidebar-left'\n                },\n                _react2.default.createElement(_new_channel_flow2.default, {\n                    show: showChannelModal,\n                    channelType: this.state.newChannelModalType,\n                    onModalDismissed: this.hideNewChannelModal\n                }),\n                moreDirectChannelsModal,\n                moreChannelsModal,\n                _react2.default.createElement(_sidebar_header2.default, {\n                    teamDisplayName: this.state.currentTeam.display_name,\n                    teamDescription: this.state.currentTeam.description,\n                    teamName: this.state.currentTeam.name,\n                    teamType: this.state.currentTeam.type,\n                    currentUser: this.state.currentUser\n                }),\n                _react2.default.createElement(_unread_channel_indicator2.default, {\n                    show: this.state.showTopUnread,\n                    extraClass: 'nav-pills__unread-indicator-top',\n                    text: above\n                }),\n                _react2.default.createElement(_unread_channel_indicator2.default, {\n                    show: this.state.showBottomUnread,\n                    extraClass: 'nav-pills__unread-indicator-bottom',\n                    text: below\n                }),\n                _react2.default.createElement(\n                    'div',\n                    {\n                        ref: 'container',\n                        className: 'nav-pills__container',\n                        onScroll: this.onScroll\n                    },\n                    favoriteItems.length !== 0 && _react2.default.createElement(\n                        'ul',\n                        { className: 'nav nav-pills nav-stacked' },\n                        _react2.default.createElement(\n                            'li',\n                            null,\n                            _react2.default.createElement(\n                                'h4',\n                                null,\n                                _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                    id: 'sidebar.favorite',\n                                    defaultMessage: 'Favorites'\n                                })\n                            )\n                        ),\n                        favoriteItems\n                    ),\n                    _react2.default.createElement(\n                        'ul',\n                        { className: 'nav nav-pills nav-stacked' },\n                        _react2.default.createElement(\n                            'li',\n                            null,\n                            _react2.default.createElement(\n                                'h4',\n                                null,\n                                _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                    id: 'sidebar.channels',\n                                    defaultMessage: 'Channels'\n                                }),\n                                createPublicChannelIcon\n                            )\n                        ),\n                        publicChannelItems,\n                        _react2.default.createElement(\n                            'li',\n                            null,\n                            _react2.default.createElement(\n                                'a',\n                                {\n                                    href: '#',\n                                    className: 'nav-more',\n                                    onClick: this.showMoreChannelsModal\n                                },\n                                _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                    id: 'sidebar.moreElips',\n                                    defaultMessage: 'More...'\n                                })\n                            )\n                        )\n                    ),\n                    _react2.default.createElement(\n                        'ul',\n                        { className: 'nav nav-pills nav-stacked' },\n                        _react2.default.createElement(\n                            'li',\n                            null,\n                            _react2.default.createElement(\n                                'h4',\n                                null,\n                                _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                    id: 'sidebar.pg',\n                                    defaultMessage: 'Private Channels'\n                                }),\n                                createPrivateChannelIcon\n                            )\n                        ),\n                        privateChannelItems\n                    ),\n                    _react2.default.createElement(\n                        'ul',\n                        { className: 'nav nav-pills nav-stacked' },\n                        _react2.default.createElement(\n                            'li',\n                            null,\n                            _react2.default.createElement(\n                                'h4',\n                                null,\n                                _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                    id: 'sidebar.direct',\n                                    defaultMessage: 'Direct Messages'\n                                })\n                            )\n                        ),\n                        directMessageItems,\n                        directMessageMore\n                    )\n                )\n            );\n        }\n    }]);\n    return Sidebar;\n}(_react2.default.Component);\n\nexports.default = Sidebar;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// 0.473cc1cc7583c31e1f16.js","// Copyright (c) 2015 Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nimport ReactDOM from 'react-dom';\nimport Constants from 'utils/constants.jsx';\nimport {Modal, Tooltip, OverlayTrigger} from 'react-bootstrap';\nimport TeamStore from 'stores/team_store.jsx';\nimport * as URL from 'utils/url.jsx';\n\nimport {FormattedMessage} from 'react-intl';\n\nimport React from 'react';\n\nexport default class ChangeUrlModal extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.onURLChanged = this.onURLChanged.bind(this);\n        this.doSubmit = this.doSubmit.bind(this);\n        this.doCancel = this.doCancel.bind(this);\n\n        this.state = {\n            currentURL: props.currentURL,\n            urlError: '',\n            userEdit: false\n        };\n    }\n\n    componentWillReceiveProps(nextProps) {\n        // This check prevents the url being deleted when we re-render\n        // because of user status check\n        if (!this.state.userEdit) {\n            this.setState({\n                currentURL: nextProps.currentURL\n            });\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.show === true && prevProps.show === false) {\n            ReactDOM.findDOMNode(this.refs.urlinput).select();\n        }\n    }\n\n    onURLChanged(e) {\n        const url = e.target.value.trim();\n        this.setState({currentURL: url.replace(/[^A-Za-z0-9-_]/g, '').toLowerCase(), userEdit: true});\n    }\n\n    getURLError(url) {\n        let error = []; //eslint-disable-line prefer-const\n        if (url.length < 2) {\n            error.push(\n                <span key='error1'>\n                    <FormattedMessage\n                        id='change_url.longer'\n                        defaultMessage='URL must be two or more characters.'\n                    />\n                    <br/>\n                </span>\n            );\n        }\n        if (url.charAt(0) === '-' || url.charAt(0) === '_') {\n            error.push(\n                <span key='error2'>\n                    <FormattedMessage\n                        id='change_url.startWithLetter'\n                        defaultMessage='URL must start with a letter or number.'\n                    />\n                    <br/>\n                </span>\n            );\n        }\n        if (url.length > 1 && (url.charAt(url.length - 1) === '-' || url.charAt(url.length - 1) === '_')) {\n            error.push(\n                <span key='error3'>\n                    <FormattedMessage\n                        id='change_url.endWithLetter'\n                        defaultMessage='URL must end with a letter or number.'\n                    />\n                    <br/>\n                </span>);\n        }\n        if (url.indexOf('__') > -1) {\n            error.push(\n                <span key='error4'>\n                    <FormattedMessage\n                        id='change_url.noUnderscore'\n                        defaultMessage='URL can not contain two underscores in a row.'\n                    />\n                    <br/>\n                </span>);\n        }\n\n        // In case of error we don't detect\n        if (error.length === 0) {\n            error.push(\n                <span key='errorlast'>\n                    <FormattedMessage\n                        id='change_url.invalidUrl'\n                        defaultMessage='Invalid URL'\n                    />\n                    <br/>\n                </span>);\n        }\n        return error;\n    }\n\n    doSubmit(e) {\n        e.preventDefault();\n\n        const url = ReactDOM.findDOMNode(this.refs.urlinput).value;\n        const cleanedURL = URL.cleanUpUrlable(url);\n        if (cleanedURL !== url || url.length < 2 || url.indexOf('__') > -1) {\n            this.setState({urlError: this.getURLError(url)});\n            return;\n        }\n        this.setState({urlError: '', userEdit: false});\n        this.props.onModalSubmit(url);\n    }\n\n    doCancel() {\n        this.setState({urlError: '', userEdit: false});\n        this.props.onModalDismissed();\n    }\n\n    render() {\n        let urlClass = 'input-group input-group--limit';\n        let error = null;\n\n        if (this.state.urlError) {\n            urlClass += ' has-error';\n        }\n\n        if (this.props.serverError || this.state.urlError) {\n            error = (\n                <div className='form-group has-error'>\n                    <p className='input__help error'>\n                        {this.state.urlError || this.props.serverError}\n                    </p>\n                </div>\n            );\n        }\n\n        const fullUrl = TeamStore.getCurrentTeamUrl() + '/channels';\n        const shortURL = URL.getShortenedURL(fullUrl);\n        const urlTooltip = (\n            <Tooltip id='urlTooltip'>{fullUrl}</Tooltip>\n        );\n\n        return (\n            <Modal\n                show={this.props.show}\n                onHide={this.doCancel}\n                onExited={this.props.onModalExited}\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title>{this.props.title}</Modal.Title>\n                </Modal.Header>\n                <form\n                    role='form'\n                    className='form-horizontal'\n                >\n                    <Modal.Body>\n                        <div className='modal-intro'>\n                            <FormattedMessage\n                                id='channel_flow.changeUrlDescription'\n                                defaultMessage='Some characters are now allowed in URLs and may be removed.'\n                            />\n                        </div>\n                        <div className='form-group'>\n                            <label className='col-sm-2 form__label control-label'>\n                                <FormattedMessage\n                                    id='change_url.urlLabel'\n                                    defaultMessage='Channel URL'\n                                />\n                            </label>\n                            <div className='col-sm-10'>\n                                <div className={urlClass}>\n                                    <OverlayTrigger\n                                        delayShow={Constants.OVERLAY_TIME_DELAY}\n                                        placement='top'\n                                        overlay={urlTooltip}\n                                    >\n                                        <span className='input-group-addon'>{shortURL}</span>\n                                    </OverlayTrigger>\n                                    <input\n                                        type='text'\n                                        ref='urlinput'\n                                        className='form-control'\n                                        maxLength='22'\n                                        onChange={this.onURLChanged}\n                                        value={this.state.currentURL}\n                                        autoFocus={true}\n                                        tabIndex='1'\n                                    />\n                                </div>\n                                {error}\n                            </div>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <button\n                            type='button'\n                            className='btn btn-default'\n                            onClick={this.doCancel}\n                        >\n                            <FormattedMessage\n                                id='change_url.close'\n                                defaultMessage='Close'\n                            />\n                        </button>\n                        <button\n                            onClick={this.doSubmit}\n                            type='submit'\n                            className='btn btn-primary'\n                            tabIndex='2'\n                        >\n                            {this.props.submitButtonText}\n                        </button>\n                    </Modal.Footer>\n                </form>\n            </Modal>\n        );\n    }\n}\n\nChangeUrlModal.defaultProps = {\n    show: false,\n    title: 'Change URL',\n    submitButtonText: 'Save',\n    currentURL: '',\n    serverError: null\n};\n\nChangeUrlModal.propTypes = {\n    show: React.PropTypes.bool.isRequired,\n    title: React.PropTypes.node,\n    submitButtonText: React.PropTypes.node,\n    currentURL: React.PropTypes.string,\n    serverError: React.PropTypes.node,\n    onModalSubmit: React.PropTypes.func.isRequired,\n    onModalExited: React.PropTypes.func,\n    onModalDismissed: React.PropTypes.func.isRequired\n};\n\n\n\n// WEBPACK FOOTER //\n// ./components/change_url_modal.jsx","// Copyright (c) 2015 Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nimport SearchableChannelList from './searchable_channel_list.jsx';\n\nimport ChannelStore from 'stores/channel_store.jsx';\nimport UserStore from 'stores/user_store.jsx';\nimport TeamStore from 'stores/team_store.jsx';\n\nimport Constants from 'utils/constants.jsx';\nimport * as AsyncClient from 'utils/async_client.jsx';\nimport {joinChannel, searchMoreChannels} from 'actions/channel_actions.jsx';\nimport {showCreateOption} from 'utils/channel_utils.jsx';\n\nimport React from 'react';\nimport PureRenderMixin from 'react-addons-pure-render-mixin';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\nimport {browserHistory} from 'react-router/es6';\n\nconst CHANNELS_CHUNK_SIZE = 50;\nconst CHANNELS_PER_PAGE = 50;\nconst SEARCH_TIMEOUT_MILLISECONDS = 100;\n\nexport default class MoreChannels extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.onChange = this.onChange.bind(this);\n        this.handleJoin = this.handleJoin.bind(this);\n        this.handleHide = this.handleHide.bind(this);\n        this.handleExit = this.handleExit.bind(this);\n        this.nextPage = this.nextPage.bind(this);\n        this.search = this.search.bind(this);\n\n        this.shouldComponentUpdate = PureRenderMixin.shouldComponentUpdate.bind(this);\n\n        this.searchTimeoutId = 0;\n\n        this.state = {\n            show: true,\n            search: false,\n            channels: null,\n            serverError: null\n        };\n    }\n\n    componentDidMount() {\n        ChannelStore.addChangeListener(this.onChange);\n        AsyncClient.getMoreChannelsPage(0, CHANNELS_CHUNK_SIZE * 2);\n    }\n\n    componentWillUnmount() {\n        ChannelStore.removeChangeListener(this.onChange);\n    }\n\n    handleHide() {\n        this.setState({show: false});\n    }\n\n    handleExit() {\n        if (this.props.onModalDismissed) {\n            this.props.onModalDismissed();\n        }\n    }\n\n    onChange(force) {\n        if (this.state.search && !force) {\n            return;\n        }\n\n        this.setState({\n            channels: ChannelStore.getMoreChannelsList(),\n            serverError: null\n        });\n    }\n\n    nextPage(page) {\n        AsyncClient.getMoreChannelsPage((page + 1) * CHANNELS_PER_PAGE, CHANNELS_PER_PAGE);\n    }\n\n    handleJoin(channel, done) {\n        joinChannel(\n            channel,\n            () => {\n                browserHistory.push(TeamStore.getCurrentTeamRelativeUrl() + '/channels/' + channel.name);\n                if (done) {\n                    done();\n                }\n\n                this.handleHide();\n            },\n            (err) => {\n                this.setState({serverError: err.message});\n                if (done) {\n                    done();\n                }\n            }\n        );\n    }\n\n    search(term) {\n        clearTimeout(this.searchTimeoutId);\n\n        if (term === '') {\n            this.onChange(true);\n            this.setState({search: false});\n            this.searchTimeoutId = '';\n            return;\n        }\n\n        const searchTimeoutId = setTimeout(\n            () => {\n                searchMoreChannels(\n                    term,\n                    (channels) => {\n                        if (searchTimeoutId !== this.searchTimeoutId) {\n                            return;\n                        }\n                        this.setState({search: true, channels});\n                    }\n                );\n            },\n            SEARCH_TIMEOUT_MILLISECONDS\n        );\n\n        this.searchTimeoutId = searchTimeoutId;\n    }\n\n    render() {\n        let serverError;\n        if (this.state.serverError) {\n            serverError = <div className='form-group has-error'><label className='control-label'>{this.state.serverError}</label></div>;\n        }\n\n        let createNewChannelButton = (\n            <button\n                type='button'\n                className='btn btn-primary channel-create-btn'\n                onClick={this.props.handleNewChannel}\n            >\n                <FormattedMessage\n                    id='more_channels.create'\n                    defaultMessage='Create New Channel'\n                />\n            </button>\n        );\n\n        let createChannelHelpText = (\n            <p className='secondary-message'>\n                <FormattedMessage\n                    id='more_channels.createClick'\n                    defaultMessage=\"Click 'Create New Channel' to make a new one\"\n                />\n            </p>\n        );\n\n        const isAdmin = TeamStore.isTeamAdminForCurrentTeam() || UserStore.isSystemAdminForCurrentUser();\n        const isSystemAdmin = UserStore.isSystemAdminForCurrentUser();\n\n        if (!showCreateOption(Constants.OPEN_CHANNEL, isAdmin, isSystemAdmin)) {\n            createNewChannelButton = null;\n            createChannelHelpText = null;\n        }\n\n        return (\n            <Modal\n                dialogClassName='more-modal more-modal--action'\n                show={this.state.show}\n                onHide={this.handleHide}\n                onExited={this.handleExit}\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title>\n                        <FormattedMessage\n                            id='more_channels.title'\n                            defaultMessage='More Channels'\n                        />\n                    </Modal.Title>\n                    {createNewChannelButton}\n                </Modal.Header>\n                <Modal.Body>\n                    <SearchableChannelList\n                        channels={this.state.channels}\n                        channelsPerPage={CHANNELS_PER_PAGE}\n                        nextPage={this.nextPage}\n                        search={this.search}\n                        handleJoin={this.handleJoin}\n                        noResultsText={createChannelHelpText}\n                    />\n                    {serverError}\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n\nMoreChannels.propTypes = {\n    onModalDismissed: React.PropTypes.func,\n    handleNewChannel: React.PropTypes.func\n};\n\n\n\n// WEBPACK FOOTER //\n// ./components/more_channels.jsx","// Copyright (c) 2015 Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nimport MultiSelect from 'components/multiselect/multiselect.jsx';\nimport ProfilePicture from 'components/profile_picture.jsx';\n\nimport {searchUsers} from 'actions/user_actions.jsx';\nimport {openDirectChannelToUser, openGroupChannelToUsers} from 'actions/channel_actions.jsx';\n\nimport UserStore from 'stores/user_store.jsx';\nimport TeamStore from 'stores/team_store.jsx';\n\nimport * as AsyncClient from 'utils/async_client.jsx';\nimport Constants from 'utils/constants.jsx';\nimport {displayUsernameForUser} from 'utils/utils.jsx';\nimport Client from 'client/web_client.jsx';\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\nimport {browserHistory} from 'react-router/es6';\n\nconst USERS_PER_PAGE = 50;\nconst MAX_SELECTABLE_VALUES = Constants.MAX_USERS_IN_GM - 1;\n\nexport default class MoreDirectChannels extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleHide = this.handleHide.bind(this);\n        this.handleExit = this.handleExit.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleDelete = this.handleDelete.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.search = this.search.bind(this);\n        this.addValue = this.addValue.bind(this);\n\n        this.searchTimeoutId = 0;\n        this.listType = global.window.mm_config.RestrictDirectMessage;\n\n        const values = [];\n        if (props.startingUsers) {\n            for (let i = 0; i < props.startingUsers.length; i++) {\n                const user = Object.assign({}, props.startingUsers[i]);\n                user.value = user.id;\n                user.label = '@' + user.username;\n                values.push(user);\n            }\n        }\n\n        this.state = {\n            users: null,\n            values,\n            show: true,\n            search: false,\n            loadingChannel: -1\n        };\n    }\n\n    componentDidMount() {\n        UserStore.addChangeListener(this.onChange);\n        UserStore.addInTeamChangeListener(this.onChange);\n        UserStore.addStatusesChangeListener(this.onChange);\n\n        if (this.listType === 'any') {\n            AsyncClient.getProfiles(0, USERS_PER_PAGE * 2);\n        } else {\n            AsyncClient.getProfilesInTeam(TeamStore.getCurrentId(), 0, USERS_PER_PAGE * 2);\n        }\n    }\n\n    componentWillUnmount() {\n        UserStore.removeChangeListener(this.onChange);\n        UserStore.removeInTeamChangeListener(this.onChange);\n        UserStore.removeStatusesChangeListener(this.onChange);\n    }\n\n    handleHide() {\n        this.setState({show: false});\n    }\n\n    handleExit() {\n        if (this.exitToChannel) {\n            browserHistory.push(this.exitToChannel);\n        }\n\n        if (this.props.onModalDismissed) {\n            this.props.onModalDismissed();\n        }\n    }\n\n    handleSubmit(e) {\n        if (e) {\n            e.preventDefault();\n        }\n\n        if (this.state.loadingChannel !== -1) {\n            return;\n        }\n\n        const userIds = this.state.values.map((v) => v.id);\n        if (userIds.length === 0) {\n            return;\n        }\n\n        this.setState({loadingChannel: 1});\n\n        const success = (channel) => {\n            // Due to how react-overlays Modal handles focus, we delay pushing\n            // the new channel information until the modal is fully exited.\n            // The channel information will be pushed in `handleExit`\n            this.exitToChannel = TeamStore.getCurrentTeamRelativeUrl() + '/channels/' + channel.name;\n            this.setState({loadingChannel: -1});\n            this.handleHide();\n        };\n\n        const error = () => {\n            this.setState({loadingChannel: -1});\n        };\n\n        if (userIds.length === 1) {\n            openDirectChannelToUser(userIds[0], success, error);\n        } else {\n            openGroupChannelToUsers(userIds, success, error);\n        }\n    }\n\n    addValue(value) {\n        const values = Object.assign([], this.state.values);\n        if (values.indexOf(value) === -1) {\n            values.push(value);\n        }\n\n        this.setState({values});\n    }\n\n    onChange(force) {\n        if (this.state.search && !force) {\n            return;\n        }\n\n        let users;\n        if (this.listType === 'any') {\n            users = Object.assign([], UserStore.getProfileList(true));\n        } else {\n            users = Object.assign([], UserStore.getProfileListInTeam(TeamStore.getCurrentId(), true));\n        }\n\n        for (let i = 0; i < users.length; i++) {\n            const user = Object.assign({}, users[i]);\n            user.value = user.id;\n            user.label = '@' + user.username;\n            users[i] = user;\n        }\n\n        this.setState({\n            users\n        });\n    }\n\n    handlePageChange(page, prevPage) {\n        if (page > prevPage) {\n            AsyncClient.getProfiles((page + 1) * USERS_PER_PAGE, USERS_PER_PAGE);\n        }\n    }\n\n    search(term) {\n        clearTimeout(this.searchTimeoutId);\n\n        if (term === '') {\n            this.onChange(true);\n            this.setState({search: false});\n            this.searchTimeoutId = '';\n            return;\n        }\n\n        let teamId;\n        if (this.listType === 'any') {\n            teamId = '';\n        } else {\n            teamId = TeamStore.getCurrentId();\n        }\n\n        const searchTimeoutId = setTimeout(\n            () => {\n                searchUsers(\n                    term,\n                    teamId,\n                    {},\n                    (users) => {\n                        if (searchTimeoutId !== this.searchTimeoutId) {\n                            return;\n                        }\n\n                        let indexToDelete = -1;\n                        for (let i = 0; i < users.length; i++) {\n                            if (users[i].id === UserStore.getCurrentId()) {\n                                indexToDelete = i;\n                            }\n                            users[i].value = users[i].id;\n                            users[i].label = '@' + users[i].username;\n                        }\n\n                        if (indexToDelete !== -1) {\n                            users.splice(indexToDelete, 1);\n                        }\n                        this.setState({search: true, users});\n                    }\n                );\n            },\n            Constants.SEARCH_TIMEOUT_MILLISECONDS\n        );\n\n        this.searchTimeoutId = searchTimeoutId;\n    }\n\n    handleDelete(values) {\n        this.setState({values});\n    }\n\n    renderOption(option, isSelected, onAdd) {\n        var rowSelected = '';\n        if (isSelected) {\n            rowSelected = 'more-modal__row--selected';\n        }\n\n        return (\n            <div\n                key={option.id}\n                ref={isSelected ? 'selected' : option.id}\n                className={'more-modal__row clickable ' + rowSelected}\n                onClick={() => onAdd(option)}\n            >\n                <ProfilePicture\n                    src={`${Client.getUsersRoute()}/${option.id}/image?time=${option.last_picture_update}`}\n                    width='32'\n                    height='32'\n                />\n                <div\n                    className='more-modal__details'\n                >\n                    <div className='more-modal__name'>\n                        {displayUsernameForUser(option)}\n                    </div>\n                    <div className='more-modal__description'>\n                        {option.email}\n                    </div>\n                </div>\n                <div className='more-modal__actions'>\n                    <div className='more-modal__actions--round'>\n                        <i className='fa fa-plus'/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    renderValue(user) {\n        return user.username;\n    }\n\n    render() {\n        let note;\n        if (this.props.startingUsers) {\n            if (this.state.values && this.state.values.length >= MAX_SELECTABLE_VALUES) {\n                note = (\n                    <FormattedMessage\n                        id='more_direct_channels.new_convo_note.full'\n                        defaultMessage='You’ve reached the maximum number of people for this conversation. Consider creating a private channel instead.'\n                    />\n                );\n            } else {\n                note = (\n                    <FormattedMessage\n                        id='more_direct_channels.new_convo_note'\n                        defaultMessage='This will start a new conversation. If you’re adding a lot of people, consider creating a private channel instead.'\n                    />\n                );\n            }\n        }\n\n        const numRemainingText = (\n            <FormattedMessage\n                id='multiselect.numPeopleRemaining'\n                defaultMessage='You can add {num, number} more {num, plural, =0 {people} one {person} other {people}}. '\n                values={{\n                    num: MAX_SELECTABLE_VALUES - this.state.values.length\n                }}\n            />\n        );\n\n        return (\n            <Modal\n                dialogClassName={'more-modal more-direct-channels'}\n                show={this.state.show}\n                onHide={this.handleHide}\n                onExited={this.handleExit}\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title>\n                        <FormattedMessage\n                            id='more_direct_channels.title'\n                            defaultMessage='Direct Messages'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <MultiSelect\n                        key='moreDirectChannelsList'\n                        options={this.state.users}\n                        optionRenderer={this.renderOption}\n                        values={this.state.values}\n                        valueRenderer={this.renderValue}\n                        perPage={USERS_PER_PAGE}\n                        handlePageChange={this.handlePageChange}\n                        handleInput={this.search}\n                        handleDelete={this.handleDelete}\n                        handleAdd={this.addValue}\n                        handleSubmit={this.handleSubmit}\n                        noteText={note}\n                        maxValues={MAX_SELECTABLE_VALUES}\n                        numRemainingText={numRemainingText}\n                    />\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n\nMoreDirectChannels.propTypes = {\n    startingUsers: React.PropTypes.arrayOf(React.PropTypes.object),\n    onModalDismissed: React.PropTypes.func\n};\n\n\n\n// WEBPACK FOOTER //\n// ./components/more_direct_channels.jsx","// Copyright (c) 2015 Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nimport * as Utils from 'utils/utils.jsx';\nimport TeamStore from 'stores/team_store.jsx';\nimport UserStore from 'stores/user_store.jsx';\nimport {cleanUpUrlable} from 'utils/url.jsx';\n\nimport NewChannelModal from './new_channel_modal.jsx';\nimport ChangeURLModal from './change_url_modal.jsx';\n\nimport {FormattedMessage} from 'react-intl';\nimport {createChannel} from 'actions/channel_actions.jsx';\nimport {browserHistory} from 'react-router/es6';\n\nconst SHOW_NEW_CHANNEL = 1;\nconst SHOW_EDIT_URL = 2;\nconst SHOW_EDIT_URL_THEN_COMPLETE = 3;\n\nimport React from 'react';\n\nexport default class NewChannelFlow extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.doSubmit = this.doSubmit.bind(this);\n        this.onModalExited = this.onModalExited.bind(this);\n        this.typeSwitched = this.typeSwitched.bind(this);\n        this.urlChangeRequested = this.urlChangeRequested.bind(this);\n        this.urlChangeSubmitted = this.urlChangeSubmitted.bind(this);\n        this.urlChangeDismissed = this.urlChangeDismissed.bind(this);\n        this.channelDataChanged = this.channelDataChanged.bind(this);\n\n        this.state = {\n            serverError: '',\n            channelType: 'O',\n            flowState: SHOW_NEW_CHANNEL,\n            channelDisplayName: '',\n            channelName: '',\n            channelPurpose: '',\n            channelHeader: '',\n            nameModified: false\n        };\n    }\n    componentWillReceiveProps(nextProps) {\n        // If we are being shown, grab channel type from props and clear\n        if (nextProps.show === true && this.props.show === false) {\n            this.setState({\n                serverError: '',\n                channelType: nextProps.channelType,\n                flowState: SHOW_NEW_CHANNEL,\n                channelDisplayName: '',\n                channelName: '',\n                channelPurpose: '',\n                channelHeader: '',\n                nameModified: false\n            });\n        }\n    }\n    doSubmit() {\n        if (!this.state.channelDisplayName) {\n            this.setState({serverError: Utils.localizeMessage('channel_flow.invalidName', 'Invalid Channel Name')});\n            return;\n        }\n\n        if (this.state.channelName < 2) {\n            this.setState({flowState: SHOW_EDIT_URL_THEN_COMPLETE});\n            return;\n        }\n\n        const cu = UserStore.getCurrentUser();\n        const channel = {\n            team_id: cu.team_id,\n            name: this.state.channelName,\n            display_name: this.state.channelDisplayName,\n            purpose: this.state.channelPurpose,\n            header: this.state.channelHeader,\n            type: this.state.channelType\n        };\n\n        createChannel(\n            channel,\n            (data) => {\n                this.doOnModalExited = () => {\n                    browserHistory.push(TeamStore.getCurrentTeamRelativeUrl() + '/channels/' + data.channel.name);\n                };\n\n                this.props.onModalDismissed();\n            },\n            (err) => {\n                if (err.id === 'model.channel.is_valid.2_or_more.app_error') {\n                    this.setState({\n                        flowState: SHOW_EDIT_URL_THEN_COMPLETE,\n                        serverError: (\n                            <FormattedMessage\n                                id='channel_flow.handleTooShort'\n                                defaultMessage='Channel URL must be 2 or more lowercase alphanumeric characters'\n                            />\n                        )\n                    });\n                    return;\n                }\n                if (err.id === 'store.sql_channel.update.exists.app_error') {\n                    this.setState({serverError: Utils.localizeMessage('channel_flow.alreadyExist', 'A channel with that URL already exists')});\n                    return;\n                }\n                this.setState({serverError: err.message});\n            }\n        );\n    }\n    onModalExited() {\n        if (this.doOnModalExited) {\n            this.doOnModalExited();\n        }\n    }\n    typeSwitched() {\n        if (this.state.channelType === 'P') {\n            this.setState({channelType: 'O'});\n        } else {\n            this.setState({channelType: 'P'});\n        }\n    }\n    urlChangeRequested() {\n        this.setState({flowState: SHOW_EDIT_URL});\n    }\n    urlChangeSubmitted(newURL) {\n        if (this.state.flowState === SHOW_EDIT_URL_THEN_COMPLETE) {\n            this.setState({channelName: newURL, nameModified: true}, this.doSubmit);\n        } else {\n            this.setState({flowState: SHOW_NEW_CHANNEL, serverError: null, channelName: newURL, nameModified: true});\n        }\n    }\n    urlChangeDismissed() {\n        this.setState({flowState: SHOW_NEW_CHANNEL});\n    }\n    channelDataChanged(data) {\n        this.setState({\n            channelDisplayName: data.displayName,\n            channelPurpose: data.purpose,\n            channelHeader: data.header\n        });\n        if (!this.state.nameModified) {\n            this.setState({channelName: cleanUpUrlable(data.displayName.trim())});\n        }\n    }\n    render() {\n        const channelData = {\n            name: this.state.channelName,\n            displayName: this.state.channelDisplayName,\n            purpose: this.state.channelPurpose\n        };\n\n        let showChannelModal = false;\n        let showGroupModal = false;\n        let showChangeURLModal = false;\n\n        let changeURLTitle = '';\n        let changeURLSubmitButtonText = '';\n\n        // Only listen to flow state if we are being shown\n        if (this.props.show) {\n            switch (this.state.flowState) {\n            case SHOW_NEW_CHANNEL:\n                if (this.state.channelType === 'O') {\n                    showChannelModal = true;\n                } else {\n                    showGroupModal = true;\n                }\n                break;\n            case SHOW_EDIT_URL:\n                showChangeURLModal = true;\n                changeURLTitle = (\n                    <FormattedMessage\n                        id='channel_flow.changeUrlTitle'\n                        defaultMessage='Change Channel URL'\n                    />\n                );\n                changeURLSubmitButtonText = changeURLTitle;\n                break;\n            case SHOW_EDIT_URL_THEN_COMPLETE:\n                showChangeURLModal = true;\n                changeURLTitle = (\n                    <FormattedMessage\n                        id='channel_flow.set_url_title'\n                        defaultMessage='Set Channel URL'\n                    />\n                );\n                changeURLSubmitButtonText = (\n                    <FormattedMessage\n                        id='channel_flow.create'\n                        defaultMessage='Create Channel'\n                    />\n                );\n                break;\n            }\n        }\n        return (\n            <span>\n                <NewChannelModal\n                    show={showChannelModal}\n                    channelType={'O'}\n                    channelData={channelData}\n                    serverError={this.state.serverError}\n                    onSubmitChannel={this.doSubmit}\n                    onModalDismissed={this.props.onModalDismissed}\n                    onModalExited={this.onModalExited}\n                    onTypeSwitched={this.typeSwitched}\n                    onChangeURLPressed={this.urlChangeRequested}\n                    onDataChanged={this.channelDataChanged}\n                />\n                <NewChannelModal\n                    show={showGroupModal}\n                    channelType={'P'}\n                    channelData={channelData}\n                    serverError={this.state.serverError}\n                    onSubmitChannel={this.doSubmit}\n                    onModalExited={this.onModalExited}\n                    onModalDismissed={this.props.onModalDismissed}\n                    onTypeSwitched={this.typeSwitched}\n                    onChangeURLPressed={this.urlChangeRequested}\n                    onDataChanged={this.channelDataChanged}\n                />\n                <ChangeURLModal\n                    show={showChangeURLModal}\n                    title={changeURLTitle}\n                    submitButtonText={changeURLSubmitButtonText}\n                    currentURL={this.state.channelName}\n                    serverError={this.state.serverError}\n                    onModalSubmit={this.urlChangeSubmitted}\n                    onModalDismissed={this.urlChangeDismissed}\n                    onModalExited={this.onModalExited}\n                />\n            </span>\n        );\n    }\n}\n\nNewChannelFlow.defaultProps = {\n    show: false,\n    channelType: 'O'\n};\n\nNewChannelFlow.propTypes = {\n    show: React.PropTypes.bool.isRequired,\n    channelType: React.PropTypes.string.isRequired,\n    onModalDismissed: React.PropTypes.func.isRequired\n};\n\n\n\n// WEBPACK FOOTER //\n// ./components/new_channel_flow.jsx","// Copyright (c) 2015 Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nimport $ from 'jquery';\nimport ReactDOM from 'react-dom';\n\nimport {getShortenedURL} from 'utils/url.jsx';\nimport * as UserAgent from 'utils/user_agent.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport * as ChannelUtils from 'utils/channel_utils.jsx';\nimport Constants from 'utils/constants.jsx';\n\nimport UserStore from 'stores/user_store.jsx';\nimport TeamStore from 'stores/team_store.jsx';\nimport PreferenceStore from 'stores/preference_store.jsx';\n\nimport {FormattedMessage} from 'react-intl';\n\nimport {Modal} from 'react-bootstrap';\n\nimport React from 'react';\n\nexport default class NewChannelModal extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.onEnterKeyDown = this.onEnterKeyDown.bind(this);\n        this.onPreferenceChange = this.onPreferenceChange.bind(this);\n\n        this.ctrlSend = PreferenceStore.getBool(Constants.Preferences.CATEGORY_ADVANCED_SETTINGS, 'send_on_ctrl_enter');\n\n        this.state = {\n            displayNameError: ''\n        };\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.show === true && this.props.show === false) {\n            this.setState({\n                displayNameError: ''\n            });\n\n            document.addEventListener('keydown', this.onEnterKeyDown);\n        } else if (nextProps.show === false && this.props.show === true) {\n            document.removeEventListener('keydown', this.onEnterKeyDown);\n        }\n    }\n\n    componentDidMount() {\n        // ???\n        if (UserAgent.isInternetExplorer()) {\n            $('body').addClass('browser--ie');\n        }\n\n        PreferenceStore.addChangeListener(this.onPreferenceChange);\n    }\n\n    componentWillUnmount() {\n        PreferenceStore.removeChangeListener(this.onPreferenceChange);\n    }\n\n    onPreferenceChange() {\n        this.ctrlSend = PreferenceStore.getBool(Constants.Preferences.CATEGORY_ADVANCED_SETTINGS, 'send_on_ctrl_enter');\n    }\n\n    onEnterKeyDown(e) {\n        if (this.ctrlSend && e.keyCode === Constants.KeyCodes.ENTER && e.ctrlKey) {\n            this.handleSubmit(e);\n        } else if (!this.ctrlSend && e.keyCode === Constants.KeyCodes.ENTER && !e.shiftKey && !e.altKey) {\n            this.handleSubmit(e);\n        }\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n\n        const displayName = ReactDOM.findDOMNode(this.refs.display_name).value.trim();\n        if (displayName.length < Constants.MIN_CHANNELNAME_LENGTH) {\n            this.setState({displayNameError: true});\n            return;\n        }\n\n        this.props.onSubmitChannel();\n    }\n\n    handleChange() {\n        const newData = {\n            displayName: this.refs.display_name.value,\n            header: this.refs.channel_header.value,\n            purpose: this.refs.channel_purpose.value\n        };\n        this.props.onDataChanged(newData);\n    }\n\n    render() {\n        var displayNameError = null;\n        var serverError = null;\n        var displayNameClass = 'form-group';\n\n        if (this.state.displayNameError) {\n            displayNameError = (\n                <p className='input__help error'>\n                    <FormattedMessage\n                        id='channel_modal.displayNameError'\n                        defaultMessage='Channel name must be 2 or more characters'\n                    />\n                    {this.state.displayNameError}\n                </p>\n            );\n            displayNameClass += ' has-error';\n        }\n\n        if (this.props.serverError) {\n            serverError = <div className='form-group has-error'><p className='input__help error'>{this.props.serverError}</p></div>;\n        }\n\n        let createPublicChannelLink = (\n            <a\n                href='#'\n                onClick={this.props.onTypeSwitched}\n            >\n                <FormattedMessage\n                    id='channel_modal.publicChannel1'\n                    defaultMessage='Create a public channel'\n                />\n            </a>\n        );\n\n        let createPrivateChannelLink = (\n            <a\n                href='#'\n                onClick={this.props.onTypeSwitched}\n            >\n                <FormattedMessage\n                    id='channel_modal.privateGroup2'\n                    defaultMessage='Create a private channel'\n                />\n            </a>\n        );\n\n        const isAdmin = TeamStore.isTeamAdminForCurrentTeam() || UserStore.isSystemAdminForCurrentUser();\n        const isSystemAdmin = UserStore.isSystemAdminForCurrentUser();\n\n        if (!ChannelUtils.showCreateOption(Constants.OPEN_CHANNEL, isAdmin, isSystemAdmin)) {\n            createPublicChannelLink = null;\n        }\n\n        if (!ChannelUtils.showCreateOption(Constants.PRIVATE_CHANNEL, isAdmin, isSystemAdmin)) {\n            createPrivateChannelLink = null;\n        }\n\n        var channelSwitchText = '';\n        switch (this.props.channelType) {\n        case 'P':\n            channelSwitchText = (\n                <div className='modal-intro'>\n                    <FormattedMessage\n                        id='channel_modal.privateGroup1'\n                        defaultMessage='Create a new private channel with restricted membership. '\n                    />\n                    {createPublicChannelLink}\n                </div>\n            );\n            break;\n        case 'O':\n            channelSwitchText = (\n                <div className='modal-intro'>\n                    <FormattedMessage\n                        id='channel_modal.publicChannel2'\n                        defaultMessage='Create a new public channel anyone can join. '\n                    />\n                    {createPrivateChannelLink}\n                </div>\n            );\n            break;\n        }\n\n        const prettyTeamURL = getShortenedURL();\n\n        return (\n            <span>\n                <Modal\n                    dialogClassName='new-channel__modal'\n                    show={this.props.show}\n                    bsSize='large'\n                    onHide={this.props.onModalDismissed}\n                    onExited={this.props.onModalExited}\n                >\n                    <Modal.Header closeButton={true}>\n                        <Modal.Title>\n                            <FormattedMessage\n                                id='channel_modal.modalTitle'\n                                defaultMessage='New Channel'\n                            />\n                        </Modal.Title>\n                    </Modal.Header>\n                    <form\n                        role='form'\n                        className='form-horizontal'\n                    >\n                        <Modal.Body>\n                            <div>\n                                {channelSwitchText}\n                            </div>\n                            <div className={displayNameClass}>\n                                <label className='col-sm-3 form__label control-label'>\n                                    <FormattedMessage\n                                        id='channel_modal.name'\n                                        defaultMessage='Name'\n                                    />\n                                </label>\n                                <div className='col-sm-9'>\n                                    <input\n                                        onChange={this.handleChange}\n                                        type='text'\n                                        ref='display_name'\n                                        className='form-control'\n                                        placeholder={Utils.localizeMessage('channel_modal.nameEx', 'E.g.: \"Bugs\", \"Marketing\", \"客户支持\"')}\n                                        maxLength={Constants.MAX_CHANNELNAME_LENGTH}\n                                        value={this.props.channelData.displayName}\n                                        autoFocus={true}\n                                        tabIndex='1'\n                                    />\n                                    {displayNameError}\n                                    <p className='input__help dark'>\n                                        {'URL: ' + prettyTeamURL + this.props.channelData.name + ' ('}\n                                        <a\n                                            href='#'\n                                            onClick={this.props.onChangeURLPressed}\n                                        >\n                                            <FormattedMessage\n                                                id='channel_modal.edit'\n                                                defaultMessage='Edit'\n                                            />\n                                        </a>\n                                        {')'}\n                                    </p>\n                                </div>\n                            </div>\n                            <div className='form-group'>\n                                <div className='col-sm-3'>\n                                    <label className='form__label control-label'>\n                                        <FormattedMessage\n                                            id='channel_modal.purpose'\n                                            defaultMessage='Purpose'\n                                        />\n                                    </label>\n                                    <label className='form__label light'>\n                                        <FormattedMessage\n                                            id='channel_modal.optional'\n                                            defaultMessage='(optional)'\n                                        />\n                                    </label>\n                                </div>\n                                <div className='col-sm-9'>\n                                    <textarea\n                                        className='form-control no-resize'\n                                        ref='channel_purpose'\n                                        rows='4'\n                                        placeholder={Utils.localizeMessage('channel_modal.purposeEx', 'E.g.: \"A channel to file bugs and improvements\"')}\n                                        maxLength='250'\n                                        value={this.props.channelData.purpose}\n                                        onChange={this.handleChange}\n                                        tabIndex='2'\n                                    />\n                                    <p className='input__help'>\n                                        <FormattedMessage\n                                            id='channel_modal.descriptionHelp'\n                                            defaultMessage='Describe how this channel should be used.'\n                                        />\n                                    </p>\n                                </div>\n                            </div>\n                            <div className='form-group less'>\n                                <div className='col-sm-3'>\n                                    <label className='form__label control-label'>\n                                        <FormattedMessage\n                                            id='channel_modal.header'\n                                            defaultMessage='Header'\n                                        />\n                                    </label>\n                                    <label className='form__label light'>\n                                        <FormattedMessage\n                                            id='channel_modal.optional'\n                                            defaultMessage='(optional)'\n                                        />\n                                    </label>\n                                </div>\n                                <div className='col-sm-9'>\n                                    <textarea\n                                        className='form-control no-resize'\n                                        ref='channel_header'\n                                        rows='4'\n                                        placeholder={Utils.localizeMessage('channel_modal.headerEx', 'E.g.: \"[Link Title](http://example.com)\"')}\n                                        maxLength='1024'\n                                        value={this.props.channelData.header}\n                                        onChange={this.handleChange}\n                                        tabIndex='2'\n                                    />\n                                    <p className='input__help'>\n                                        <FormattedMessage\n                                            id='channel_modal.headerHelp'\n                                            defaultMessage='Set text that will appear in the header of the channel beside the channel name. For example, include frequently used links by typing [Link Title](http://example.com).'\n                                        />\n                                    </p>\n                                    {serverError}\n                                </div>\n                            </div>\n                        </Modal.Body>\n                        <Modal.Footer>\n                            <button\n                                type='button'\n                                className='btn btn-default'\n                                onClick={this.props.onModalDismissed}\n                            >\n                                <FormattedMessage\n                                    id='channel_modal.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </button>\n                            <button\n                                onClick={this.handleSubmit}\n                                type='submit'\n                                className='btn btn-primary'\n                                tabIndex='3'\n                            >\n                                <FormattedMessage\n                                    id='channel_modal.createNew'\n                                    defaultMessage='Create New Channel'\n                                />\n                            </button>\n                        </Modal.Footer>\n                    </form>\n                </Modal>\n            </span>\n        );\n    }\n}\n\nNewChannelModal.defaultProps = {\n    show: false,\n    channelType: 'O',\n    serverError: null\n};\nNewChannelModal.propTypes = {\n    show: React.PropTypes.bool.isRequired,\n    channelType: React.PropTypes.string.isRequired,\n    channelData: React.PropTypes.object.isRequired,\n    serverError: React.PropTypes.node,\n    onSubmitChannel: React.PropTypes.func.isRequired,\n    onModalDismissed: React.PropTypes.func.isRequired,\n    onModalExited: React.PropTypes.func,\n    onTypeSwitched: React.PropTypes.func.isRequired,\n    onChangeURLPressed: React.PropTypes.func.isRequired,\n    onDataChanged: React.PropTypes.func.isRequired\n};\n\n\n\n\n// WEBPACK FOOTER //\n// ./components/new_channel_modal.jsx","// Copyright (c) 2016 Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nimport LoadingScreen from './loading_screen.jsx';\n\nimport * as UserAgent from 'utils/user_agent.jsx';\n\nimport $ from 'jquery';\nimport React from 'react';\nimport {localizeMessage} from 'utils/utils.jsx';\nimport {FormattedMessage} from 'react-intl';\n\nimport loadingGif from 'images/load.gif';\n\nconst NEXT_BUTTON_TIMEOUT_MILLISECONDS = 500;\n\nexport default class SearchableChannelList extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.createChannelRow = this.createChannelRow.bind(this);\n        this.nextPage = this.nextPage.bind(this);\n        this.previousPage = this.previousPage.bind(this);\n        this.doSearch = this.doSearch.bind(this);\n\n        this.nextTimeoutId = 0;\n\n        this.state = {\n            joiningChannel: '',\n            page: 0,\n            nextDisabled: false\n        };\n    }\n\n    componentDidMount() {\n        // only focus the search box on desktop so that we don't cause the keyboard to open on mobile\n        if (!UserAgent.isMobile()) {\n            this.refs.filter.focus();\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.page !== this.state.page) {\n            $(this.refs.channelList).scrollTop(0);\n        }\n    }\n\n    handleJoin(channel) {\n        this.setState({joiningChannel: channel.id});\n        this.props.handleJoin(\n            channel,\n            () => {\n                this.setState({joiningChannel: ''});\n            }\n        );\n    }\n\n    createChannelRow(channel) {\n        let joinButton;\n        if (this.state.joiningChannel === channel.id) {\n            joinButton = (\n                <img\n                    className='join-channel-loading-gif'\n                    src={loadingGif}\n                />\n            );\n        } else {\n            joinButton = (\n                <button\n                    onClick={this.handleJoin.bind(this, channel)}\n                    className='btn btn-primary'\n                >\n                    <FormattedMessage\n                        id='more_channels.join'\n                        defaultMessage='Join'\n                    />\n                </button>\n            );\n        }\n\n        return (\n            <div\n                className='more-modal__row'\n                key={channel.id}\n            >\n                <div className='more-modal__details'>\n                    <p className='more-modal__name'>{channel.display_name}</p>\n                    <p className='more-modal__description'>{channel.purpose}</p>\n                </div>\n                <div className='more-modal__actions'>\n                    {joinButton}\n                </div>\n            </div>\n        );\n    }\n\n    nextPage(e) {\n        e.preventDefault();\n        this.setState({page: this.state.page + 1, nextDisabled: true});\n        this.nextTimeoutId = setTimeout(() => this.setState({nextDisabled: false}), NEXT_BUTTON_TIMEOUT_MILLISECONDS);\n        this.props.nextPage(this.state.page + 1);\n    }\n\n    previousPage(e) {\n        e.preventDefault();\n        this.setState({page: this.state.page - 1});\n    }\n\n    doSearch() {\n        const term = this.refs.filter.value;\n        this.props.search(term);\n        if (term === '') {\n            this.setState({page: 0});\n        }\n    }\n\n    render() {\n        const channels = this.props.channels;\n        let listContent;\n        let nextButton;\n        let previousButton;\n\n        if (channels == null) {\n            listContent = <LoadingScreen/>;\n        } else if (channels.length === 0) {\n            listContent = (\n                <div className='no-channel-message'>\n                    <p className='primary-message'>\n                        <FormattedMessage\n                            id='more_channels.noMore'\n                            defaultMessage='No more channels to join'\n                        />\n                    </p>\n                    {this.props.noResultsText}\n                </div>\n            );\n        } else {\n            const pageStart = this.state.page * this.props.channelsPerPage;\n            const pageEnd = pageStart + this.props.channelsPerPage;\n            const channelsToDisplay = this.props.channels.slice(pageStart, pageEnd);\n            listContent = channelsToDisplay.map(this.createChannelRow);\n\n            if (channelsToDisplay.length >= this.props.channelsPerPage) {\n                nextButton = (\n                    <button\n                        className='btn btn-default filter-control filter-control__next'\n                        onClick={this.nextPage}\n                        disabled={this.state.nextDisabled}\n                    >\n                        <FormattedMessage\n                            id='more_channels.next'\n                            defaultMessage='Next'\n                        />\n                    </button>\n                );\n            }\n\n            if (this.state.page > 0) {\n                previousButton = (\n                    <button\n                        className='btn btn-default filter-control filter-control__prev'\n                        onClick={this.previousPage}\n                    >\n                        <FormattedMessage\n                            id='more_channels.prev'\n                            defaultMessage='Previous'\n                        />\n                    </button>\n                );\n            }\n        }\n\n        return (\n            <div className='filtered-user-list'>\n                <div className='filter-row'>\n                    <div className='col-sm-12'>\n                        <input\n                            ref='filter'\n                            className='form-control filter-textbox'\n                            placeholder={localizeMessage('filtered_channels_list.search', 'Search channels')}\n                            onInput={this.doSearch}\n                        />\n                    </div>\n                </div>\n                <div\n                    ref='channelList'\n                    className='more-modal__list'\n                >\n                    <div>\n                        {listContent}\n                    </div>\n                </div>\n                <div className='filter-controls'>\n                    {previousButton}\n                    {nextButton}\n                </div>\n            </div>\n        );\n    }\n}\n\nSearchableChannelList.defaultProps = {\n    channels: []\n};\n\nSearchableChannelList.propTypes = {\n    channels: React.PropTypes.arrayOf(React.PropTypes.object),\n    channelsPerPage: React.PropTypes.number,\n    nextPage: React.PropTypes.func.isRequired,\n    search: React.PropTypes.func.isRequired,\n    handleJoin: React.PropTypes.func.isRequired,\n    noResultsText: React.PropTypes.object\n};\n\n\n// WEBPACK FOOTER //\n// ./components/searchable_channel_list.jsx","// Copyright (c) 2015 Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nimport React from 'react';\n\nimport Client from 'client/web_client.jsx';\nimport PreferenceStore from 'stores/preference_store.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nimport SidebarHeaderDropdown from './sidebar_header_dropdown.jsx';\nimport {Tooltip, OverlayTrigger} from 'react-bootstrap';\n\nimport {Preferences, TutorialSteps, Constants} from 'utils/constants.jsx';\nimport {createMenuTip} from 'components/tutorial/tutorial_tip.jsx';\n\nexport default class SidebarHeader extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.toggleDropdown = this.toggleDropdown.bind(this);\n        this.onPreferenceChange = this.onPreferenceChange.bind(this);\n\n        this.state = this.getStateFromStores();\n    }\n\n    componentDidMount() {\n        PreferenceStore.addChangeListener(this.onPreferenceChange);\n    }\n\n    componentWillUnmount() {\n        PreferenceStore.removeChangeListener(this.onPreferenceChange);\n    }\n\n    getStateFromStores() {\n        const tutorialStep = PreferenceStore.getInt(Preferences.TUTORIAL_STEP, this.props.currentUser.id, 999);\n\n        return {showTutorialTip: tutorialStep === TutorialSteps.MENU_POPOVER && !Utils.isMobile()};\n    }\n\n    onPreferenceChange() {\n        this.setState(this.getStateFromStores());\n    }\n\n    toggleDropdown(e) {\n        e.preventDefault();\n\n        this.refs.dropdown.toggleDropdown();\n    }\n\n    render() {\n        var me = this.props.currentUser;\n        var profilePicture = null;\n\n        if (!me) {\n            return null;\n        }\n\n        if (me.last_picture_update) {\n            profilePicture = (\n                <img\n                    className='user__picture'\n                    src={Client.getUsersRoute() + '/' + me.id + '/image?time=' + me.last_picture_update}\n                />\n            );\n        }\n\n        let tutorialTip = null;\n        if (this.state.showTutorialTip) {\n            tutorialTip = createMenuTip(this.toggleDropdown);\n        }\n\n        let teamNameWithToolTip = null;\n        if (this.props.teamDescription === '') {\n            teamNameWithToolTip = (\n                <div className='team__name'>{this.props.teamDisplayName}</div>\n            );\n        } else {\n            teamNameWithToolTip = (\n                <OverlayTrigger\n                    trigger={['hover', 'focus']}\n                    delayShow={Constants.OVERLAY_TIME_DELAY}\n                    placement='bottom'\n                    overlay={<Tooltip id='team-name__tooltip'>{this.props.teamDescription}</Tooltip>}\n                    ref='descriptionOverlay'\n                >\n                    <div className='team__name'>{this.props.teamDisplayName}</div>\n                </OverlayTrigger>\n            );\n        }\n\n        return (\n            <div className='team__header theme'>\n                {tutorialTip}\n                <div>\n                    {profilePicture}\n                    <div className='header__info'>\n                        <div className='user__name'>{'@' + me.username}</div>\n                        {teamNameWithToolTip}\n                    </div>\n                </div>\n                <SidebarHeaderDropdown\n                    ref='dropdown'\n                    teamType={this.props.teamType}\n                    teamDisplayName={this.props.teamDisplayName}\n                    teamName={this.props.teamName}\n                    currentUser={this.props.currentUser}\n                />\n            </div>\n        );\n    }\n}\n\nSidebarHeader.defaultProps = {\n    teamDisplayName: '',\n    teamDescription: '',\n    teamType: ''\n};\nSidebarHeader.propTypes = {\n    teamDisplayName: React.PropTypes.string,\n    teamDescription: React.PropTypes.string,\n    teamName: React.PropTypes.string,\n    teamType: React.PropTypes.string,\n    currentUser: React.PropTypes.object\n};\n\n\n\n// WEBPACK FOOTER //\n// ./components/sidebar_header.jsx","// Copyright (c) 2015 Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nimport $ from 'jquery';\nimport ReactDOM from 'react-dom';\nimport * as UserAgent from 'utils/user_agent.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport * as GlobalActions from 'actions/global_actions.jsx';\n\nimport TeamStore from 'stores/team_store.jsx';\nimport UserStore from 'stores/user_store.jsx';\nimport WebrtcStore from 'stores/webrtc_store.jsx';\nimport AboutBuildModal from './about_build_modal.jsx';\nimport SidebarHeaderDropdownButton from './sidebar_header_dropdown_button.jsx';\nimport TeamMembersModal from './team_members_modal.jsx';\nimport UserSettingsModal from './user_settings/user_settings_modal.jsx';\nimport AddUsersToTeam from './add_users_to_team.jsx';\n\nimport {Constants, WebrtcActionTypes} from 'utils/constants.jsx';\n\nimport {Dropdown} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router/es6';\n\nimport React from 'react';\n\nexport default class SidebarHeaderDropdown extends React.Component {\n    static propTypes = {\n        teamType: React.PropTypes.string,\n        teamDisplayName: React.PropTypes.string,\n        teamName: React.PropTypes.string,\n        currentUser: React.PropTypes.object\n    };\n\n    static defaultProps = {\n        teamType: ''\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.toggleDropdown = this.toggleDropdown.bind(this);\n\n        this.handleAboutModal = this.handleAboutModal.bind(this);\n        this.aboutModalDismissed = this.aboutModalDismissed.bind(this);\n        this.toggleAccountSettingsModal = this.toggleAccountSettingsModal.bind(this);\n        this.showAddUsersToTeamModal = this.showAddUsersToTeamModal.bind(this);\n        this.hideAddUsersToTeamModal = this.hideAddUsersToTeamModal.bind(this);\n        this.showInviteMemberModal = this.showInviteMemberModal.bind(this);\n        this.showGetTeamInviteLinkModal = this.showGetTeamInviteLinkModal.bind(this);\n        this.showTeamMembersModal = this.showTeamMembersModal.bind(this);\n        this.hideTeamMembersModal = this.hideTeamMembersModal.bind(this);\n\n        this.onTeamChange = this.onTeamChange.bind(this);\n        this.openAccountSettings = this.openAccountSettings.bind(this);\n\n        this.renderCustomEmojiLink = this.renderCustomEmojiLink.bind(this);\n\n        this.handleClick = this.handleClick.bind(this);\n\n        this.state = {\n            teamMembers: TeamStore.getMyTeamMembers(),\n            teamListings: TeamStore.getTeamListings(),\n            showAboutModal: false,\n            showDropdown: false,\n            showTeamMembersModal: false,\n            showUserSettingsModal: false,\n            showAddUsersToTeamModal: false\n        };\n    }\n\n    handleClick(e) {\n        if (WebrtcStore.isBusy()) {\n            WebrtcStore.emitChanged({action: WebrtcActionTypes.IN_PROGRESS});\n            e.preventDefault();\n        }\n    }\n\n    toggleDropdown(e) {\n        if (e) {\n            e.preventDefault();\n        }\n\n        this.setState({showDropdown: !this.state.showDropdown});\n    }\n\n    handleAboutModal(e) {\n        e.preventDefault();\n\n        this.setState({\n            showAboutModal: true,\n            showDropdown: false\n        });\n    }\n\n    aboutModalDismissed() {\n        this.setState({showAboutModal: false});\n    }\n\n    toggleAccountSettingsModal(e) {\n        e.preventDefault();\n\n        this.setState({\n            showUserSettingsModal: !this.state.showUserSettingsModal,\n            showDropdown: false\n        });\n    }\n\n    showAddUsersToTeamModal(e) {\n        e.preventDefault();\n\n        this.setState({\n            showAddUsersToTeamModal: true,\n            showDropdown: false\n        });\n    }\n\n    hideAddUsersToTeamModal() {\n        this.setState({\n            showAddUsersToTeamModal: false\n        });\n    }\n\n    showInviteMemberModal(e) {\n        e.preventDefault();\n\n        this.setState({showDropdown: false});\n\n        GlobalActions.showInviteMemberModal();\n    }\n\n    showGetTeamInviteLinkModal(e) {\n        e.preventDefault();\n\n        this.setState({showDropdown: false});\n\n        GlobalActions.showGetTeamInviteLinkModal();\n    }\n\n    showTeamMembersModal(e) {\n        e.preventDefault();\n\n        this.setState({\n            showTeamMembersModal: true\n        });\n    }\n\n    hideTeamMembersModal() {\n        this.setState({\n            showTeamMembersModal: false\n        });\n    }\n\n    componentDidMount() {\n        TeamStore.addChangeListener(this.onTeamChange);\n        document.addEventListener('keydown', this.openAccountSettings);\n    }\n\n    onTeamChange() {\n        this.setState({\n            teamMembers: TeamStore.getMyTeamMembers(),\n            teamListings: TeamStore.getTeamListings()\n        });\n    }\n\n    componentWillUnmount() {\n        $(ReactDOM.findDOMNode(this.refs.dropdown)).off('hide.bs.dropdown');\n        TeamStore.removeChangeListener(this.onTeamChange);\n        document.removeEventListener('keydown', this.openAccountSettings);\n    }\n\n    openAccountSettings(e) {\n        if (Utils.cmdOrCtrlPressed(e) && e.shiftKey && e.keyCode === Constants.KeyCodes.A) {\n            this.toggleAccountSettingsModal(e);\n        }\n    }\n\n    renderCustomEmojiLink() {\n        if (window.mm_config.EnableCustomEmoji !== 'true' || !Utils.canCreateCustomEmoji(this.props.currentUser)) {\n            return null;\n        }\n\n        return (\n            <li>\n                <Link\n                    onClick={this.handleClick}\n                    to={'/' + this.props.teamName + '/emoji'}\n                >\n                    <FormattedMessage\n                        id='navbar_dropdown.emoji'\n                        defaultMessage='Custom Emoji'\n                    />\n                </Link>\n            </li>\n        );\n    }\n\n    render() {\n        const config = global.mm_config;\n        const currentUser = this.props.currentUser;\n        let teamLink = '';\n        let inviteLink = '';\n        let addMemberToTeam = '';\n        let manageLink = '';\n        let sysAdminLink = '';\n        let isAdmin = false;\n        let isSystemAdmin = false;\n        let teamSettings = null;\n        let integrationsLink = null;\n\n        if (!currentUser) {\n            return null;\n        }\n\n        if (currentUser != null) {\n            isAdmin = TeamStore.isTeamAdminForCurrentTeam() || UserStore.isSystemAdminForCurrentUser();\n            isSystemAdmin = UserStore.isSystemAdminForCurrentUser();\n\n            inviteLink = (\n                <li>\n                    <a\n                        href='#'\n                        onClick={this.showInviteMemberModal}\n                    >\n                        <FormattedMessage\n                            id='navbar_dropdown.inviteMember'\n                            defaultMessage='Send Email Invite'\n                        />\n                    </a>\n                </li>\n            );\n\n            addMemberToTeam = (\n                <li>\n                    <a\n                        id='addUsersToTeam'\n                        href='#'\n                        onClick={this.showAddUsersToTeamModal}\n                    >\n                        <FormattedMessage\n                            id='navbar_dropdown.addMemberToTeam'\n                            defaultMessage='Add Members to Team'\n                        />\n                    </a>\n                </li>\n            );\n\n            if (this.props.teamType === Constants.OPEN_TEAM && config.EnableUserCreation === 'true') {\n                teamLink = (\n                    <li>\n                        <a\n                            href='#'\n                            onClick={this.showGetTeamInviteLinkModal}\n                        >\n                            <FormattedMessage\n                                id='navbar_dropdown.teamLink'\n                                defaultMessage='Get Team Invite Link'\n                            />\n                        </a>\n                    </li>\n                );\n            }\n\n            if (global.window.mm_license.IsLicensed === 'true') {\n                if (config.RestrictTeamInvite === Constants.PERMISSIONS_SYSTEM_ADMIN && !isSystemAdmin) {\n                    teamLink = null;\n                    inviteLink = null;\n                    addMemberToTeam = null;\n                } else if (config.RestrictTeamInvite === Constants.PERMISSIONS_TEAM_ADMIN && !isAdmin) {\n                    teamLink = null;\n                    inviteLink = null;\n                    addMemberToTeam = null;\n                }\n            }\n        }\n\n        let membersName = (\n            <FormattedMessage\n                id='navbar_dropdown.manageMembers'\n                defaultMessage='Manage Members'\n            />\n        );\n\n        if (isAdmin) {\n            teamSettings = (\n                <li>\n                    <a\n                        href='#'\n                        data-toggle='modal'\n                        data-target='#team_settings'\n                        onClick={this.toggleDropdown}\n                    >\n                        <FormattedMessage\n                            id='navbar_dropdown.teamSettings'\n                            defaultMessage='Team Settings'\n                        />\n                    </a>\n                </li>\n            );\n        } else {\n            membersName = (\n                <FormattedMessage\n                    id='navbar_dropdown.viewMembers'\n                    defaultMessage='View Members'\n                />\n            );\n        }\n\n        manageLink = (\n            <li>\n                <a\n                    href='#'\n                    onClick={this.showTeamMembersModal}\n                >\n                    {membersName}\n                </a>\n            </li>\n        );\n\n        const integrationsEnabled =\n            config.EnableIncomingWebhooks === 'true' ||\n            config.EnableOutgoingWebhooks === 'true' ||\n            config.EnableCommands === 'true' ||\n            (config.EnableOAuthServiceProvider === 'true' && (isSystemAdmin || config.EnableOnlyAdminIntegrations !== 'true'));\n        if (integrationsEnabled && (isAdmin || config.EnableOnlyAdminIntegrations !== 'true')) {\n            integrationsLink = (\n                <li>\n                    <Link\n                        to={'/' + this.props.teamName + '/integrations'}\n                        onClick={this.handleClick}\n                    >\n                        <FormattedMessage\n                            id='navbar_dropdown.integrations'\n                            defaultMessage='Integrations'\n                        />\n                    </Link>\n                </li>\n            );\n        }\n\n        if (isSystemAdmin) {\n            sysAdminLink = (\n                <li>\n                    <Link\n                        id='systemConsole'\n                        to={'/admin_console'}\n                        onClick={this.handleClick}\n                    >\n                        <FormattedMessage\n                            id='navbar_dropdown.console'\n                            defaultMessage='System Console'\n                        />\n                    </Link>\n                </li>\n            );\n        }\n\n        const teams = [];\n        let moreTeams = false;\n\n        if (config.EnableTeamCreation === 'true' || UserStore.isSystemAdminForCurrentUser()) {\n            teams.push(\n                <li key='newTeam_li'>\n                    <Link\n                        key='newTeam_a'\n                        to='/create_team'\n                        onClick={this.handleClick}\n                    >\n                        <FormattedMessage\n                            id='navbar_dropdown.create'\n                            defaultMessage='Create a New Team'\n                        />\n                    </Link>\n                </li>\n            );\n        }\n\n        const isAlreadyMember = this.state.teamMembers.reduce((result, item) => {\n            result[item.team_id] = true;\n            return result;\n        }, {});\n\n        for (const id in this.state.teamListings) {\n            if (this.state.teamListings.hasOwnProperty(id) && !isAlreadyMember[id]) {\n                moreTeams = true;\n                break;\n            }\n        }\n\n        if (moreTeams) {\n            teams.push(\n                <li key='joinTeam_li'>\n                    <Link\n                        onClick={this.handleClick}\n                        to='/select_team'\n                    >\n                        <FormattedMessage\n                            id='navbar_dropdown.join'\n                            defaultMessage='Join Another Team'\n                        />\n                    </Link>\n                </li>\n            );\n        }\n\n        teams.push(\n            <li key='leaveTeam_li'>\n                <a\n                    href='#'\n                    onClick={GlobalActions.showLeaveTeamModal}\n                >\n                    <FormattedMessage\n                        id='navbar_dropdown.leave'\n                        defaultMessage='Leave Team'\n                    />\n                </a>\n            </li>\n        );\n\n        let helpLink = null;\n        if (config.HelpLink) {\n            helpLink = (\n                <li>\n                    <Link\n                        target='_blank'\n                        rel='noopener noreferrer'\n                        to={config.HelpLink}\n                    >\n                        <FormattedMessage\n                            id='navbar_dropdown.help'\n                            defaultMessage='Help'\n                        />\n                    </Link>\n                </li>\n            );\n        }\n\n        let reportLink = null;\n        if (config.ReportAProblemLink) {\n            reportLink = (\n                <li>\n                    <Link\n                        target='_blank'\n                        rel='noopener noreferrer'\n                        to={config.ReportAProblemLink}\n                    >\n                        <FormattedMessage\n                            id='navbar_dropdown.report'\n                            defaultMessage='Report a Problem'\n                        />\n                    </Link>\n                </li>\n            );\n        }\n\n        let nativeAppLink = null;\n        if (global.window.mm_config.AppDownloadLink && !UserAgent.isMobileApp()) {\n            nativeAppLink = (\n                <li>\n                    <Link\n                        target='_blank'\n                        rel='noopener noreferrer'\n                        to={global.window.mm_config.AppDownloadLink}\n                    >\n                        <FormattedMessage\n                            id='navbar_dropdown.nativeApps'\n                            defaultMessage='Download Apps'\n                        />\n                    </Link>\n                </li>\n            );\n        }\n\n        let teamMembersModal;\n        if (this.state.showTeamMembersModal) {\n            teamMembersModal = (\n                <TeamMembersModal\n                    onLoad={this.toggleDropdown}\n                    onHide={this.hideTeamMembersModal}\n                    isAdmin={isAdmin}\n                />\n            );\n        }\n\n        let addUsersToTeamModal;\n        if (this.state.showAddUsersToTeamModal) {\n            addUsersToTeamModal = (\n                <AddUsersToTeam\n                    onModalDismissed={this.hideAddUsersToTeamModal}\n                />\n            );\n        }\n\n        const accountSettings = (\n            <li>\n                <a\n                    id='accountSettings'\n                    href='#'\n                    onClick={this.toggleAccountSettingsModal}\n                >\n                    <FormattedMessage\n                        id='navbar_dropdown.accountSettings'\n                        defaultMessage='Account Settings'\n                    />\n                </a>\n            </li>\n        );\n\n        const about = (\n            <li>\n                <a\n                    href='#'\n                    onClick={this.handleAboutModal}\n                >\n                    <FormattedMessage\n                        id='navbar_dropdown.about'\n                        defaultMessage='About Mattermost'\n                    />\n                </a>\n            </li>\n        );\n\n        const logout = (\n            <li>\n                <a\n                    id='logout'\n                    href='#'\n                    onClick={() => GlobalActions.emitUserLoggedOutEvent()}\n                >\n                    <FormattedMessage\n                        id='navbar_dropdown.logout'\n                        defaultMessage='Logout'\n                    />\n                </a>\n            </li>\n        );\n\n        const customEmoji = this.renderCustomEmojiLink();\n\n        // Dividers.\n        let inviteDivider = null;\n        if (inviteLink || teamLink || addMemberToTeam) {\n            inviteDivider = <li className='divider'/>;\n        }\n\n        let teamDivider = null;\n        if (teamSettings || manageLink || teams) {\n            teamDivider = <li className='divider'/>;\n        }\n\n        let backstageDivider = null;\n        if (integrationsLink || customEmoji) {\n            backstageDivider = <li className='divider'/>;\n        }\n\n        let sysAdminDivider = null;\n        if (sysAdminLink) {\n            sysAdminDivider = <li className='divider'/>;\n        }\n\n        let helpDivider = null;\n        if (helpLink || reportLink || nativeAppLink || about) {\n            helpDivider = <li className='divider'/>;\n        }\n\n        let logoutDivider = null;\n        if (logout) {\n            logoutDivider = <li className='divider'/>;\n        }\n\n        return (\n            <Dropdown\n                id='sidebar-header-dropdown'\n                defaultOpen={this.state.showDropdown}\n                onClose={this.toggleDropdown}\n                className='sidebar-header-dropdown'\n                pullRight={true}\n            >\n                <SidebarHeaderDropdownButton\n                    bsRole='toggle'\n                    onClick={this.toggleDropdown}\n                />\n                <Dropdown.Menu>\n                    {accountSettings}\n                    {inviteDivider}\n                    {inviteLink}\n                    {teamLink}\n                    {addMemberToTeam}\n                    {teamDivider}\n                    {teamSettings}\n                    {manageLink}\n                    {teams}\n                    {backstageDivider}\n                    {integrationsLink}\n                    {customEmoji}\n                    {sysAdminDivider}\n                    {sysAdminLink}\n                    {helpDivider}\n                    {helpLink}\n                    {reportLink}\n                    {nativeAppLink}\n                    {about}\n                    {logoutDivider}\n                    {logout}\n                    <UserSettingsModal\n                        show={this.state.showUserSettingsModal}\n                        onModalDismissed={() => this.setState({showUserSettingsModal: false})}\n                    />\n                    {teamMembersModal}\n                    <AboutBuildModal\n                        show={this.state.showAboutModal}\n                        onModalDismissed={this.aboutModalDismissed}\n                    />\n                    {addUsersToTeamModal}\n                </Dropdown.Menu>\n            </Dropdown>\n        );\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./components/sidebar_header_dropdown.jsx","// Copyright (c) 2015 Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nimport React from 'react';\n\nimport Constants from 'utils/constants.jsx';\n\nexport default class SidebarHeaderDropdownButton extends React.PureComponent {\n    static propTypes = {\n        bsRole: React.PropTypes.oneOf(['toggle']).isRequired, // eslint-disable-line react/no-unused-prop-types\n        onClick: React.PropTypes.func.isRequired\n    };\n\n    render() {\n        return (\n            <a\n                href='#'\n                id='sidebarHeaderDropdownButton'\n                className='sidebar-header-dropdown__toggle'\n                onClick={this.props.onClick}\n            >\n                <span\n                    className='sidebar-header-dropdown__icon'\n                    dangerouslySetInnerHTML={{__html: Constants.MENU_ICON}}\n                />\n            </a>\n        );\n    }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./components/sidebar_header_dropdown_button.jsx","// Copyright (c) 2015 Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\n// Indicator for the left sidebar which indicate if there's unread posts in a channel that is not shown\n// because it is either above or below the screen\nimport React from 'react';\n\nexport default class UnreadChannelIndicator extends React.Component {\n    render() {\n        let displayValue = 'none';\n        if (this.props.show) {\n            displayValue = 'block';\n        }\n        return (\n            <div\n                className={'nav-pills__unread-indicator ' + this.props.extraClass}\n                style={{display: displayValue}}\n            >\n                {this.props.text}\n            </div>\n        );\n    }\n}\n\nUnreadChannelIndicator.defaultProps = {\n    show: false,\n    extraClass: '',\n    text: ''\n};\nUnreadChannelIndicator.propTypes = {\n    show: React.PropTypes.bool,\n    extraClass: React.PropTypes.string,\n    text: React.PropTypes.object\n};\n\n\n\n// WEBPACK FOOTER //\n// ./components/unread_channel_indicator.jsx","module.exports = __webpack_public_path__ + \"files/2c9d31cec343005b617e3b39fdb20895.png\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./images/favicon/redfavicon-16x16.png\n// module id = 2059\n// module chunks = 0","// Copyright (c) 2015 Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nimport $ from 'jquery';\nimport ReactDOM from 'react-dom';\nimport NewChannelFlow from './new_channel_flow.jsx';\nimport MoreDirectChannels from './more_direct_channels.jsx';\nimport MoreChannels from 'components/more_channels.jsx';\nimport SidebarHeader from './sidebar_header.jsx';\nimport UnreadChannelIndicator from './unread_channel_indicator.jsx';\nimport TutorialTip from './tutorial/tutorial_tip.jsx';\nimport StatusIcon from './status_icon.jsx';\n\nimport ChannelStore from 'stores/channel_store.jsx';\nimport UserStore from 'stores/user_store.jsx';\nimport TeamStore from 'stores/team_store.jsx';\nimport PreferenceStore from 'stores/preference_store.jsx';\nimport ModalStore from 'stores/modal_store.jsx';\n\nimport * as AsyncClient from 'utils/async_client.jsx';\nimport {sortTeamsByDisplayName} from 'utils/team_utils.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport * as ChannelUtils from 'utils/channel_utils.jsx';\nimport * as ChannelActions from 'actions/channel_actions.jsx';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport {ActionTypes, Constants} from 'utils/constants.jsx';\n\nimport {FormattedMessage, FormattedHTMLMessage} from 'react-intl';\n\nconst Preferences = Constants.Preferences;\nconst TutorialSteps = Constants.TutorialSteps;\n\nimport {Tooltip, OverlayTrigger} from 'react-bootstrap';\nimport loadingGif from 'images/load.gif';\n\nimport React from 'react';\nimport {browserHistory, Link} from 'react-router/es6';\n\nimport favicon from 'images/favicon/favicon-16x16.png';\nimport redFavicon from 'images/favicon/redfavicon-16x16.png';\n\nexport default class Sidebar extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.badgesActive = false;\n        this.firstUnreadChannel = null;\n        this.lastUnreadChannel = null;\n\n        this.getStateFromStores = this.getStateFromStores.bind(this);\n\n        this.onChange = this.onChange.bind(this);\n        this.onModalChange = this.onModalChange.bind(this);\n        this.onInChannelChange = this.onInChannelChange.bind(this);\n        this.onScroll = this.onScroll.bind(this);\n        this.updateUnreadIndicators = this.updateUnreadIndicators.bind(this);\n        this.handleLeaveDirectChannel = this.handleLeaveDirectChannel.bind(this);\n\n        this.showMoreChannelsModal = this.showMoreChannelsModal.bind(this);\n        this.hideMoreChannelsModal = this.hideMoreChannelsModal.bind(this);\n        this.showNewChannelModal = this.showNewChannelModal.bind(this);\n        this.hideNewChannelModal = this.hideNewChannelModal.bind(this);\n        this.showMoreDirectChannelsModal = this.showMoreDirectChannelsModal.bind(this);\n        this.hideMoreDirectChannelsModal = this.hideMoreDirectChannelsModal.bind(this);\n\n        this.createChannelElement = this.createChannelElement.bind(this);\n        this.updateTitle = this.updateTitle.bind(this);\n\n        this.navigateChannelShortcut = this.navigateChannelShortcut.bind(this);\n        this.navigateUnreadChannelShortcut = this.navigateUnreadChannelShortcut.bind(this);\n        this.getDisplayedChannels = this.getDisplayedChannels.bind(this);\n        this.updateScrollbarOnChannelChange = this.updateScrollbarOnChannelChange.bind(this);\n\n        this.isLeaving = new Map();\n        this.isSwitchingChannel = false;\n        this.closedDirectChannel = false;\n\n        const state = this.getStateFromStores();\n        state.newChannelModalType = '';\n        state.showDirectChannelsModal = false;\n        state.showMoreChannelsModal = false;\n        state.loadingDMChannel = -1;\n        state.inChannelChange = false;\n        this.state = state;\n    }\n\n    getTotalUnreadCount() {\n        let msgs = 0;\n        let mentions = 0;\n        const unreadCounts = this.state.unreadCounts;\n        const teamMembers = this.state.teamMembers;\n\n        teamMembers.forEach((member) => {\n            if (member.team_id !== this.state.currentTeam.id) {\n                msgs += member.msg_count || 0;\n                mentions += member.mention_count || 0;\n            }\n        });\n\n        Object.keys(unreadCounts).forEach((chId) => {\n            const channel = ChannelStore.get(chId);\n\n            if (channel && (channel.type === Constants.DM_CHANNEL || channel.type === Constants.GM_CHANNEL || channel.team_id === this.state.currentTeam.id)) {\n                msgs += unreadCounts[chId].msgs;\n                mentions += unreadCounts[chId].mentions;\n            }\n        });\n\n        return {msgs, mentions};\n    }\n\n    getStateFromStores() {\n        const members = ChannelStore.getMyMembers();\n        const teamMembers = TeamStore.getMyTeamMembers();\n        const currentChannelId = ChannelStore.getCurrentId();\n        const tutorialStep = PreferenceStore.getInt(Preferences.TUTORIAL_STEP, UserStore.getCurrentId(), 999);\n\n        const allChannels = ChannelStore.getAll().map((channel) => Object.assign({}, channel));\n        const channelList = ChannelUtils.buildDisplayableChannelList(allChannels);\n\n        return {\n            activeId: currentChannelId,\n            members,\n            teamMembers,\n            ...channelList,\n            unreadCounts: JSON.parse(JSON.stringify(ChannelStore.getUnreadCounts())),\n            showTutorialTip: tutorialStep === TutorialSteps.CHANNEL_POPOVER,\n            currentTeam: TeamStore.getCurrent(),\n            currentUser: UserStore.getCurrentUser(),\n            townSquare: ChannelStore.getByName(Constants.DEFAULT_CHANNEL),\n            offTopic: ChannelStore.getByName(Constants.OFFTOPIC_CHANNEL)\n        };\n    }\n\n    onInChannelChange() {\n        this.setState({inChannelChange: !this.state.inChannelChange});\n    }\n\n    componentDidMount() {\n        ChannelStore.addChangeListener(this.onChange);\n        UserStore.addChangeListener(this.onChange);\n        UserStore.addInTeamChangeListener(this.onChange);\n        UserStore.addInChannelChangeListener(this.onInChannelChange);\n        UserStore.addStatusesChangeListener(this.onChange);\n        TeamStore.addChangeListener(this.onChange);\n        PreferenceStore.addChangeListener(this.onChange);\n        ModalStore.addModalListener(ActionTypes.TOGGLE_DM_MODAL, this.onModalChange);\n\n        this.updateTitle();\n        this.updateUnreadIndicators();\n\n        document.addEventListener('keydown', this.navigateChannelShortcut);\n        document.addEventListener('keydown', this.navigateUnreadChannelShortcut);\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (!Utils.areObjectsEqual(nextState, this.state)) {\n            return true;\n        }\n        return false;\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        this.updateTitle();\n        this.updateUnreadIndicators();\n        if (!Utils.isMobile()) {\n            $('.sidebar--left .nav-pills__container').perfectScrollbar();\n        }\n\n        // reset the scrollbar upon switching teams\n        if (this.state.currentTeam !== prevState.currentTeam) {\n            this.refs.container.scrollTop = 0;\n            $('.nav-pills__container').perfectScrollbar('update');\n        }\n\n        // close the LHS on mobile when you change channels\n        if (this.state.activeId !== prevState.activeId) {\n            if (this.closedDirectChannel) {\n                this.closedDirectChannel = false;\n            } else {\n                $('.app__body .inner-wrap').removeClass('move--right');\n                $('.app__body .sidebar--left').removeClass('move--right');\n                $('.multi-teams .team-sidebar').removeClass('move--right');\n            }\n        }\n    }\n\n    componentWillUnmount() {\n        ChannelStore.removeChangeListener(this.onChange);\n        UserStore.removeChangeListener(this.onChange);\n        UserStore.removeInTeamChangeListener(this.onChange);\n        UserStore.removeInChannelChangeListener(this.onChange);\n        UserStore.removeStatusesChangeListener(this.onChange);\n        TeamStore.removeChangeListener(this.onChange);\n        PreferenceStore.removeChangeListener(this.onChange);\n        ModalStore.removeModalListener(ActionTypes.TOGGLE_DM_MODAL, this.onModalChange);\n        document.removeEventListener('keydown', this.navigateChannelShortcut);\n        document.removeEventListener('keydown', this.navigateUnreadChannelShortcut);\n    }\n\n    onModalChange(value, args) {\n        this.showMoreDirectChannelsModal(args.startingUsers);\n    }\n\n    onChange() {\n        if (this.state.currentTeam.id !== TeamStore.getCurrentId()) {\n            ChannelStore.clear();\n        }\n        this.setState(this.getStateFromStores());\n        this.updateTitle();\n    }\n\n    updateTitle() {\n        const channel = ChannelStore.getCurrent();\n        if (channel && this.state.currentTeam) {\n            let currentSiteName = '';\n            if (global.window.mm_config.SiteName != null) {\n                currentSiteName = global.window.mm_config.SiteName;\n            }\n\n            let currentChannelName = channel.display_name;\n            if (channel.type === Constants.DM_CHANNEL) {\n                const teammate = Utils.getDirectTeammate(channel.id);\n                if (teammate != null) {\n                    currentChannelName = teammate.username;\n                }\n            } else if (channel.type === Constants.GM_CHANNEL) {\n                currentChannelName = ChannelUtils.buildGroupChannelName(channel.id);\n            }\n\n            const unread = this.getTotalUnreadCount();\n            const mentionTitle = unread.mentions > 0 ? '(' + unread.mentions + ') ' : '';\n            const unreadTitle = unread.msgs > 0 ? '* ' : '';\n            document.title = mentionTitle + unreadTitle + currentChannelName + ' - ' + this.state.currentTeam.display_name + ' ' + currentSiteName;\n        }\n    }\n\n    onScroll() {\n        this.updateUnreadIndicators();\n    }\n\n    updateUnreadIndicators() {\n        const container = $(ReactDOM.findDOMNode(this.refs.container));\n\n        var showTopUnread = false;\n        var showBottomUnread = false;\n\n        if (this.firstUnreadChannel) {\n            var firstUnreadElement = $(ReactDOM.findDOMNode(this.refs[this.firstUnreadChannel]));\n\n            if (firstUnreadElement.position().top + firstUnreadElement.height() < 0) {\n                showTopUnread = true;\n            }\n        }\n\n        if (this.lastUnreadChannel) {\n            var lastUnreadElement = $(ReactDOM.findDOMNode(this.refs[this.lastUnreadChannel]));\n\n            if (lastUnreadElement.position().top > container.height()) {\n                showBottomUnread = true;\n            }\n        }\n\n        this.setState({\n            showTopUnread,\n            showBottomUnread\n        });\n    }\n\n    updateScrollbarOnChannelChange(channel) {\n        const curChannel = this.refs[channel.name].getBoundingClientRect();\n        if ((curChannel.top - Constants.CHANNEL_SCROLL_ADJUSTMENT < 0) || (curChannel.top + curChannel.height > this.refs.container.getBoundingClientRect().height)) {\n            this.refs.container.scrollTop = this.refs.container.scrollTop + (curChannel.top - Constants.CHANNEL_SCROLL_ADJUSTMENT);\n            $('.nav-pills__container').perfectScrollbar('update');\n        }\n    }\n\n    navigateChannelShortcut(e) {\n        if (e.altKey && !e.shiftKey && (e.keyCode === Constants.KeyCodes.UP || e.keyCode === Constants.KeyCodes.DOWN)) {\n            e.preventDefault();\n\n            if (this.isSwitchingChannel) {\n                return;\n            }\n\n            this.isSwitchingChannel = true;\n            const allChannels = this.getDisplayedChannels();\n            const curChannelId = this.state.activeId;\n            let curIndex = -1;\n            for (let i = 0; i < allChannels.length; i++) {\n                if (allChannels[i].id === curChannelId) {\n                    curIndex = i;\n                }\n            }\n            let nextChannel = allChannels[curIndex];\n            let nextIndex = curIndex;\n            if (e.keyCode === Constants.KeyCodes.DOWN) {\n                nextIndex = curIndex + 1;\n            } else if (e.keyCode === Constants.KeyCodes.UP) {\n                nextIndex = curIndex - 1;\n            }\n            nextChannel = allChannels[Utils.mod(nextIndex, allChannels.length)];\n            ChannelActions.goToChannel(nextChannel);\n            this.updateScrollbarOnChannelChange(nextChannel);\n            this.isSwitchingChannel = false;\n        }\n    }\n\n    navigateUnreadChannelShortcut(e) {\n        if (e.altKey && e.shiftKey && (e.keyCode === Constants.KeyCodes.UP || e.keyCode === Constants.KeyCodes.DOWN)) {\n            e.preventDefault();\n\n            if (this.isSwitchingChannel) {\n                return;\n            }\n\n            this.isSwitchingChannel = true;\n            const allChannels = this.getDisplayedChannels();\n            const curChannelId = this.state.activeId;\n            let curIndex = -1;\n            for (let i = 0; i < allChannels.length; i++) {\n                if (allChannels[i].id === curChannelId) {\n                    curIndex = i;\n                }\n            }\n            let nextChannel = allChannels[curIndex];\n            let nextIndex = curIndex;\n            let count = 0;\n            let increment = 0;\n            if (e.keyCode === Constants.KeyCodes.UP) {\n                increment = -1;\n            } else if (e.keyCode === Constants.KeyCodes.DOWN) {\n                increment = 1;\n            }\n            let unreadCounts = ChannelStore.getUnreadCount(allChannels[nextIndex].id);\n            while (count < allChannels.length && unreadCounts.msgs === 0 && unreadCounts.mentions === 0) {\n                nextIndex += increment;\n                count++;\n                nextIndex = Utils.mod(nextIndex, allChannels.length);\n                unreadCounts = ChannelStore.getUnreadCount(allChannels[nextIndex].id);\n            }\n            if (unreadCounts.msgs !== 0 || unreadCounts.mentions !== 0) {\n                nextChannel = allChannels[nextIndex];\n                ChannelActions.goToChannel(nextChannel);\n                this.updateScrollbarOnChannelChange(nextChannel);\n            }\n            this.isSwitchingChannel = false;\n        }\n    }\n\n    getDisplayedChannels() {\n        return this.state.favoriteChannels.concat(this.state.publicChannels).concat(this.state.privateChannels).concat(this.state.directAndGroupChannels);\n    }\n\n    handleLeaveDirectChannel(e, channel) {\n        e.preventDefault();\n\n        if (!this.isLeaving.get(channel.id)) {\n            this.isLeaving.set(channel.id, true);\n\n            let id;\n            let category;\n            if (channel.type === Constants.DM_CHANNEL) {\n                id = channel.teammate_id;\n                category = Constants.Preferences.CATEGORY_DIRECT_CHANNEL_SHOW;\n            } else {\n                id = channel.id;\n                category = Constants.Preferences.CATEGORY_GROUP_CHANNEL_SHOW;\n            }\n\n            AsyncClient.savePreference(\n                category,\n                id,\n                'false',\n                () => {\n                    this.isLeaving.set(channel.id, false);\n                },\n                () => {\n                    this.isLeaving.set(channel.id, false);\n                }\n            );\n\n            if (ChannelUtils.isFavoriteChannel(channel)) {\n                ChannelActions.unmarkFavorite(channel.id);\n            }\n\n            this.setState(this.getStateFromStores());\n        }\n\n        if (channel.id === this.state.activeId) {\n            this.closedDirectChannel = true;\n            browserHistory.push('/' + this.state.currentTeam.name + '/channels/town-square');\n        }\n    }\n\n    showMoreChannelsModal() {\n        this.setState({showMoreChannelsModal: true});\n        trackEvent('ui', 'ui_channels_more_public');\n    }\n\n    hideMoreChannelsModal() {\n        this.setState({showMoreChannelsModal: false});\n    }\n\n    showNewChannelModal(type) {\n        this.setState({newChannelModalType: type});\n    }\n\n    hideNewChannelModal() {\n        this.setState({newChannelModalType: ''});\n    }\n\n    showMoreDirectChannelsModal(startingUsers) {\n        trackEvent('ui', 'ui_channels_more_direct');\n        this.setState({showDirectChannelsModal: true, startingUsers});\n    }\n\n    hideMoreDirectChannelsModal() {\n        this.setState({showDirectChannelsModal: false, startingUsers: null});\n    }\n\n    openLeftSidebar() {\n        if (Utils.isMobile()) {\n            setTimeout(() => {\n                document.querySelector('.app__body .inner-wrap').classList.add('move--right');\n                document.querySelector('.app__body .sidebar--left').classList.add('move--right');\n            });\n        }\n    }\n\n    createTutorialTip() {\n        const screens = [];\n\n        let townSquareDisplayName = Constants.DEFAULT_CHANNEL_UI_NAME;\n        if (this.state.townSquare) {\n            townSquareDisplayName = this.state.townSquare.display_name;\n        }\n\n        let offTopicDisplayName = Constants.OFFTOPIC_CHANNEL_UI_NAME;\n        if (this.state.offTopic) {\n            offTopicDisplayName = this.state.offTopic.display_name;\n        }\n\n        screens.push(\n            <div>\n                <FormattedHTMLMessage\n                    id='sidebar.tutorialScreen1'\n                    defaultMessage='<h4>Channels</h4><p><strong>Channels</strong> organize conversations across different topics. They’re open to everyone on your team. To send private communications use <strong>Direct Messages</strong> for a single person or <strong>Private Channels</strong> for multiple people.</p>'\n                />\n            </div>\n        );\n\n        screens.push(\n            <div>\n                <FormattedHTMLMessage\n                    id='sidebar.tutorialScreen2'\n                    defaultMessage='<h4>\"{townsquare}\" and \"{offtopic}\" channels</h4>\n                    <p>Here are two public channels to start:</p>\n                    <p><strong>{townsquare}</strong> is a place for team-wide communication. Everyone in your team is a member of this channel.</p>\n                    <p><strong>{offtopic}</strong> is a place for fun and humor outside of work-related channels. You and your team can decide what other channels to create.</p>'\n                    values={{\n                        townsquare: townSquareDisplayName,\n                        offtopic: offTopicDisplayName\n                    }}\n                />\n            </div>\n        );\n\n        screens.push(\n            <div>\n                <FormattedHTMLMessage\n                    id='sidebar.tutorialScreen3'\n                    defaultMessage='<h4>Creating and Joining Channels</h4>\n                    <p>Click <strong>\"More...\"</strong> to create a new channel or join an existing one.</p>\n                    <p>You can also create a new public or private channel by clicking the <strong>\"+\" symbol</strong> next to the public or private channel header.</p>'\n                />\n            </div>\n        );\n\n        return (\n            <TutorialTip\n                placement='right'\n                screens={screens}\n                overlayClass='tip-overlay--sidebar'\n                diagnosticsTag='tutorial_tip_2_channels'\n            />\n        );\n    }\n\n    createChannelElement(channel, index, arr, handleClose) {\n        const members = this.state.members;\n        const activeId = this.state.activeId;\n        const channelMember = members[channel.id];\n        const unreadCount = this.state.unreadCounts[channel.id] || {msgs: 0, mentions: 0};\n        let msgCount;\n\n        let linkClass = '';\n        if (channel.id === activeId) {\n            linkClass = 'active';\n        }\n\n        let rowClass = 'sidebar-channel';\n\n        var unread = false;\n        if (channelMember) {\n            msgCount = unreadCount.msgs + unreadCount.mentions;\n            unread = msgCount > 0 || channelMember.mention_count > 0;\n        }\n\n        if (unread) {\n            rowClass += ' unread-title';\n\n            if (channel.id !== activeId) {\n                if (!this.firstUnreadChannel) {\n                    this.firstUnreadChannel = channel.name;\n                }\n                this.lastUnreadChannel = channel.name;\n            }\n        }\n\n        var badge = null;\n        if (channelMember) {\n            if (unreadCount.mentions) {\n                badge = <span className='badge pull-right small'>{unreadCount.mentions}</span>;\n                this.badgesActive = true;\n            }\n        } else if (this.state.loadingDMChannel === index && channel.type === Constants.DM_CHANNEL) {\n            badge = (\n                <img\n                    className='channel-loading-gif pull-right'\n                    src={loadingGif}\n                />\n            );\n        }\n\n        if (msgCount > 0) {\n            rowClass += ' has-badge';\n        }\n\n        let displayName = channel.display_name;\n\n        var icon = null;\n        if (channel.type === Constants.OPEN_CHANNEL) {\n            icon = <div className='status'><i className='fa fa-globe'/></div>;\n        } else if (channel.type === Constants.PRIVATE_CHANNEL) {\n            icon = <div className='status'><i className='fa fa-lock'/></div>;\n        } else if (channel.type === Constants.GM_CHANNEL) {\n            displayName = ChannelUtils.buildGroupChannelName(channel.id);\n            icon = <div className='status status--group'>{UserStore.getProfileListInChannel(channel.id, true).length}</div>;\n        } else {\n            // set up status icon for direct message channels (status is null for other channel types)\n            icon = (\n                <StatusIcon\n                    type='avatar'\n                    status={channel.status}\n                />);\n        }\n\n        let closeButton = null;\n        const removeTooltip = (\n            <Tooltip id='remove-dm-tooltip'>\n                <FormattedMessage\n                    id='sidebar.removeList'\n                    defaultMessage='Remove from list'\n                />\n            </Tooltip>\n        );\n        if (handleClose && !badge) {\n            closeButton = (\n                <OverlayTrigger\n                    delayShow={1000}\n                    placement='top'\n                    overlay={removeTooltip}\n                >\n                    <span\n                        onClick={(e) => handleClose(e, channel)}\n                        className='btn-close'\n                    >\n                        {'×'}\n                    </span>\n                </OverlayTrigger>\n            );\n\n            rowClass += ' has-close';\n        }\n\n        let tutorialTip = null;\n        if (this.state.showTutorialTip && channel.name === Constants.DEFAULT_CHANNEL) {\n            tutorialTip = this.createTutorialTip();\n            this.openLeftSidebar();\n        }\n\n        let link = '';\n        if (channel.fake) {\n            link = '/' + this.state.currentTeam.name + '/channels/' + channel.name + '?fakechannel=' + encodeURIComponent(JSON.stringify(channel));\n        } else {\n            link = '/' + this.state.currentTeam.name + '/channels/' + channel.name;\n        }\n\n        return (\n            <li\n                key={channel.name}\n                ref={channel.name}\n                className={linkClass}\n            >\n                <Link\n                    to={link}\n                    className={rowClass}\n                    onClick={this.trackChannelSelectedEvent}\n                >\n                    {icon}\n                    {displayName}\n                    {badge}\n                    {closeButton}\n                </Link>\n                {tutorialTip}\n            </li>\n        );\n    }\n\n    trackChannelSelectedEvent() {\n        trackEvent('ui', 'ui_channel_selected');\n    }\n\n    render() {\n        // Check if we have all info needed to render\n        if (this.state.currentTeam == null || this.state.currentUser == null) {\n            return (<div/>);\n        }\n\n        this.lastBadgesActive = this.badgesActive;\n        this.badgesActive = false;\n\n        // keep track of the first and last unread channels so we can use them to set the unread indicators\n        this.firstUnreadChannel = null;\n        this.lastUnreadChannel = null;\n\n        // create elements for all 4 types of channels\n        const favoriteItems = this.state.favoriteChannels.\n            sort(sortTeamsByDisplayName).\n            map((channel, index, arr) => {\n                if (channel.type === Constants.DM_CHANNEL) {\n                    return this.createChannelElement(channel, index, arr, this.handleLeaveDirectChannel);\n                }\n\n                return this.createChannelElement(channel);\n            });\n\n        const publicChannelItems = this.state.publicChannels.map(this.createChannelElement);\n\n        const privateChannelItems = this.state.privateChannels.map(this.createChannelElement);\n\n        const directMessageItems = this.state.directAndGroupChannels.map((channel, index, arr) => {\n            return this.createChannelElement(channel, index, arr, this.handleLeaveDirectChannel);\n        });\n\n        // update the favicon to show if there are any notifications\n        if (this.lastBadgesActive !== this.badgesActive) {\n            var link = document.createElement('link');\n            link.type = 'image/x-icon';\n            link.rel = 'shortcut icon';\n            link.id = 'favicon';\n            if (this.badgesActive) {\n                link.href = redFavicon;\n            } else {\n                link.href = favicon;\n            }\n            var head = document.getElementsByTagName('head')[0];\n            var oldLink = document.getElementById('favicon');\n            if (oldLink) {\n                head.removeChild(oldLink);\n            }\n            head.appendChild(link);\n        }\n\n        var directMessageMore = (\n            <li key='more'>\n                <a\n                    href='#'\n                    onClick={(e) => {\n                        e.preventDefault();\n                        this.showMoreDirectChannelsModal();\n                    }}\n                >\n                    <FormattedMessage\n                        id='sidebar.moreElips'\n                        defaultMessage='More...'\n                    />\n                </a>\n            </li>\n        );\n\n        let showChannelModal = false;\n        if (this.state.newChannelModalType !== '') {\n            showChannelModal = true;\n        }\n\n        const createChannelTootlip = (\n            <Tooltip id='new-channel-tooltip' >\n                <FormattedMessage\n                    id='sidebar.createChannel'\n                    defaultMessage='Create new public channel'\n                />\n            </Tooltip>\n        );\n        const createGroupTootlip = (\n            <Tooltip id='new-group-tooltip'>\n                <FormattedMessage\n                    id='sidebar.createGroup'\n                    defaultMessage='Create new private channel'\n                />\n            </Tooltip>\n        );\n\n        const above = (\n            <FormattedMessage\n                id='sidebar.unreadAbove'\n                defaultMessage='Unread post(s) above'\n            />\n        );\n\n        const below = (\n            <FormattedMessage\n                id='sidebar.unreadBelow'\n                defaultMessage='Unread post(s) below'\n            />\n        );\n\n        const isAdmin = TeamStore.isTeamAdminForCurrentTeam() || UserStore.isSystemAdminForCurrentUser();\n        const isSystemAdmin = UserStore.isSystemAdminForCurrentUser();\n\n        let createPublicChannelIcon = (\n            <OverlayTrigger\n                delayShow={500}\n                placement='top'\n                overlay={createChannelTootlip}\n            >\n                <a\n                    className='add-channel-btn'\n                    href='#'\n                    onClick={this.showNewChannelModal.bind(this, Constants.OPEN_CHANNEL)}\n                >\n                    {'+'}\n                </a>\n            </OverlayTrigger>\n        );\n\n        let createPrivateChannelIcon = (\n            <OverlayTrigger\n                delayShow={500}\n                placement='top'\n                overlay={createGroupTootlip}\n            >\n                <a\n                    className='add-channel-btn'\n                    href='#'\n                    onClick={this.showNewChannelModal.bind(this, Constants.PRIVATE_CHANNEL)}\n                >\n                    {'+'}\n                </a>\n            </OverlayTrigger>\n        );\n\n        if (!ChannelUtils.showCreateOption(Constants.OPEN_CHANNEL, isAdmin, isSystemAdmin)) {\n            createPublicChannelIcon = null;\n        }\n\n        if (!ChannelUtils.showCreateOption(Constants.PRIVATE_CHANNEL, isAdmin, isSystemAdmin)) {\n            createPrivateChannelIcon = null;\n        }\n\n        let moreDirectChannelsModal;\n        if (this.state.showDirectChannelsModal) {\n            moreDirectChannelsModal = (\n                <MoreDirectChannels\n                    onModalDismissed={this.hideMoreDirectChannelsModal}\n                    startingUsers={this.state.startingUsers}\n                />\n            );\n        }\n\n        let moreChannelsModal;\n        if (this.state.showMoreChannelsModal) {\n            moreChannelsModal = (\n                <MoreChannels\n                    onModalDismissed={this.hideMoreChannelsModal}\n                    handleNewChannel={() => {\n                        this.hideMoreChannelsModal();\n                        this.showNewChannelModal(Constants.OPEN_CHANNEL);\n                    }}\n                />\n            );\n        }\n\n        return (\n            <div\n                className='sidebar--left'\n                id='sidebar-left'\n                key='sidebar-left'\n            >\n                <NewChannelFlow\n                    show={showChannelModal}\n                    channelType={this.state.newChannelModalType}\n                    onModalDismissed={this.hideNewChannelModal}\n                />\n                {moreDirectChannelsModal}\n                {moreChannelsModal}\n\n                <SidebarHeader\n                    teamDisplayName={this.state.currentTeam.display_name}\n                    teamDescription={this.state.currentTeam.description}\n                    teamName={this.state.currentTeam.name}\n                    teamType={this.state.currentTeam.type}\n                    currentUser={this.state.currentUser}\n                />\n\n                <UnreadChannelIndicator\n                    show={this.state.showTopUnread}\n                    extraClass='nav-pills__unread-indicator-top'\n                    text={above}\n                />\n                <UnreadChannelIndicator\n                    show={this.state.showBottomUnread}\n                    extraClass='nav-pills__unread-indicator-bottom'\n                    text={below}\n                />\n\n                <div\n                    ref='container'\n                    className='nav-pills__container'\n                    onScroll={this.onScroll}\n                >\n                    {favoriteItems.length !== 0 && <ul className='nav nav-pills nav-stacked'>\n                        <li>\n                            <h4>\n                                <FormattedMessage\n                                    id='sidebar.favorite'\n                                    defaultMessage='Favorites'\n                                />\n                            </h4>\n                        </li>\n                        {favoriteItems}\n                    </ul>}\n                    <ul className='nav nav-pills nav-stacked'>\n                        <li>\n                            <h4>\n                                <FormattedMessage\n                                    id='sidebar.channels'\n                                    defaultMessage='Channels'\n                                />\n                                {createPublicChannelIcon}\n                            </h4>\n                        </li>\n                        {publicChannelItems}\n                        <li>\n                            <a\n                                href='#'\n                                className='nav-more'\n                                onClick={this.showMoreChannelsModal}\n                            >\n                                <FormattedMessage\n                                    id='sidebar.moreElips'\n                                    defaultMessage='More...'\n                                />\n                            </a>\n                        </li>\n                    </ul>\n\n                    <ul className='nav nav-pills nav-stacked'>\n                        <li>\n                            <h4>\n                                <FormattedMessage\n                                    id='sidebar.pg'\n                                    defaultMessage='Private Channels'\n                                />\n                                {createPrivateChannelIcon}\n                            </h4>\n                        </li>\n                        {privateChannelItems}\n                    </ul>\n                    <ul className='nav nav-pills nav-stacked'>\n                        <li>\n                            <h4>\n                                <FormattedMessage\n                                    id='sidebar.direct'\n                                    defaultMessage='Direct Messages'\n                                />\n                            </h4>\n                        </li>\n                        {directMessageItems}\n                        {directMessageMore}\n                    </ul>\n                </div>\n            </div>\n        );\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./components/sidebar.jsx"],"sourceRoot":""}