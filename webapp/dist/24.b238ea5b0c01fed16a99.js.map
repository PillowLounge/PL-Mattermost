{"version":3,"sources":["webpack:///24.b238ea5b0c01fed16a99.js","webpack:///./components/signup/components/signup_email.jsx"],"names":["webpackJsonp","1727","module","exports","__webpack_require__","global","_interopRequireWildcard","obj","__esModule","newObj","key","Object","prototype","hasOwnProperty","call","default","_interopRequireDefault","defineProperty","value","_stringify","_stringify2","_getPrototypeOf","_getPrototypeOf2","_classCallCheck2","_classCallCheck3","_possibleConstructorReturn2","_possibleConstructorReturn3","_createClass2","_createClass3","_inherits2","_inherits3","_loading_screen","_loading_screen2","_global_actions","GlobalActions","_diagnostics_actions","_browser_store","_browser_store2","_team_actions","_user_actions","_utils","Utils","_constants","_constants2","_react","_react2","_reactIntl","_es","_logo","_logo2","SignupEmail","_React$Component","props","this","_this","__proto__","handleSubmit","bind","getInviteInfo","renderEmailSignup","isUserValid","state","get","location","PropTypes","object","trackEvent","data","query","d","hash","h","inviteId","id","email","teamDisplayName","teamName","teamId","loading","serverError","noOpenServerError","length","parsedData","JSON","parse","display_name","name","inviteData","createElement","FormattedMessage","defaultMessage","_this2","emitInitialLoad","loadDefaultLocale","redirect_to","browserHistory","push","redirectUserToDefaultTeam","user","_this3","loginById","password","setGlobalItem","usedBefore","err","encodeURIComponent","setState","message","providedEmail","refs","trim","nameError","emailError","passwordError","isEmail","providedUsername","toLowerCase","usernameError","isValidUsername","values","min","MIN_USERNAME_LENGTH","max","MAX_USERNAME_LENGTH","providedPassword","pwdError","isValidPassword","e","_this4","preventDefault","username","allow_marketing","createUserWithInvite","handleSignupSuccess","emailHelpText","className","emailDivStyle","nameHelpText","nameDivStyle","passwordDivStyle","yourEmailIs","FormattedHTMLMessage","siteName","window","mm_config","SiteName","emailContainerStyle","type","ref","defaultValue","placeholder","maxLength","autoFocus","spellCheck","autoCapitalize","onClick","emailSignup","EnableSignUpWithEmail","terms","TermsOfServiceLink","PrivacyPolicyLink","description","mm_license","IsLicensed","CustomBrand","EnableCustomBrand","CustomDescriptionText","Link","to","src","Component"],"mappings":"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","file":"24.b238ea5b0c01fed16a99.js","sourcesContent":["webpackJsonp([24],{\n\n/***/ 1727:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _stringify = __webpack_require__(71);\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _getPrototypeOf = __webpack_require__(6);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(2);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _createClass2 = __webpack_require__(5);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _inherits2 = __webpack_require__(3);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _loading_screen = __webpack_require__(164);\n\nvar _loading_screen2 = _interopRequireDefault(_loading_screen);\n\nvar _global_actions = __webpack_require__(41);\n\nvar GlobalActions = _interopRequireWildcard(_global_actions);\n\nvar _diagnostics_actions = __webpack_require__(165);\n\nvar _browser_store = __webpack_require__(79);\n\nvar _browser_store2 = _interopRequireDefault(_browser_store);\n\nvar _team_actions = __webpack_require__(333);\n\nvar _user_actions = __webpack_require__(46);\n\nvar _utils = __webpack_require__(11);\n\nvar Utils = _interopRequireWildcard(_utils);\n\nvar _constants = __webpack_require__(8);\n\nvar _constants2 = _interopRequireDefault(_constants);\n\nvar _react = __webpack_require__(1);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactIntl = __webpack_require__(13);\n\nvar _es = __webpack_require__(37);\n\nvar _logo = __webpack_require__(1659);\n\nvar _logo2 = _interopRequireDefault(_logo);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Copyright (c) 2016 Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nvar SignupEmail = function (_React$Component) {\n    (0, _inherits3.default)(SignupEmail, _React$Component);\n    (0, _createClass3.default)(SignupEmail, null, [{\n        key: 'propTypes',\n        get: function get() {\n            return {\n                location: _react2.default.PropTypes.object\n            };\n        }\n    }]);\n\n    function SignupEmail(props) {\n        (0, _classCallCheck3.default)(this, SignupEmail);\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (SignupEmail.__proto__ || (0, _getPrototypeOf2.default)(SignupEmail)).call(this, props));\n\n        _this.handleSubmit = _this.handleSubmit.bind(_this);\n\n        _this.getInviteInfo = _this.getInviteInfo.bind(_this);\n        _this.renderEmailSignup = _this.renderEmailSignup.bind(_this);\n        _this.isUserValid = _this.isUserValid.bind(_this);\n\n        _this.state = _this.getInviteInfo();\n        return _this;\n    }\n\n    (0, _createClass3.default)(SignupEmail, [{\n        key: 'componentDidMount',\n        value: function componentDidMount() {\n            (0, _diagnostics_actions.trackEvent)('signup', 'signup_user_01_welcome');\n        }\n    }, {\n        key: 'getInviteInfo',\n        value: function getInviteInfo() {\n            var data = this.props.location.query.d;\n            var hash = this.props.location.query.h;\n            var inviteId = this.props.location.query.id;\n            var email = '';\n            var teamDisplayName = '';\n            var teamName = '';\n            var teamId = '';\n            var loading = true;\n            var serverError = '';\n            var noOpenServerError = false;\n\n            if (hash && hash.length > 0) {\n                var parsedData = JSON.parse(data);\n                email = parsedData.email;\n                teamDisplayName = parsedData.display_name;\n                teamName = parsedData.name;\n                teamId = parsedData.id;\n                loading = false;\n            } else if (inviteId && inviteId.length > 0) {\n                loading = true;\n                (0, _team_actions.getInviteInfo)(inviteId, function (inviteData) {\n                    if (!inviteData) {\n                        return;\n                    }\n\n                    serverError = '';\n                    teamDisplayName = inviteData.display_name;\n                    teamName = inviteData.name;\n                    teamId = inviteData.id;\n                }, function () {\n                    noOpenServerError = true;\n                    serverError = _react2.default.createElement(_reactIntl.FormattedMessage, {\n                        id: 'signup_user_completed.invalid_invite',\n                        defaultMessage: 'The invite link was invalid.  Please speak with your Administrator to receive an invitation.'\n                    });\n                });\n\n                loading = false;\n                data = null;\n                hash = null;\n            } else {\n                loading = false;\n            }\n\n            return {\n                data: data,\n                hash: hash,\n                email: email,\n                teamDisplayName: teamDisplayName,\n                teamName: teamName,\n                teamId: teamId,\n                inviteId: inviteId,\n                loading: loading,\n                serverError: serverError,\n                noOpenServerError: noOpenServerError\n            };\n        }\n    }, {\n        key: 'finishSignup',\n        value: function finishSignup() {\n            var _this2 = this;\n\n            GlobalActions.emitInitialLoad(function () {\n                var query = _this2.props.location.query;\n                GlobalActions.loadDefaultLocale();\n                if (query.redirect_to) {\n                    _es.browserHistory.push(query.redirect_to);\n                } else {\n                    GlobalActions.redirectUserToDefaultTeam();\n                }\n            });\n        }\n    }, {\n        key: 'handleSignupSuccess',\n        value: function handleSignupSuccess(user, data) {\n            var _this3 = this;\n\n            (0, _diagnostics_actions.trackEvent)('signup', 'signup_user_02_complete');\n            (0, _user_actions.loginById)(data.id, user.password, '', function () {\n                if (_this3.state.hash > 0) {\n                    _browser_store2.default.setGlobalItem(_this3.state.hash, (0, _stringify2.default)({ usedBefore: true }));\n                }\n\n                GlobalActions.emitInitialLoad(function () {\n                    var query = _this3.props.location.query;\n                    if (query.redirect_to) {\n                        _es.browserHistory.push(query.redirect_to);\n                    } else {\n                        GlobalActions.redirectUserToDefaultTeam();\n                    }\n                });\n            }, function (err) {\n                if (err.id === 'api.user.login.not_verified.app_error') {\n                    _es.browserHistory.push('/should_verify_email?email=' + encodeURIComponent(user.email) + '&teamname=' + encodeURIComponent(_this3.state.teamName));\n                } else {\n                    _this3.setState({ serverError: err.message });\n                }\n            });\n        }\n    }, {\n        key: 'isUserValid',\n        value: function isUserValid() {\n            var providedEmail = this.refs.email.value.trim();\n            if (!providedEmail) {\n                this.setState({\n                    nameError: '',\n                    emailError: _react2.default.createElement(_reactIntl.FormattedMessage, { id: 'signup_user_completed.required' }),\n                    passwordError: '',\n                    serverError: ''\n                });\n                return false;\n            }\n\n            if (!Utils.isEmail(providedEmail)) {\n                this.setState({\n                    nameError: '',\n                    emailError: _react2.default.createElement(_reactIntl.FormattedMessage, { id: 'signup_user_completed.validEmail' }),\n                    passwordError: '',\n                    serverError: ''\n                });\n                return false;\n            }\n\n            var providedUsername = this.refs.name.value.trim().toLowerCase();\n            if (!providedUsername) {\n                this.setState({\n                    nameError: _react2.default.createElement(_reactIntl.FormattedMessage, { id: 'signup_user_completed.required' }),\n                    emailError: '',\n                    passwordError: '',\n                    serverError: ''\n                });\n                return false;\n            }\n\n            var usernameError = Utils.isValidUsername(providedUsername);\n            if (usernameError === 'Cannot use a reserved word as a username.') {\n                this.setState({\n                    nameError: _react2.default.createElement(_reactIntl.FormattedMessage, { id: 'signup_user_completed.reserved' }),\n                    emailError: '',\n                    passwordError: '',\n                    serverError: ''\n                });\n                return false;\n            } else if (usernameError) {\n                this.setState({\n                    nameError: _react2.default.createElement(_reactIntl.FormattedMessage, {\n                        id: 'signup_user_completed.usernameLength',\n                        values: {\n                            min: _constants2.default.MIN_USERNAME_LENGTH,\n                            max: _constants2.default.MAX_USERNAME_LENGTH\n                        }\n                    }),\n                    emailError: '',\n                    passwordError: '',\n                    serverError: ''\n                });\n                return false;\n            }\n\n            var providedPassword = this.refs.password.value;\n            var pwdError = Utils.isValidPassword(providedPassword);\n            if (pwdError) {\n                this.setState({\n                    nameError: '',\n                    emailError: '',\n                    passwordError: pwdError,\n                    serverError: ''\n                });\n                return false;\n            }\n\n            return true;\n        }\n    }, {\n        key: 'handleSubmit',\n        value: function handleSubmit(e) {\n            var _this4 = this;\n\n            e.preventDefault();\n\n            if (this.isUserValid()) {\n                this.setState({\n                    nameError: '',\n                    emailError: '',\n                    passwordError: '',\n                    serverError: ''\n                });\n\n                var user = {\n                    email: this.refs.email.value.trim(),\n                    username: this.refs.name.value.trim().toLowerCase(),\n                    password: this.refs.password.value,\n                    allow_marketing: true\n                };\n\n                (0, _user_actions.createUserWithInvite)(user, this.state.data, this.state.hash, this.state.inviteId, this.handleSignupSuccess.bind(this, user), function (err) {\n                    _this4.setState({ serverError: err.message });\n                });\n            }\n        }\n    }, {\n        key: 'renderEmailSignup',\n        value: function renderEmailSignup() {\n            var emailError = null;\n            var emailHelpText = _react2.default.createElement(\n                'span',\n                { className: 'help-block' },\n                _react2.default.createElement(_reactIntl.FormattedMessage, {\n                    id: 'signup_user_completed.emailHelp',\n                    defaultMessage: 'Valid email required for sign-up'\n                })\n            );\n            var emailDivStyle = 'form-group';\n            if (this.state.emailError) {\n                emailError = _react2.default.createElement(\n                    'label',\n                    { className: 'control-label' },\n                    this.state.emailError\n                );\n                emailHelpText = '';\n                emailDivStyle += ' has-error';\n            }\n\n            var nameError = null;\n            var nameHelpText = _react2.default.createElement(\n                'span',\n                { className: 'help-block' },\n                _react2.default.createElement(_reactIntl.FormattedMessage, {\n                    id: 'signup_user_completed.userHelp',\n                    defaultMessage: 'Username must begin with a letter, and contain between {min} to {max} lowercase characters made up of numbers, letters, and the symbols \\'.\\', \\'-\\' and \\'_\\'',\n                    values: {\n                        min: _constants2.default.MIN_USERNAME_LENGTH,\n                        max: _constants2.default.MAX_USERNAME_LENGTH\n                    }\n                })\n            );\n            var nameDivStyle = 'form-group';\n            if (this.state.nameError) {\n                nameError = _react2.default.createElement(\n                    'label',\n                    { className: 'control-label' },\n                    this.state.nameError\n                );\n                nameHelpText = '';\n                nameDivStyle += ' has-error';\n            }\n\n            var passwordError = null;\n            var passwordDivStyle = 'form-group';\n            if (this.state.passwordError) {\n                passwordError = _react2.default.createElement(\n                    'label',\n                    { className: 'control-label' },\n                    this.state.passwordError\n                );\n                passwordDivStyle += ' has-error';\n            }\n\n            var yourEmailIs = null;\n            if (this.state.email) {\n                yourEmailIs = _react2.default.createElement(_reactIntl.FormattedHTMLMessage, {\n                    id: 'signup_user_completed.emailIs',\n                    defaultMessage: 'Your email address is <strong>{email}</strong>. You\\'ll use this address to sign in to {siteName}.',\n                    values: {\n                        email: this.state.email,\n                        siteName: global.window.mm_config.SiteName\n                    }\n                });\n            }\n\n            var emailContainerStyle = 'margin--extra';\n            if (this.state.email) {\n                emailContainerStyle = 'hidden';\n            }\n\n            return _react2.default.createElement(\n                'form',\n                null,\n                _react2.default.createElement(\n                    'div',\n                    { className: 'inner__content' },\n                    _react2.default.createElement(\n                        'div',\n                        { className: emailContainerStyle },\n                        _react2.default.createElement(\n                            'h5',\n                            null,\n                            _react2.default.createElement(\n                                'strong',\n                                null,\n                                _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                    id: 'signup_user_completed.whatis',\n                                    defaultMessage: 'What\\'s your email address?'\n                                })\n                            )\n                        ),\n                        _react2.default.createElement(\n                            'div',\n                            { className: emailDivStyle },\n                            _react2.default.createElement('input', {\n                                type: 'email',\n                                ref: 'email',\n                                className: 'form-control',\n                                defaultValue: this.state.email,\n                                placeholder: '',\n                                maxLength: '128',\n                                autoFocus: true,\n                                spellCheck: 'false',\n                                autoCapitalize: 'off'\n                            }),\n                            emailError,\n                            emailHelpText\n                        )\n                    ),\n                    yourEmailIs,\n                    _react2.default.createElement(\n                        'div',\n                        { className: 'margin--extra' },\n                        _react2.default.createElement(\n                            'h5',\n                            null,\n                            _react2.default.createElement(\n                                'strong',\n                                null,\n                                _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                    id: 'signup_user_completed.chooseUser',\n                                    defaultMessage: 'Choose your username'\n                                })\n                            )\n                        ),\n                        _react2.default.createElement(\n                            'div',\n                            { className: nameDivStyle },\n                            _react2.default.createElement('input', {\n                                type: 'text',\n                                ref: 'name',\n                                className: 'form-control',\n                                placeholder: '',\n                                maxLength: _constants2.default.MAX_USERNAME_LENGTH,\n                                spellCheck: 'false',\n                                autoCapitalize: 'off'\n                            }),\n                            nameError,\n                            nameHelpText\n                        )\n                    ),\n                    _react2.default.createElement(\n                        'div',\n                        { className: 'margin--extra' },\n                        _react2.default.createElement(\n                            'h5',\n                            null,\n                            _react2.default.createElement(\n                                'strong',\n                                null,\n                                _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                    id: 'signup_user_completed.choosePwd',\n                                    defaultMessage: 'Choose your password'\n                                })\n                            )\n                        ),\n                        _react2.default.createElement(\n                            'div',\n                            { className: passwordDivStyle },\n                            _react2.default.createElement('input', {\n                                type: 'password',\n                                ref: 'password',\n                                className: 'form-control',\n                                placeholder: '',\n                                maxLength: '128',\n                                spellCheck: 'false'\n                            }),\n                            passwordError\n                        )\n                    ),\n                    _react2.default.createElement(\n                        'p',\n                        { className: 'margin--extra' },\n                        _react2.default.createElement(\n                            'button',\n                            {\n                                type: 'submit',\n                                onClick: this.handleSubmit,\n                                className: 'btn-primary btn'\n                            },\n                            _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                id: 'signup_user_completed.create',\n                                defaultMessage: 'Create Account'\n                            })\n                        )\n                    )\n                )\n            );\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var serverError = null;\n            if (this.state.serverError) {\n                serverError = _react2.default.createElement(\n                    'div',\n                    { className: 'form-group has-error' },\n                    _react2.default.createElement(\n                        'label',\n                        { className: 'control-label' },\n                        this.state.serverError\n                    )\n                );\n            }\n\n            if (this.state.loading) {\n                return _react2.default.createElement(_loading_screen2.default, null);\n            }\n\n            var emailSignup = void 0;\n            if (global.window.mm_config.EnableSignUpWithEmail === 'true') {\n                emailSignup = this.renderEmailSignup();\n            } else {\n                return null;\n            }\n\n            var terms = null;\n            if (!this.state.noOpenServerError && emailSignup) {\n                terms = _react2.default.createElement(\n                    'p',\n                    null,\n                    _react2.default.createElement(_reactIntl.FormattedHTMLMessage, {\n                        id: 'create_team.agreement',\n                        defaultMessage: 'By proceeding to create your account and use {siteName}, you agree to our <a href=\\'{TermsOfServiceLink}\\'>Terms of Service</a> and <a href=\\'{PrivacyPolicyLink}\\'>Privacy Policy</a>. If you do not agree, you cannot use {siteName}.',\n                        values: {\n                            siteName: global.window.mm_config.SiteName,\n                            TermsOfServiceLink: global.window.mm_config.TermsOfServiceLink,\n                            PrivacyPolicyLink: global.window.mm_config.PrivacyPolicyLink\n                        }\n                    })\n                );\n            }\n\n            if (this.state.noOpenServerError) {\n                emailSignup = null;\n            }\n\n            var description = null;\n            if (global.window.mm_license.IsLicensed === 'true' && global.window.mm_license.CustomBrand === 'true' && global.window.mm_config.EnableCustomBrand === 'true') {\n                description = global.window.mm_config.CustomDescriptionText;\n            } else {\n                description = _react2.default.createElement(_reactIntl.FormattedMessage, {\n                    id: 'web.root.signup_info',\n                    defaultMessage: 'All team communication in one place, searchable and accessible anywhere'\n                });\n            }\n\n            return _react2.default.createElement(\n                'div',\n                null,\n                _react2.default.createElement(\n                    'div',\n                    { className: 'signup-header' },\n                    _react2.default.createElement(\n                        _es.Link,\n                        { to: '/' },\n                        _react2.default.createElement('span', { className: 'fa fa-chevron-left' }),\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'web.header.back'\n                        })\n                    )\n                ),\n                _react2.default.createElement(\n                    'div',\n                    { className: 'col-sm-12' },\n                    _react2.default.createElement(\n                        'div',\n                        { className: 'signup-team__container padding--less' },\n                        _react2.default.createElement('img', {\n                            className: 'signup-team-logo',\n                            src: _logo2.default\n                        }),\n                        _react2.default.createElement(\n                            'h1',\n                            null,\n                            global.window.mm_config.SiteName\n                        ),\n                        _react2.default.createElement(\n                            'h4',\n                            { className: 'color--light' },\n                            description\n                        ),\n                        _react2.default.createElement(\n                            'h4',\n                            { className: 'color--light' },\n                            _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                id: 'signup_user_completed.lets',\n                                defaultMessage: 'Let\\'s create your account'\n                            })\n                        ),\n                        _react2.default.createElement(\n                            'span',\n                            { className: 'color--light' },\n                            _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                id: 'signup_user_completed.haveAccount',\n                                defaultMessage: 'Already have an account?'\n                            }),\n                            ' ',\n                            _react2.default.createElement(\n                                _es.Link,\n                                {\n                                    to: '/login',\n                                    query: this.props.location.query\n                                },\n                                _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                    id: 'signup_user_completed.signIn',\n                                    defaultMessage: 'Click here to sign in.'\n                                })\n                            )\n                        ),\n                        emailSignup,\n                        serverError,\n                        terms\n                    )\n                )\n            );\n        }\n    }]);\n    return SignupEmail;\n}(_react2.default.Component);\n\nexports.default = SignupEmail;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// 24.b238ea5b0c01fed16a99.js","// Copyright (c) 2016 Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\n\nimport BrowserStore from 'stores/browser_store.jsx';\nimport {getInviteInfo} from 'actions/team_actions.jsx';\nimport {loginById, createUserWithInvite} from 'actions/user_actions.jsx';\n\nimport * as Utils from 'utils/utils.jsx';\nimport Constants from 'utils/constants.jsx';\n\nimport React from 'react';\nimport {FormattedMessage, FormattedHTMLMessage} from 'react-intl';\nimport {browserHistory, Link} from 'react-router/es6';\n\nimport logoImage from 'images/logo.png';\n\nexport default class SignupEmail extends React.Component {\n    static get propTypes() {\n        return {\n            location: React.PropTypes.object\n        };\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n\n        this.getInviteInfo = this.getInviteInfo.bind(this);\n        this.renderEmailSignup = this.renderEmailSignup.bind(this);\n        this.isUserValid = this.isUserValid.bind(this);\n\n        this.state = this.getInviteInfo();\n    }\n\n    componentDidMount() {\n        trackEvent('signup', 'signup_user_01_welcome');\n    }\n\n    getInviteInfo() {\n        let data = this.props.location.query.d;\n        let hash = this.props.location.query.h;\n        const inviteId = this.props.location.query.id;\n        let email = '';\n        let teamDisplayName = '';\n        let teamName = '';\n        let teamId = '';\n        let loading = true;\n        let serverError = '';\n        let noOpenServerError = false;\n\n        if (hash && hash.length > 0) {\n            const parsedData = JSON.parse(data);\n            email = parsedData.email;\n            teamDisplayName = parsedData.display_name;\n            teamName = parsedData.name;\n            teamId = parsedData.id;\n            loading = false;\n        } else if (inviteId && inviteId.length > 0) {\n            loading = true;\n            getInviteInfo(\n                inviteId,\n                (inviteData) => {\n                    if (!inviteData) {\n                        return;\n                    }\n\n                    serverError = '';\n                    teamDisplayName = inviteData.display_name;\n                    teamName = inviteData.name;\n                    teamId = inviteData.id;\n                },\n                () => {\n                    noOpenServerError = true;\n                    serverError = (\n                        <FormattedMessage\n                            id='signup_user_completed.invalid_invite'\n                            defaultMessage='The invite link was invalid.  Please speak with your Administrator to receive an invitation.'\n                        />\n                    );\n                }\n            );\n\n            loading = false;\n            data = null;\n            hash = null;\n        } else {\n            loading = false;\n        }\n\n        return {\n            data,\n            hash,\n            email,\n            teamDisplayName,\n            teamName,\n            teamId,\n            inviteId,\n            loading,\n            serverError,\n            noOpenServerError\n        };\n    }\n\n    finishSignup() {\n        GlobalActions.emitInitialLoad(\n            () => {\n                const query = this.props.location.query;\n                GlobalActions.loadDefaultLocale();\n                if (query.redirect_to) {\n                    browserHistory.push(query.redirect_to);\n                } else {\n                    GlobalActions.redirectUserToDefaultTeam();\n                }\n            }\n        );\n    }\n\n    handleSignupSuccess(user, data) {\n        trackEvent('signup', 'signup_user_02_complete');\n        loginById(\n            data.id,\n            user.password,\n            '',\n            () => {\n                if (this.state.hash > 0) {\n                    BrowserStore.setGlobalItem(this.state.hash, JSON.stringify({usedBefore: true}));\n                }\n\n                GlobalActions.emitInitialLoad(\n                    () => {\n                        const query = this.props.location.query;\n                        if (query.redirect_to) {\n                            browserHistory.push(query.redirect_to);\n                        } else {\n                            GlobalActions.redirectUserToDefaultTeam();\n                        }\n                    }\n                );\n            },\n            (err) => {\n                if (err.id === 'api.user.login.not_verified.app_error') {\n                    browserHistory.push('/should_verify_email?email=' + encodeURIComponent(user.email) + '&teamname=' + encodeURIComponent(this.state.teamName));\n                } else {\n                    this.setState({serverError: err.message});\n                }\n            }\n        );\n    }\n\n    isUserValid() {\n        const providedEmail = this.refs.email.value.trim();\n        if (!providedEmail) {\n            this.setState({\n                nameError: '',\n                emailError: (<FormattedMessage id='signup_user_completed.required'/>),\n                passwordError: '',\n                serverError: ''\n            });\n            return false;\n        }\n\n        if (!Utils.isEmail(providedEmail)) {\n            this.setState({\n                nameError: '',\n                emailError: (<FormattedMessage id='signup_user_completed.validEmail'/>),\n                passwordError: '',\n                serverError: ''\n            });\n            return false;\n        }\n\n        const providedUsername = this.refs.name.value.trim().toLowerCase();\n        if (!providedUsername) {\n            this.setState({\n                nameError: (<FormattedMessage id='signup_user_completed.required'/>),\n                emailError: '',\n                passwordError: '',\n                serverError: ''\n            });\n            return false;\n        }\n\n        const usernameError = Utils.isValidUsername(providedUsername);\n        if (usernameError === 'Cannot use a reserved word as a username.') {\n            this.setState({\n                nameError: (<FormattedMessage id='signup_user_completed.reserved'/>),\n                emailError: '',\n                passwordError: '',\n                serverError: ''\n            });\n            return false;\n        } else if (usernameError) {\n            this.setState({\n                nameError: (\n                    <FormattedMessage\n                        id='signup_user_completed.usernameLength'\n                        values={{\n                            min: Constants.MIN_USERNAME_LENGTH,\n                            max: Constants.MAX_USERNAME_LENGTH\n                        }}\n                    />\n                ),\n                emailError: '',\n                passwordError: '',\n                serverError: ''\n            });\n            return false;\n        }\n\n        const providedPassword = this.refs.password.value;\n        const pwdError = Utils.isValidPassword(providedPassword);\n        if (pwdError) {\n            this.setState({\n                nameError: '',\n                emailError: '',\n                passwordError: pwdError,\n                serverError: ''\n            });\n            return false;\n        }\n\n        return true;\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n\n        if (this.isUserValid()) {\n            this.setState({\n                nameError: '',\n                emailError: '',\n                passwordError: '',\n                serverError: ''\n            });\n\n            const user = {\n                email: this.refs.email.value.trim(),\n                username: this.refs.name.value.trim().toLowerCase(),\n                password: this.refs.password.value,\n                allow_marketing: true\n            };\n\n            createUserWithInvite(user,\n                this.state.data,\n                this.state.hash,\n                this.state.inviteId,\n                this.handleSignupSuccess.bind(this, user),\n                (err) => {\n                    this.setState({serverError: err.message});\n                }\n            );\n        }\n    }\n\n    renderEmailSignup() {\n        let emailError = null;\n        let emailHelpText = (\n            <span className='help-block'>\n                <FormattedMessage\n                    id='signup_user_completed.emailHelp'\n                    defaultMessage='Valid email required for sign-up'\n                />\n            </span>\n        );\n        let emailDivStyle = 'form-group';\n        if (this.state.emailError) {\n            emailError = (<label className='control-label'>{this.state.emailError}</label>);\n            emailHelpText = '';\n            emailDivStyle += ' has-error';\n        }\n\n        let nameError = null;\n        let nameHelpText = (\n            <span className='help-block'>\n                <FormattedMessage\n                    id='signup_user_completed.userHelp'\n                    defaultMessage=\"Username must begin with a letter, and contain between {min} to {max} lowercase characters made up of numbers, letters, and the symbols '.', '-' and '_'\"\n                    values={{\n                        min: Constants.MIN_USERNAME_LENGTH,\n                        max: Constants.MAX_USERNAME_LENGTH\n                    }}\n                />\n            </span>\n        );\n        let nameDivStyle = 'form-group';\n        if (this.state.nameError) {\n            nameError = <label className='control-label'>{this.state.nameError}</label>;\n            nameHelpText = '';\n            nameDivStyle += ' has-error';\n        }\n\n        let passwordError = null;\n        let passwordDivStyle = 'form-group';\n        if (this.state.passwordError) {\n            passwordError = <label className='control-label'>{this.state.passwordError}</label>;\n            passwordDivStyle += ' has-error';\n        }\n\n        let yourEmailIs = null;\n        if (this.state.email) {\n            yourEmailIs = (\n                <FormattedHTMLMessage\n                    id='signup_user_completed.emailIs'\n                    defaultMessage=\"Your email address is <strong>{email}</strong>. You'll use this address to sign in to {siteName}.\"\n                    values={{\n                        email: this.state.email,\n                        siteName: global.window.mm_config.SiteName\n                    }}\n                />\n            );\n        }\n\n        let emailContainerStyle = 'margin--extra';\n        if (this.state.email) {\n            emailContainerStyle = 'hidden';\n        }\n\n        return (\n            <form>\n                <div className='inner__content'>\n                    <div className={emailContainerStyle}>\n                        <h5><strong>\n                            <FormattedMessage\n                                id='signup_user_completed.whatis'\n                                defaultMessage=\"What's your email address?\"\n                            />\n                        </strong></h5>\n                        <div className={emailDivStyle}>\n                            <input\n                                type='email'\n                                ref='email'\n                                className='form-control'\n                                defaultValue={this.state.email}\n                                placeholder=''\n                                maxLength='128'\n                                autoFocus={true}\n                                spellCheck='false'\n                                autoCapitalize='off'\n                            />\n                            {emailError}\n                            {emailHelpText}\n                        </div>\n                    </div>\n                    {yourEmailIs}\n                    <div className='margin--extra'>\n                        <h5><strong>\n                            <FormattedMessage\n                                id='signup_user_completed.chooseUser'\n                                defaultMessage='Choose your username'\n                            />\n                        </strong></h5>\n                        <div className={nameDivStyle}>\n                            <input\n                                type='text'\n                                ref='name'\n                                className='form-control'\n                                placeholder=''\n                                maxLength={Constants.MAX_USERNAME_LENGTH}\n                                spellCheck='false'\n                                autoCapitalize='off'\n                            />\n                            {nameError}\n                            {nameHelpText}\n                        </div>\n                    </div>\n                    <div className='margin--extra'>\n                        <h5><strong>\n                            <FormattedMessage\n                                id='signup_user_completed.choosePwd'\n                                defaultMessage='Choose your password'\n                            />\n                        </strong></h5>\n                        <div className={passwordDivStyle}>\n                            <input\n                                type='password'\n                                ref='password'\n                                className='form-control'\n                                placeholder=''\n                                maxLength='128'\n                                spellCheck='false'\n                            />\n                            {passwordError}\n                        </div>\n                    </div>\n                    <p className='margin--extra'>\n                        <button\n                            type='submit'\n                            onClick={this.handleSubmit}\n                            className='btn-primary btn'\n                        >\n                            <FormattedMessage\n                                id='signup_user_completed.create'\n                                defaultMessage='Create Account'\n                            />\n                        </button>\n                    </p>\n                </div>\n            </form>\n        );\n    }\n\n    render() {\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = (\n                <div className={'form-group has-error'}>\n                    <label className='control-label'>{this.state.serverError}</label>\n                </div>\n            );\n        }\n\n        if (this.state.loading) {\n            return (<LoadingScreen/>);\n        }\n\n        let emailSignup;\n        if (global.window.mm_config.EnableSignUpWithEmail === 'true') {\n            emailSignup = this.renderEmailSignup();\n        } else {\n            return null;\n        }\n\n        let terms = null;\n        if (!this.state.noOpenServerError && emailSignup) {\n            terms = (\n                <p>\n                    <FormattedHTMLMessage\n                        id='create_team.agreement'\n                        defaultMessage=\"By proceeding to create your account and use {siteName}, you agree to our <a href='{TermsOfServiceLink}'>Terms of Service</a> and <a href='{PrivacyPolicyLink}'>Privacy Policy</a>. If you do not agree, you cannot use {siteName}.\"\n                        values={{\n                            siteName: global.window.mm_config.SiteName,\n                            TermsOfServiceLink: global.window.mm_config.TermsOfServiceLink,\n                            PrivacyPolicyLink: global.window.mm_config.PrivacyPolicyLink\n                        }}\n                    />\n                </p>\n            );\n        }\n\n        if (this.state.noOpenServerError) {\n            emailSignup = null;\n        }\n\n        let description = null;\n        if (global.window.mm_license.IsLicensed === 'true' && global.window.mm_license.CustomBrand === 'true' && global.window.mm_config.EnableCustomBrand === 'true') {\n            description = global.window.mm_config.CustomDescriptionText;\n        } else {\n            description = (\n                <FormattedMessage\n                    id='web.root.signup_info'\n                    defaultMessage='All team communication in one place, searchable and accessible anywhere'\n                />\n            );\n        }\n\n        return (\n            <div>\n                <div className='signup-header'>\n                    <Link to='/'>\n                        <span className='fa fa-chevron-left'/>\n                        <FormattedMessage\n                            id='web.header.back'\n                        />\n                    </Link>\n                </div>\n                <div className='col-sm-12'>\n                    <div className='signup-team__container padding--less'>\n                        <img\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <h1>{global.window.mm_config.SiteName}</h1>\n                        <h4 className='color--light'>\n                            {description}\n                        </h4>\n                        <h4 className='color--light'>\n                            <FormattedMessage\n                                id='signup_user_completed.lets'\n                                defaultMessage=\"Let's create your account\"\n                            />\n                        </h4>\n                        <span className='color--light'>\n                            <FormattedMessage\n                                id='signup_user_completed.haveAccount'\n                                defaultMessage='Already have an account?'\n                            />\n                            {' '}\n                            <Link\n                                to={'/login'}\n                                query={this.props.location.query}\n                            >\n                                <FormattedMessage\n                                    id='signup_user_completed.signIn'\n                                    defaultMessage='Click here to sign in.'\n                                />\n                            </Link>\n                        </span>\n                        {emailSignup}\n                        {serverError}\n                        {terms}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./components/signup/components/signup_email.jsx"],"sourceRoot":""}