{"version":3,"sources":["webpack:///57.37d4eb37c4dfd68c6973.js","webpack:///./components/claim/components/email_to_ldap.jsx"],"names":["webpackJsonp","1683","module","exports","__webpack_require__","global","_interopRequireWildcard","obj","__esModule","newObj","key","Object","prototype","hasOwnProperty","call","default","_interopRequireDefault","defineProperty","value","_getPrototypeOf","_getPrototypeOf2","_classCallCheck2","_classCallCheck3","_createClass2","_createClass3","_possibleConstructorReturn2","_possibleConstructorReturn3","_inherits2","_inherits3","_login_mfa","_login_mfa2","_utils","Utils","_user_actions","_admin_actions","_react","_react2","_reactIntl","EmailToLDAP","_React$Component","props","this","_this","__proto__","submit","bind","preSubmit","state","passwordError","ldapError","ldapPasswordError","serverError","showMfa","e","_this2","preventDefault","password","refs","emailpassword","localizeMessage","setState","ldapId","ldapid","trim","ldapPassword","ldappassword","checkMfa","email","requiresMfa","err","error","message","loginId","token","_this3","emailToLdap","data","follow_link","window","location","href","formClass","createElement","className","passwordClass","ldapClass","ldapPasswordClass","loginPlaceholder","mm_config","LdapLoginFieldName","passwordPlaceholder","LdapPasswordFieldName","content","onSubmit","FormattedMessage","id","defaultMessage","values","site","SiteName","type","style","display","name","ref","autoComplete","placeholder","spellCheck","Component","defaultProps","propTypes","PropTypes","string"],"mappings":"AAAAA,cAAc,KAERC,KACA,SAAUC,EAAQC,EAASC,GAEjC,cAC4B,SAASC,GA4CrC,QAASC,GAAwBC,GAAO,GAAIA,GAAOA,EAAIC,WAAc,MAAOD,EAAc,IAAIE,KAAa,IAAW,MAAPF,EAAe,IAAK,GAAIG,KAAOH,GAAWI,OAAOC,UAAUC,eAAeC,KAAKP,EAAKG,KAAMD,EAAOC,GAAOH,EAAIG,GAAgC,OAAtBD,GAAOM,QAAUR,EAAYE,EAElQ,QAASO,GAAuBT,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQQ,QAASR,GA5CvFI,OAAOM,eAAed,EAAS,cAC3Be,OAAO,GAGX,IAAIC,GAAkBf,EAAoB,GAEtCgB,EAAmBJ,EAAuBG,GAE1CE,EAAmBjB,EAAoB,GAEvCkB,EAAmBN,EAAuBK,GAE1CE,EAAgBnB,EAAoB,GAEpCoB,EAAgBR,EAAuBO,GAEvCE,EAA8BrB,EAAoB,GAElDsB,EAA8BV,EAAuBS,GAErDE,EAAavB,EAAoB,GAEjCwB,EAAaZ,EAAuBW,GC3BxCE,EAAAzB,EAAA,MD+BI0B,EAAcd,EAAuBa,GC7BzCE,EAAA3B,EAAA,IAAY4B,EDiCA1B,EAAwByB,GC/BpCE,EAAA7B,EAAA,IACA8B,EAAA9B,EAAA,KAEA+B,EAAA/B,EAAA,GDoCIgC,EAAUpB,EAAuBmB,GCnCrCE,EAAAjC,EAAA,IAEqBkC,ED4CH,SAAUC,GC3CxB,QAAAD,GAAYE,IAAO,EAAAlB,EAAAP,SAAA0B,KAAAH,EAAA,IAAAI,IAAA,EAAAhB,EAAAX,SAAA0B,MAAAH,EAAAK,YAAA,EAAAvB,EAAAL,SAAAuB,IAAAxB,KAAA2B,KACTD,GADS,OAGfE,GAAKE,OAASF,EAAKE,OAAOC,KAAZH,GACdA,EAAKI,UAAYJ,EAAKI,UAAUD,KAAfH,GAEjBA,EAAKK,OACDC,cAAe,GACfC,UAAW,GACXC,kBAAmB,GACnBC,YAAa,GACbC,SAAS,GAXEV,ED0UnB,OA9RA,EAAId,EAAWb,SAASuB,EAAaC,IAoBrC,EAAIf,EAAcT,SAASuB,IACvB5B,IAAK,YACLQ,MAAO,SCnDDmC,GAAG,GAAAC,GAAAb,IACTY,GAAEE,gBAEF,IAAIR,IACAC,cAAe,GACfC,UAAW,GACXC,kBAAmB,GACnBC,YAAa,IAGXK,EAAWf,KAAKgB,KAAKC,cAAcxC,KACzC,KAAKsC,EAGD,MAFAT,GAAMC,cAAgBhB,EAAM2B,gBAAgB,+BAAgC,mCAC5ElB,MAAKmB,SAASb,EAIlB,IAAMc,GAASpB,KAAKgB,KAAKK,OAAO5C,MAAM6C,MACtC,KAAKF,EAGD,MAFAd,GAAME,UAAYjB,EAAM2B,gBAAgB,kCAAmC,qCAC3ElB,MAAKmB,SAASb,EAIlB,IAAMiB,GAAevB,KAAKgB,KAAKQ,aAAa/C,KAC5C,KAAK8C,EAGD,MAFAjB,GAAMG,kBAAoBlB,EAAM2B,gBAAgB,wCAAyC,2CACzFlB,MAAKmB,SAASb,EAIlBA,GAAMS,SAAWA,EACjBT,EAAMc,OAASA,EACfd,EAAMiB,aAAeA,EACrBvB,KAAKmB,SAASb,IAEd,EAAAd,EAAAiC,UACIzB,KAAKD,MAAM2B,MACX,SAACC,GACOA,EACAd,EAAKM,UAAUR,SAAS,IAExBE,EAAKV,OAAOU,EAAKd,MAAM2B,MAAOX,EAAU,GAAIK,EAAQG,IAG5D,SAACK,GACGf,EAAKM,UAAUU,MAAOD,EAAIE,eDsDlC7D,IAAK,SACLQ,MAAO,SClDJsD,EAAShB,EAAUiB,EAAOZ,EAAQG,GAAc,GAAAU,GAAAjC,MACnD,EAAAP,EAAAyC,aACIH,EACAhB,EACAiB,EACAZ,GAAUpB,KAAKM,MAAMc,OACrBG,GAAgBvB,KAAKM,MAAMiB,aAC3B,SAACY,GACOA,EAAKC,cACLC,OAAOC,SAASC,KAAOJ,EAAKC,cAGpC,SAACR,GACGK,EAAKd,UAAUT,YAAakB,EAAIE,QAASnB,SAAS,SDiD1D1C,IAAK,SACLQ,MAAO,WC5CP,GAAIiC,GAAc,KACd8B,EAAY,YACZxC,MAAKM,MAAMI,cACXA,EAAcf,EAAArB,QAAAmE,cAAA,OAAKC,UAAU,wBAAuB/C,EAAArB,QAAAmE,cAAA,SAAOC,UAAU,iBAAiB1C,KAAKM,MAAMI,cACjG8B,GAAa,aAGjB,IAAIjC,GAAgB,KAChBoC,EAAgB,YAChB3C,MAAKM,MAAMC,gBACXA,EAAgBZ,EAAArB,QAAAmE,cAAA,OAAKC,UAAU,wBAAuB/C,EAAArB,QAAAmE,cAAA,SAAOC,UAAU,iBAAiB1C,KAAKM,MAAMC,gBACnGoC,GAAiB,aAGrB,IAAInC,GAAY,KACZoC,EAAY,YACZ5C,MAAKM,MAAME,YACXA,EAAYb,EAAArB,QAAAmE,cAAA,OAAKC,UAAU,wBAAuB/C,EAAArB,QAAAmE,cAAA,SAAOC,UAAU,iBAAiB1C,KAAKM,MAAME,YAC/FoC,GAAa,aAGjB,IAAInC,GAAoB,KACpBoC,EAAoB,YACpB7C,MAAKM,MAAMG,oBACXA,EAAoBd,EAAArB,QAAAmE,cAAA,OAAKC,UAAU,wBAAuB/C,EAAArB,QAAAmE,cAAA,SAAOC,UAAU,iBAAiB1C,KAAKM,MAAMG,oBACvGoC,GAAqB,aAGzB,IAAIC,SAEAA,GADAlF,EAAOyE,OAAOU,UAAUC,mBACLpF,EAAOyE,OAAOU,UAAUC,mBAExBzD,EAAM2B,gBAAgB,6BAA8B,aAG3E,IAAI+B,SAEAA,GADArF,EAAOyE,OAAOU,UAAUG,sBACFtF,EAAOyE,OAAOU,UAAUG,sBAExB3D,EAAM2B,gBAAgB,8BAA+B,mBAG/E,IAAIiC,SAiGJ,OA/FIA,GADAnD,KAAKM,MAAMK,QAEPhB,EAAArB,QAAAmE,cAAApD,EAAAf,SACIyD,QAAS/B,KAAKD,MAAM2B,MACpBX,SAAUf,KAAKM,MAAMS,SACrBZ,OAAQH,KAAKG,SAKjBR,EAAArB,QAAAmE,cAAA,QACIW,SAAUpD,KAAKK,UACfqC,UAAWF,GAEX7C,EAAArB,QAAAmE,cAAA,SACI9C,EAAArB,QAAAmE,cAAA7C,EAAAyD,kBACIC,GAAG,8BACHC,eAAe,6EAGvB5D,EAAArB,QAAAmE,cAAA,SACI9C,EAAArB,QAAAmE,cAAA7C,EAAAyD,kBACIC,GAAG,8BACHC,eAAe,mDAGvB5D,EAAArB,QAAAmE,cAAA,SACI9C,EAAArB,QAAAmE,cAAA7C,EAAAyD,kBACIC,GAAG,+BACHC,eAAe,mDACfC,QACIC,KAAM7F,EAAOyE,OAAOU,UAAUW,aAI1C/D,EAAArB,QAAAmE,cAAA,SACIkB,KAAK,OACLC,OAAQC,QAAS,QACjBC,KAAK,2BAETnE,EAAArB,QAAAmE,cAAA,OAAKC,UAAWC,GACZhD,EAAArB,QAAAmE,cAAA,SACIkB,KAAK,WACLjB,UAAU,eACVoB,KAAK,gBACLC,IAAI,gBACJC,aAAa,MACbC,YAAa1E,EAAM2B,gBAAgB,0BAA2B,YAC9DgD,WAAW,WAGlB3D,EACDZ,EAAArB,QAAAmE,cAAA,SACI9C,EAAArB,QAAAmE,cAAA7C,EAAAyD,kBACIC,GAAG,mCACHC,eAAe,wDAGvB5D,EAAArB,QAAAmE,cAAA,OAAKC,UAAWE,GACZjD,EAAArB,QAAAmE,cAAA,SACIkB,KAAK,OACLjB,UAAU,eACVoB,KAAK,SACLC,IAAI,SACJC,aAAa,MACbC,YAAanB,EACboB,WAAW,WAGlB1D,EACDb,EAAArB,QAAAmE,cAAA,OAAKC,UAAWG,GACZlD,EAAArB,QAAAmE,cAAA,SACIkB,KAAK,WACLjB,UAAU,eACVoB,KAAK,eACLC,IAAI,eACJC,aAAa,MACbC,YAAahB,EACbiB,WAAW,WAGlBzD,EACDd,EAAArB,QAAAmE,cAAA,UACIkB,KAAK,SACLjB,UAAU,mBAEV/C,EAAArB,QAAAmE,cAAA7C,EAAAyD,kBACIC,GAAG,+BACHC,eAAe,+BAGtB7C,GAMTf,EAAArB,QAAAmE,cAAA,WACI9C,EAAArB,QAAAmE,cAAA,UACI9C,EAAArB,QAAAmE,cAAA7C,EAAAyD,kBACIC,GAAG,4BACHC,eAAe,8CAGtBJ,ODkGNtD,GC3U8BF,EAAArB,QAAM6F,UD8U/CzG,GAAQY,QC9UauB,EA+OrBA,EAAYuE,gBAEZvE,EAAYwE,WACR3C,MAAO/B,EAAArB,QAAMgG,UAAUC,UDmGElG,KAAKX,EAASC,EAAoB","file":"57.37d4eb37c4dfd68c6973.js","sourcesContent":["webpackJsonp([57],{\n\n/***/ 1683:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getPrototypeOf = __webpack_require__(6);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(2);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(5);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(3);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _login_mfa = __webpack_require__(1667);\n\nvar _login_mfa2 = _interopRequireDefault(_login_mfa);\n\nvar _utils = __webpack_require__(11);\n\nvar Utils = _interopRequireWildcard(_utils);\n\nvar _user_actions = __webpack_require__(46);\n\nvar _admin_actions = __webpack_require__(569);\n\nvar _react = __webpack_require__(1);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactIntl = __webpack_require__(13);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Copyright (c) 2015 Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nvar EmailToLDAP = function (_React$Component) {\n    (0, _inherits3.default)(EmailToLDAP, _React$Component);\n\n    function EmailToLDAP(props) {\n        (0, _classCallCheck3.default)(this, EmailToLDAP);\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (EmailToLDAP.__proto__ || (0, _getPrototypeOf2.default)(EmailToLDAP)).call(this, props));\n\n        _this.submit = _this.submit.bind(_this);\n        _this.preSubmit = _this.preSubmit.bind(_this);\n\n        _this.state = {\n            passwordError: '',\n            ldapError: '',\n            ldapPasswordError: '',\n            serverError: '',\n            showMfa: false\n        };\n        return _this;\n    }\n\n    (0, _createClass3.default)(EmailToLDAP, [{\n        key: 'preSubmit',\n        value: function preSubmit(e) {\n            var _this2 = this;\n\n            e.preventDefault();\n\n            var state = {\n                passwordError: '',\n                ldapError: '',\n                ldapPasswordError: '',\n                serverError: ''\n            };\n\n            var password = this.refs.emailpassword.value;\n            if (!password) {\n                state.passwordError = Utils.localizeMessage('claim.email_to_ldap.pwdError', 'Please enter your password.');\n                this.setState(state);\n                return;\n            }\n\n            var ldapId = this.refs.ldapid.value.trim();\n            if (!ldapId) {\n                state.ldapError = Utils.localizeMessage('claim.email_to_ldap.ldapIdError', 'Please enter your AD/LDAP ID.');\n                this.setState(state);\n                return;\n            }\n\n            var ldapPassword = this.refs.ldappassword.value;\n            if (!ldapPassword) {\n                state.ldapPasswordError = Utils.localizeMessage('claim.email_to_ldap.ldapPasswordError', 'Please enter your AD/LDAP password.');\n                this.setState(state);\n                return;\n            }\n\n            state.password = password;\n            state.ldapId = ldapId;\n            state.ldapPassword = ldapPassword;\n            this.setState(state);\n\n            (0, _user_actions.checkMfa)(this.props.email, function (requiresMfa) {\n                if (requiresMfa) {\n                    _this2.setState({ showMfa: true });\n                } else {\n                    _this2.submit(_this2.props.email, password, '', ldapId, ldapPassword);\n                }\n            }, function (err) {\n                _this2.setState({ error: err.message });\n            });\n        }\n    }, {\n        key: 'submit',\n        value: function submit(loginId, password, token, ldapId, ldapPassword) {\n            var _this3 = this;\n\n            (0, _admin_actions.emailToLdap)(loginId, password, token, ldapId || this.state.ldapId, ldapPassword || this.state.ldapPassword, function (data) {\n                if (data.follow_link) {\n                    window.location.href = data.follow_link;\n                }\n            }, function (err) {\n                _this3.setState({ serverError: err.message, showMfa: false });\n            });\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var serverError = null;\n            var formClass = 'form-group';\n            if (this.state.serverError) {\n                serverError = _react2.default.createElement(\n                    'div',\n                    { className: 'form-group has-error' },\n                    _react2.default.createElement(\n                        'label',\n                        { className: 'control-label' },\n                        this.state.serverError\n                    )\n                );\n                formClass += ' has-error';\n            }\n\n            var passwordError = null;\n            var passwordClass = 'form-group';\n            if (this.state.passwordError) {\n                passwordError = _react2.default.createElement(\n                    'div',\n                    { className: 'form-group has-error' },\n                    _react2.default.createElement(\n                        'label',\n                        { className: 'control-label' },\n                        this.state.passwordError\n                    )\n                );\n                passwordClass += ' has-error';\n            }\n\n            var ldapError = null;\n            var ldapClass = 'form-group';\n            if (this.state.ldapError) {\n                ldapError = _react2.default.createElement(\n                    'div',\n                    { className: 'form-group has-error' },\n                    _react2.default.createElement(\n                        'label',\n                        { className: 'control-label' },\n                        this.state.ldapError\n                    )\n                );\n                ldapClass += ' has-error';\n            }\n\n            var ldapPasswordError = null;\n            var ldapPasswordClass = 'form-group';\n            if (this.state.ldapPasswordError) {\n                ldapPasswordError = _react2.default.createElement(\n                    'div',\n                    { className: 'form-group has-error' },\n                    _react2.default.createElement(\n                        'label',\n                        { className: 'control-label' },\n                        this.state.ldapPasswordError\n                    )\n                );\n                ldapPasswordClass += ' has-error';\n            }\n\n            var loginPlaceholder = void 0;\n            if (global.window.mm_config.LdapLoginFieldName) {\n                loginPlaceholder = global.window.mm_config.LdapLoginFieldName;\n            } else {\n                loginPlaceholder = Utils.localizeMessage('claim.email_to_ldap.ldapId', 'AD/LDAP ID');\n            }\n\n            var passwordPlaceholder = void 0;\n            if (global.window.mm_config.LdapPasswordFieldName) {\n                passwordPlaceholder = global.window.mm_config.LdapPasswordFieldName;\n            } else {\n                passwordPlaceholder = Utils.localizeMessage('claim.email_to_ldap.ldapPwd', 'AD/LDAP Password');\n            }\n\n            var content = void 0;\n            if (this.state.showMfa) {\n                content = _react2.default.createElement(_login_mfa2.default, {\n                    loginId: this.props.email,\n                    password: this.state.password,\n                    submit: this.submit\n                });\n            } else {\n                content = _react2.default.createElement(\n                    'form',\n                    {\n                        onSubmit: this.preSubmit,\n                        className: formClass\n                    },\n                    _react2.default.createElement(\n                        'p',\n                        null,\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'claim.email_to_ldap.ssoType',\n                            defaultMessage: 'Upon claiming your account, you will only be able to login with AD/LDAP'\n                        })\n                    ),\n                    _react2.default.createElement(\n                        'p',\n                        null,\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'claim.email_to_ldap.ssoNote',\n                            defaultMessage: 'You must already have a valid AD/LDAP account'\n                        })\n                    ),\n                    _react2.default.createElement(\n                        'p',\n                        null,\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'claim.email_to_ldap.enterPwd',\n                            defaultMessage: 'Enter the password for your {site} email account',\n                            values: {\n                                site: global.window.mm_config.SiteName\n                            }\n                        })\n                    ),\n                    _react2.default.createElement('input', {\n                        type: 'text',\n                        style: { display: 'none' },\n                        name: 'fakeusernameremembered'\n                    }),\n                    _react2.default.createElement(\n                        'div',\n                        { className: passwordClass },\n                        _react2.default.createElement('input', {\n                            type: 'password',\n                            className: 'form-control',\n                            name: 'emailPassword',\n                            ref: 'emailpassword',\n                            autoComplete: 'off',\n                            placeholder: Utils.localizeMessage('claim.email_to_ldap.pwd', 'Password'),\n                            spellCheck: 'false'\n                        })\n                    ),\n                    passwordError,\n                    _react2.default.createElement(\n                        'p',\n                        null,\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'claim.email_to_ldap.enterLdapPwd',\n                            defaultMessage: 'Enter the ID and password for your AD/LDAP account'\n                        })\n                    ),\n                    _react2.default.createElement(\n                        'div',\n                        { className: ldapClass },\n                        _react2.default.createElement('input', {\n                            type: 'text',\n                            className: 'form-control',\n                            name: 'ldapId',\n                            ref: 'ldapid',\n                            autoComplete: 'off',\n                            placeholder: loginPlaceholder,\n                            spellCheck: 'false'\n                        })\n                    ),\n                    ldapError,\n                    _react2.default.createElement(\n                        'div',\n                        { className: ldapPasswordClass },\n                        _react2.default.createElement('input', {\n                            type: 'password',\n                            className: 'form-control',\n                            name: 'ldapPassword',\n                            ref: 'ldappassword',\n                            autoComplete: 'off',\n                            placeholder: passwordPlaceholder,\n                            spellCheck: 'false'\n                        })\n                    ),\n                    ldapPasswordError,\n                    _react2.default.createElement(\n                        'button',\n                        {\n                            type: 'submit',\n                            className: 'btn btn-primary'\n                        },\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'claim.email_to_ldap.switchTo',\n                            defaultMessage: 'Switch account to AD/LDAP'\n                        })\n                    ),\n                    serverError\n                );\n            }\n\n            return _react2.default.createElement(\n                'div',\n                null,\n                _react2.default.createElement(\n                    'h3',\n                    null,\n                    _react2.default.createElement(_reactIntl.FormattedMessage, {\n                        id: 'claim.email_to_ldap.title',\n                        defaultMessage: 'Switch Email/Password Account to AD/LDAP'\n                    })\n                ),\n                content\n            );\n        }\n    }]);\n    return EmailToLDAP;\n}(_react2.default.Component);\n\nexports.default = EmailToLDAP;\n\n\nEmailToLDAP.defaultProps = {};\nEmailToLDAP.propTypes = {\n    email: _react2.default.PropTypes.string\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// 57.37d4eb37c4dfd68c6973.js","// Copyright (c) 2015 Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nimport LoginMfa from 'components/login/components/login_mfa.jsx';\n\nimport * as Utils from 'utils/utils.jsx';\n\nimport {checkMfa} from 'actions/user_actions.jsx';\nimport {emailToLdap} from 'actions/admin_actions.jsx';\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class EmailToLDAP extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.submit = this.submit.bind(this);\n        this.preSubmit = this.preSubmit.bind(this);\n\n        this.state = {\n            passwordError: '',\n            ldapError: '',\n            ldapPasswordError: '',\n            serverError: '',\n            showMfa: false\n        };\n    }\n\n    preSubmit(e) {\n        e.preventDefault();\n\n        var state = {\n            passwordError: '',\n            ldapError: '',\n            ldapPasswordError: '',\n            serverError: ''\n        };\n\n        const password = this.refs.emailpassword.value;\n        if (!password) {\n            state.passwordError = Utils.localizeMessage('claim.email_to_ldap.pwdError', 'Please enter your password.');\n            this.setState(state);\n            return;\n        }\n\n        const ldapId = this.refs.ldapid.value.trim();\n        if (!ldapId) {\n            state.ldapError = Utils.localizeMessage('claim.email_to_ldap.ldapIdError', 'Please enter your AD/LDAP ID.');\n            this.setState(state);\n            return;\n        }\n\n        const ldapPassword = this.refs.ldappassword.value;\n        if (!ldapPassword) {\n            state.ldapPasswordError = Utils.localizeMessage('claim.email_to_ldap.ldapPasswordError', 'Please enter your AD/LDAP password.');\n            this.setState(state);\n            return;\n        }\n\n        state.password = password;\n        state.ldapId = ldapId;\n        state.ldapPassword = ldapPassword;\n        this.setState(state);\n\n        checkMfa(\n            this.props.email,\n            (requiresMfa) => {\n                if (requiresMfa) {\n                    this.setState({showMfa: true});\n                } else {\n                    this.submit(this.props.email, password, '', ldapId, ldapPassword);\n                }\n            },\n            (err) => {\n                this.setState({error: err.message});\n            }\n        );\n    }\n\n    submit(loginId, password, token, ldapId, ldapPassword) {\n        emailToLdap(\n            loginId,\n            password,\n            token,\n            ldapId || this.state.ldapId,\n            ldapPassword || this.state.ldapPassword,\n            (data) => {\n                if (data.follow_link) {\n                    window.location.href = data.follow_link;\n                }\n            },\n            (err) => {\n                this.setState({serverError: err.message, showMfa: false});\n            }\n        );\n    }\n\n    render() {\n        let serverError = null;\n        let formClass = 'form-group';\n        if (this.state.serverError) {\n            serverError = <div className='form-group has-error'><label className='control-label'>{this.state.serverError}</label></div>;\n            formClass += ' has-error';\n        }\n\n        let passwordError = null;\n        let passwordClass = 'form-group';\n        if (this.state.passwordError) {\n            passwordError = <div className='form-group has-error'><label className='control-label'>{this.state.passwordError}</label></div>;\n            passwordClass += ' has-error';\n        }\n\n        let ldapError = null;\n        let ldapClass = 'form-group';\n        if (this.state.ldapError) {\n            ldapError = <div className='form-group has-error'><label className='control-label'>{this.state.ldapError}</label></div>;\n            ldapClass += ' has-error';\n        }\n\n        let ldapPasswordError = null;\n        let ldapPasswordClass = 'form-group';\n        if (this.state.ldapPasswordError) {\n            ldapPasswordError = <div className='form-group has-error'><label className='control-label'>{this.state.ldapPasswordError}</label></div>;\n            ldapPasswordClass += ' has-error';\n        }\n\n        let loginPlaceholder;\n        if (global.window.mm_config.LdapLoginFieldName) {\n            loginPlaceholder = global.window.mm_config.LdapLoginFieldName;\n        } else {\n            loginPlaceholder = Utils.localizeMessage('claim.email_to_ldap.ldapId', 'AD/LDAP ID');\n        }\n\n        let passwordPlaceholder;\n        if (global.window.mm_config.LdapPasswordFieldName) {\n            passwordPlaceholder = global.window.mm_config.LdapPasswordFieldName;\n        } else {\n            passwordPlaceholder = Utils.localizeMessage('claim.email_to_ldap.ldapPwd', 'AD/LDAP Password');\n        }\n\n        let content;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.props.email}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n        } else {\n            content = (\n                <form\n                    onSubmit={this.preSubmit}\n                    className={formClass}\n                >\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.ssoType'\n                            defaultMessage='Upon claiming your account, you will only be able to login with AD/LDAP'\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.ssoNote'\n                            defaultMessage='You must already have a valid AD/LDAP account'\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.enterPwd'\n                            defaultMessage='Enter the password for your {site} email account'\n                            values={{\n                                site: global.window.mm_config.SiteName\n                            }}\n                        />\n                    </p>\n                    <input\n                        type='text'\n                        style={{display: 'none'}}\n                        name='fakeusernameremembered'\n                    />\n                    <div className={passwordClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='emailPassword'\n                            ref='emailpassword'\n                            autoComplete='off'\n                            placeholder={Utils.localizeMessage('claim.email_to_ldap.pwd', 'Password')}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {passwordError}\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.enterLdapPwd'\n                            defaultMessage='Enter the ID and password for your AD/LDAP account'\n                        />\n                    </p>\n                    <div className={ldapClass}>\n                        <input\n                            type='text'\n                            className='form-control'\n                            name='ldapId'\n                            ref='ldapid'\n                            autoComplete='off'\n                            placeholder={loginPlaceholder}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {ldapError}\n                    <div className={ldapPasswordClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='ldapPassword'\n                            ref='ldappassword'\n                            autoComplete='off'\n                            placeholder={passwordPlaceholder}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {ldapPasswordError}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.email_to_ldap.switchTo'\n                            defaultMessage='Switch account to AD/LDAP'\n                        />\n                    </button>\n                    {serverError}\n                </form>\n            );\n        }\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.email_to_ldap.title'\n                        defaultMessage='Switch Email/Password Account to AD/LDAP'\n                    />\n                </h3>\n                {content}\n            </div>\n        );\n    }\n}\n\nEmailToLDAP.defaultProps = {\n};\nEmailToLDAP.propTypes = {\n    email: React.PropTypes.string\n};\n\n\n\n// WEBPACK FOOTER //\n// ./components/claim/components/email_to_ldap.jsx"],"sourceRoot":""}